<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YCZ</title>
  
  <subtitle>走向内心，寻求超越</subtitle>
  <link href="https://changzeyan.github.io/atom.xml" rel="self"/>
  
  <link href="https://changzeyan.github.io/"/>
  <updated>2022-02-16T18:54:00.722Z</updated>
  <id>https://changzeyan.github.io/</id>
  
  <author>
    <name>ChangzeYan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jsp-basic</title>
    <link href="https://changzeyan.github.io/2022/01/16/java/jsp/jsp-basic/"/>
    <id>https://changzeyan.github.io/2022/01/16/java/jsp/jsp-basic/</id>
    <published>2022-01-16T02:00:51.000Z</published>
    <updated>2022-02-16T18:54:00.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jsp引入bootstrap样式"><a href="#Jsp引入bootstrap样式" class="headerlink" title="Jsp引入bootstrap样式"></a>Jsp引入bootstrap样式</h1><p>参考：<a href="https://blog.csdn.net/qq_43254488/article/details/85099244">https://blog.csdn.net/qq_43254488/article/details/85099244</a></p><p>下载：<a href="https://www.bootcss.com/">https://www.bootcss.com/</a></p><p>点某个版本中文文档：<a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a><br>进入下载页</p><p>下载用于生产环境的bootstrap</p><p>将下载的压缩包解压，在jsp项目webapp目录下新建static文件夹，将解压的文件夹放到static目录下：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/jsp_bootstrap.png" alt="bootstrap文件位置"></p><p>在jsp页面中引用：<br>方式1：用basepath</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; %&gt;&lt;%    String path=request.getContextPath();    String bathPath=request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;%&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&lt;%=bathPath%&gt;/static/bootstrap-3.4.1-dist/css/bootstrap.min.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%=bathPath%&gt;/static/bootstrap-3.4.1-dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>方式2：直接引用<br>head:</p><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/bootstrap-3.4.1-dist/css/bootstrap.min.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;static/bootstrap-3.4.1-dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>body:</p><pre><code>&lt;nav aria-label=&quot;Page navigation&quot;&gt;    &lt;ul class=&quot;pagination&quot;&gt;        &lt;li&gt;            &lt;a href=&quot;#&quot; aria-label=&quot;Previous&quot;&gt;                &lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;            &lt;/a&gt;        &lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt; &lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt; &lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt; &lt;/li&gt;        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;4&lt;/a&gt; &lt;/li&gt;    &lt;/ul&gt;&lt;/nav&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;默认样式&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;首选项&lt;/button&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot;&gt;成功&lt;/button&gt;</code></pre><h1 id="添加json依赖"><a href="#添加json依赖" class="headerlink" title="添加json依赖"></a>添加json依赖</h1><p>引入以下jar包：<br>commons-lang-2.5.jar<br>commons-collections-3.1.jar<br>commons-beanutils-1.7.0.jar<br>json-lib-2.4-jdk15.jar<br>ezmorph-1.0.3.jar<br>commons-logging-1.1.1.jar</p><p>在tomcat 的lib目录下也要放置</p><h1 id="Bootstrap开关按钮"><a href="#Bootstrap开关按钮" class="headerlink" title="Bootstrap开关按钮"></a>Bootstrap开关按钮</h1><p>bootstrap4-toggle：<br><a href="https://gitbrent.github.io/bootstrap4-toggle/">https://gitbrent.github.io/bootstrap4-toggle/</a></p>]]></content>
    
    
    <summary type="html">Jsp 基础知识</summary>
    
    
    
    <category term="Jsp" scheme="https://changzeyan.github.io/categories/Jsp/"/>
    
    
  </entry>
  
  <entry>
    <title>tomcat</title>
    <link href="https://changzeyan.github.io/2022/01/12/java/tomcat/tomcat/"/>
    <id>https://changzeyan.github.io/2022/01/12/java/tomcat/tomcat/</id>
    <published>2022-01-12T10:03:57.000Z</published>
    <updated>2022-01-12T10:43:37.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下载地址：<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a><br>下载core版本，64-bit Windows zip (pgp, sha512)</p><p>解压后新建环境变量<br>CATALINA_BASE ，值为根目录：D:\Environment\Tomcat\apache-tomcat-8.5.59</p><p>CATALINA_HOME ，值为根目录：D:\Environment\Tomcat\apache-tomcat-8.5.59</p><p>打开path，在后面添加：<br>;%CATALINA_HOME%\lib;%CATALINA_HOME%\bin;</p><p>验证：<br>cmd中输入：startup</p><h1 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h1><p>1、找到apache-tomcat-7.0.92/conf/logging.properties<br>2、将java.util.logging.ConsoleHandler.encoding 从utf-8改为GBK</p><p>重启</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://tomcat.apache.org/download-80.cgi&quot;&gt;https://tomca</summary>
      
    
    
    
    <category term="tomcat" scheme="https://changzeyan.github.io/categories/tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>springboot</title>
    <link href="https://changzeyan.github.io/2021/12/16/java/springboot/springboot/"/>
    <id>https://changzeyan.github.io/2021/12/16/java/springboot/springboot/</id>
    <published>2021-12-16T12:48:22.000Z</published>
    <updated>2021-12-16T12:56:12.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><p>@Controller：用于定义控制器类，在spring项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层），一般这个注解在类中，通常方法需要配合注解@RequestMapping。</p><pre><code>@Controllerpublic class Configurecontroller &#123;    &#125;</code></pre><p>@RestController：用于标注控制层组件(如struts中的action)，@ResponseBody和@Controller的合集。<br>@RequestMapping：提供路由信息，负责URL到Controller中的具体函数的映射。</p>]]></content>
    
    
    <summary type="html">springboot基础知识</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>媒体视频作品集合</title>
    <link href="https://changzeyan.github.io/2021/11/20/wen-shi-zhe/hcworkshow/"/>
    <id>https://changzeyan.github.io/2021/11/20/wen-shi-zhe/hcworkshow/</id>
    <published>2021-11-19T20:41:44.000Z</published>
    <updated>2021-11-19T20:45:37.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笑着打开这个视频，看完发现眼里进了沙"><a href="#笑着打开这个视频，看完发现眼里进了沙" class="headerlink" title="笑着打开这个视频，看完发现眼里进了沙"></a>笑着打开这个视频，看完发现眼里进了沙</h2><p>16.0万播放 · 总弹幕数563</p><iframe src="//player.bilibili.com/player.html?aid=294084558&bvid=BV1VF411Y72L&cid=439112592&page=1" scrolling="no" frameborder="no" framespacing="0" allowfullscreen="true" height="500" width="100%"> </iframe><h2 id="谁是自然界的节奏大师"><a href="#谁是自然界的节奏大师" class="headerlink" title="谁是自然界的节奏大师"></a>谁是自然界的节奏大师</h2><p>158.0万播放 · 总弹幕数865</p><iframe src="//player.bilibili.com/player.html?aid=933574325&bvid=BV1HT4y1o7rw&cid=423817024&page=1" scrolling="no" frameborder="no" framespacing="0" allowfullscreen="true" height="500" width="100%"> </iframe>]]></content>
    
    
    <summary type="html">感恩生活，记录时代</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>杂文</title>
    <link href="https://changzeyan.github.io/2021/10/21/wen-shi-zhe/poetry/"/>
    <id>https://changzeyan.github.io/2021/10/21/wen-shi-zhe/poetry/</id>
    <published>2021-10-21T12:22:58.000Z</published>
    <updated>2022-02-16T20:14:55.136Z</updated>
    
    <content type="html"><![CDATA[<pre><code>思幽幽出皓月，浅浅入白雪。微微携清风，渐渐眠江夜。</code></pre><p>回来再次走过那几条路，恍若隔世。</p><p>2021年10月25日，晴。偶然间发现自己一直被上天眷顾，高中一直念叨以后一定要来北京，虽然当时没能如愿，但兜兜转转几年后我竟真的来了北京，与其说是来到，更有一种回到的感觉，尽管这感觉并不真实可信，或者是一种错觉。错到我认为北京就像一个吸铁石，我是一个漂浮的铁屑，一个铁屑是无法决定它要去哪的，它只能被吸铁石吸走。但是到了北京并没有我想象地那么欣喜，反而心静地像是没有风的湖面，没有一丝波澜。也许是人生早已有了剧本，我只需要按照它走下去就好了。但是这剧本没人给我剧透，我不知何时来，也不知何时去。但我知道无论怎么走都超不出它的范围，所以我每次走在十字路口不知道往哪走的时候，我总是告诉自己随便选一个，或者取局部最优解就可以。我这样做是因为我相信我的结局已经写好了，条条大路通罗马，只要大方向没错，我怎么走都能到达终点，无非是走的进还是走得远，走得轻松还是走得辛苦。最近我说会成为一个符号，隔天就变成了“Y”，我觉得很巧，蹊跷，甚至很离谱。导致我一度怀疑是有一根看不见的线将世间你我相连，被连起来的人有着莫名其妙相通的情愫。但是谁跟谁连在一起、连多长时间只有负责连线的人才知道，自己是不知道自己身上有没有线，有几根线，线的那头是谁的。如果只到这里还情有可原，但是昨天发现网易云音乐中有一首名为“Y”的歌，（2021.11.03 5:53）我记住这首歌第一是因为一个人，第二是因为下面的两条评论。总之已经忘了歌词忘了旋律。第一条评论的大意是“Y”就像一个岔路口，两个人起点不同，但最终还是走在一起。第二条评论大意是本来走在一起的两个人走着走着就分开了。我比较赞成第一种解释，因为写“Y”是从上向下写的，没人会倒立着写它。</p><p>我总觉得每个人来到这里是为了一件事的，虽然他自己也不知道是什么事，也许是看看花，也许是走一段路，又或许是见一个人。当事情做完后他就走了，有的人不舍是因为他不知道自己已经做完了，有的人想提前走是因为他觉得自己不想再做了。</p><p>黑客帝国<br>昨天看了b站青蛙刀圣的黑客帝国解析，觉得自己好像明白了什么，又好像什么都没明白。<br>给我印象最深的看点有三个，第一个是宿命论、决定论以及个人意志在人的一生中的作用；第二个是看到自身时刻处于矩阵之中但不知道是否要打破矩阵及其意义以及怎么打破矩阵；第三个是选择，究竟有没有选择，选择是偶然还是毕然。</p><p>我并不是从一开始就相信宿命论，在最早的时候，我其实一直相信个人意志的作用是占主导地位的，也许这跟我从小受到的家庭教育有关。当时的我非常看重努力的作用，相信类似“努力总有收获”的话，这在一定程度上没有错，反而有益，我在不是特别迷恋这句话的时候其实是这种思想的受益者。但是，当过分认同个人意志时，有可能会带来毁灭。因为如果过分相信个人意志和个人努力，忽略了其他可能对结果造成影响的因素，当结果不如预期，便会造成心理落差，从而开始怀疑自己、否定自己。如果没有得到适当引导，及时从中走出的话，便会造成心理崩溃。事实上，我曾经徘徊在这一危险境地的边缘或是已经深陷泥潭。好在最后逐渐认识到个人意志只是影响结果的其中一个因素。如果将导致结果的各个因素看作一个网络，因素则可以看作其中的节点，每个节点都有相应的权重，每个人都有自己的网络，网络中各项节点的权重也因人而异。有的人可能看重个人意志，则表现出努力、奋斗的特质（当然表现努力这一结果也受多个条件影响，比如目标、人生规划、环境等，所以人最终的结果是一个网络导致的）；有的人可能不是特别看重，则表现为随遇而安。其程度是由变量前面的系数决定的，</p><p>导致我观念转变的另一因素是一方面是感受到个人意志对结果影响越来越小，不期而遇对结果带来的影响越来越大。比如找工作一开始是在互联网投入了巨大精力，但是结果却不如预期（当然也与我准备不足等因素有关），而在体制工作上并没有投入很多精力却带来了意外惊喜。所以我想我现在选择这个工作究竟是已经注定的还是前期找互联网不顺进而对其疲惫于是转而寻找其他出路这一原因导致的。如果一开始我找互联网很顺利那么后面还会不会有如今这一选择。</p><p>不仅是工作上还有爱情上，当我想找对象时，尝试相亲，可以看作是通过发挥个人意志的作用，来影响状态这一结果，结果失败了，但靠缘分这种虚无缥缈的东西却成功了。当然这其中还有其他因素，但这些因素肯定是原因，是这些原因导致的最终结果。</p><p>分析到这里，我现在能得出的结论是我是相信因果决定论的。因此相信没有什么选择，选择结果是确定的，要做的只是理解为什么选择。</p>]]></content>
    
    
    <summary type="html">走一段时急时缓的山路，过一段不悲不喜的人生</summary>
    
    
    
    <category term="文史哲" scheme="https://changzeyan.github.io/categories/%E6%96%87%E5%8F%B2%E5%93%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Excel</title>
    <link href="https://changzeyan.github.io/2021/09/16/write/excel/excel/"/>
    <id>https://changzeyan.github.io/2021/09/16/write/excel/excel/</id>
    <published>2021-09-16T10:58:22.000Z</published>
    <updated>2021-11-19T20:29:06.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="求和函数"><a href="#求和函数" class="headerlink" title="求和函数"></a>求和函数</h2><p>两行对应的数值相乘求和：<br>B2列到AB2列这一行与B3:AB3列这一行对应相乘求和</p><pre><code>=SUMPRODUCT($B$2:$AB$2, B3:AB3)</code></pre>]]></content>
    
    
    <summary type="html">EXCEL常用函数</summary>
    
    
    
    <category term="Excel" scheme="https://changzeyan.github.io/categories/Excel/"/>
    
    
  </entry>
  
  <entry>
    <title>webdriverer命令</title>
    <link href="https://changzeyan.github.io/2021/09/03/python/webdriver/webdriverer-basic/"/>
    <id>https://changzeyan.github.io/2021/09/03/python/webdriver/webdriverer-basic/</id>
    <published>2021-09-03T03:43:31.000Z</published>
    <updated>2021-11-19T20:31:54.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webdriver使用"><a href="#Webdriver使用" class="headerlink" title="Webdriver使用"></a>Webdriver使用</h1><p>安装</p><pre><code>pip install selenium</code></pre><p>下载与浏览器版本对应的驱动：<br>chrome：<br><a href="http://npm.taobao.org/mirrors/chromedriver/">http://npm.taobao.org/mirrors/chromedriver/</a><br><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a><br>下载后放到以下目录：<br>C:\Program Files (x86)\Google\Chrome\Application<br>然后修改环境变量，在path后面加：<br>;C:\Program Files (x86)\Google\Chrome\Application<br>导包</p><pre><code>from selenium import webdriverfrom selenium.webdriver import ChromeOptions</code></pre><p>启动与打开网页：</p><pre><code>本地:option = ChromeOptions()# 启动chrome时，去掉window.navigator.webdriver属性，使浏览器检测不到webdriveroption.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])browser = webdriver.Chrome(options=option)browser.get(r&quot;C:\Users\Changze\Desktop\gongzhong.html&quot;)</code></pre><p>拖动滚动条</p><pre><code># 拖动十次for i in range(10):    browser.execute_script(&quot;window.scrollTo(0, document.body.scrollHeight);&quot;)    # 两次拖动之间间隔随机时间    time.sleep(random.randint(2, 5))</code></pre><p>获取标签的属性值：</p><pre><code>&lt;time datetime=&quot;2021-07-01T09:17:23.000Z&quot;&gt;7月1日&lt;/time&gt;ele_time = twitter.find_element_by_tag_name(&#39;time&#39;)datetime = ele_time.get_attribute(&#39;datetime&#39;)</code></pre>]]></content>
    
    
    <summary type="html">如何快速启动一个WebDriver应用</summary>
    
    
    
    <category term="Webdriver" scheme="https://changzeyan.github.io/categories/Webdriver/"/>
    
    
  </entry>
  
  <entry>
    <title>PS快捷键</title>
    <link href="https://changzeyan.github.io/2021/08/30/photoshop/ps-kuai-jie-jian/"/>
    <id>https://changzeyan.github.io/2021/08/30/photoshop/ps-kuai-jie-jian/</id>
    <published>2021-08-30T08:16:45.000Z</published>
    <updated>2021-11-19T20:33:03.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PS-快捷键"><a href="#PS-快捷键" class="headerlink" title="PS 快捷键"></a>PS 快捷键</h1><pre><code>缩放图片中的某一部分：ctrl+t鼠标放在边框上拖拉缩放路径变选区：ctrl+enter填充前景色到图层或选区：Alt + Backspace或Delete填充背景色到图层或选区：Ctrl + Backspace或Delete复制图层：ctrl+j取消选区：Ctrl+D</code></pre><h2 id="扣字变换颜色"><a href="#扣字变换颜色" class="headerlink" title="扣字变换颜色"></a>扣字变换颜色</h2><p>选择主体后，用魔棒圈出字体轮廓，ctrl+enter载入选区，然后alt+del填充前景色<br>参考：<a href="https://jingyan.baidu.com/article/a501d80c0309cfad630f5edb.html">怎么用PS改变图片中部分区域的颜色？</a></p><h2 id="删除背景色"><a href="#删除背景色" class="headerlink" title="删除背景色"></a>删除背景色</h2><p>魔棒工具选中背景色，然后del健删除</p>]]></content>
    
    
    <summary type="html">学习PS的关键在于知道里面的按钮是干什么的</summary>
    
    
    
    <category term="PS" scheme="https://changzeyan.github.io/categories/PS/"/>
    
    
  </entry>
  
  <entry>
    <title>中国古代土地制度演变及所有权归属</title>
    <link href="https://changzeyan.github.io/2021/08/19/wen-shi-zhe/zhong-guo-gu-dai-tu-di-zhi-du-yan-bian-ji-suo-you-quan-gui-shu/"/>
    <id>https://changzeyan.github.io/2021/08/19/wen-shi-zhe/zhong-guo-gu-dai-tu-di-zhi-du-yan-bian-ji-suo-you-quan-gui-shu/</id>
    <published>2021-08-19T07:33:40.000Z</published>
    <updated>2021-11-19T20:25:36.837Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://baijiahao.baidu.com/s?id=1600769382305099561&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1600769382305099561&amp;wfr=spider&amp;for=pc</a><br>参考：<a href="https://zhuanlan.zhihu.com/p/63156984">https://zhuanlan.zhihu.com/p/63156984</a></p></blockquote><h2 id="先秦"><a href="#先秦" class="headerlink" title="先秦"></a>先秦</h2><p>夏、商时期，土地制度是以氏族为单位的土地公有制，农业生产往往采取集体劳作的方式进行。</p><p>武王克商以后，采用“分封亲戚、以藩屏周”的政策，把他的同姓宗亲和功臣谋士分封各地，建立诸侯国。分封地的主权和产权是周王的，诸侯只有财权和治权。全国的土地与臣民，名义上都属周王所有，正如《诗·小雅·北山》所说：“普天之下，莫非王土；率土之滨，莫非王臣”。当时的土地制度为井田制。井田制规定一切土地属于国家所有（即属于周天子所有），周王是全国最高的统治者，也是最高的土地所有者。</p><p>其特点有三：一是土地国有，亦即归周天子所有；二是分赐诸侯臣下，世代享用，不得买卖；三是缴纳贡赋。诸侯大夫对分封的土地只享有使用权而无所有权，并且要按时向周天子缴纳贡赋。</p><p>井田制是把耕地划分为多块一定面积的方田，周围有经界，中间有水沟，阡陌纵横，像一个井字。一人耕种大约100亩（约合今70公亩）。100亩为一个方块，称为“一田”。甲骨文中的“田”字也是由此而来。 一井分为9个方块，周围的8块田由8户耕种，谓之私田，私田收成全部归耕户所有；中间是公田，由8户共耕，收入全归封邑贵族所有。</p><h2 id="建国后"><a href="#建国后" class="headerlink" title="建国后"></a>建国后</h2><p>我国土地所有权，分为国家土地所有权和集体土地所有权，自然人不能成为土地所有权的主体。中华人民共和国是国家土地所有权的统一和唯一的主体，由其代表全体人民对国有土地享有独占性支配的权利。</p>]]></content>
    
    
    <summary type="html">土地公公</summary>
    
    
    
    <category term="文史哲" scheme="https://changzeyan.github.io/categories/%E6%96%87%E5%8F%B2%E5%93%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>修改图片大小</title>
    <link href="https://changzeyan.github.io/2021/07/18/photoshop/xiu-gai-tu-pian-da-xiao/"/>
    <id>https://changzeyan.github.io/2021/07/18/photoshop/xiu-gai-tu-pian-da-xiao/</id>
    <published>2021-07-18T05:11:48.000Z</published>
    <updated>2021-11-19T20:34:11.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改分辨率大小"><a href="#修改分辨率大小" class="headerlink" title="修改分辨率大小"></a>修改分辨率大小</h1><p>参考：<a href="https://www.jb51.net/photoshop/774494_all.html">ps2021怎么修改图片尺寸? ps2021调整图片大小的三种方法</a></p><ol><li><p>工作视图选择图形和web<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_change_size1.png" alt="裁剪工具"></p></li><li><p>修改像素值<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_change_size2.png" alt="修改像素值"></p></li></ol><h1 id="修改内存大小"><a href="#修改内存大小" class="headerlink" title="修改内存大小"></a>修改内存大小</h1><p>参考：<a href="http://www.360doc.com/content/12/0515/16/5787601_211212018.shtml">用ps怎么缩小图片大小保持图片的清晰度?</a></p><ol><li>选择，文件，导出，存储为web和设备所用格式（旧版）<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_change_size3.png" alt="存储为web和设备所用格式"></li><li>在预设中选择品质，左下角显示修改后的图片内存大小<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_change_size4.png" alt="在预设中选择品质"></li></ol>]]></content>
    
    
    <summary type="html">只是为了应对时而将图片变小时而将图片变大的需求</summary>
    
    
    
    <category term="PS" scheme="https://changzeyan.github.io/categories/PS/"/>
    
    
  </entry>
  
  <entry>
    <title>修改证件照背景</title>
    <link href="https://changzeyan.github.io/2021/07/14/photoshop/xiu-gai-zheng-jian-zhao-bei-jing/"/>
    <id>https://changzeyan.github.io/2021/07/14/photoshop/xiu-gai-zheng-jian-zhao-bei-jing/</id>
    <published>2021-07-14T02:47:19.000Z</published>
    <updated>2021-09-02T07:18:07.607Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://www.bilibili.com/video/BV1Q741147i4?from=search&seid=10245401262887271741">ps2020超快速更换证件照背景颜色的</a></li><li><a href="https://www.bilibili.com/video/BV15A411p7RU?t=8">PS2021的对象选择工具可真是太秀了！</a></li></ul><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>ps2021</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><ol><li><p>使用<strong>对象选择工具</strong> 框住人物</p></li><li><p>点击遮住并覆盖<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg1.png" alt="对象选择工具"></p></li><li><p>在输出颜色中选中净化颜色，确定 （抠图）<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg2.png" alt="净化颜色"></p></li><li><p>新建图层 ，右下角加号<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg3.png" alt="新建图层"></p></li><li><p>设置新图层背景色，这里修改为白色<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg4.png" alt="设置新图层背景色"></p></li><li><p>ctrl+delete 删除人像<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg5.png" alt="删除人像"></p></li><li><p>将人像图层拖动到背景图层前<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg6.png" alt="拖动图层"></p></li></ol><p>这样背景就换成白色了，如果想换成红色：</p><ol><li>新建图层，设置图层背景色为红色，#FF0000 ，然后ctrl+delete删除人像</li><li>将人物图层拖动到背景前<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg7.png" alt="拖动图层"></li></ol><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><ol><li>ctrl+f，在快速操作中选择移除背景。</li><li>然后新建图层，设置背景色（ctrl+backspace填充背景色）</li><li>将人物图层移动到背景图层之上</li></ol><h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><ol><li>右下角选择色相/饱和度，右下角<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg8.png" alt="选择色相饱和度"></li><li>点击手形按钮，然后点击背景色，滑动调整色相、饱和度等<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg9.png" alt="选择色相饱和度"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Q741147i4?from=search&amp;seid=10245401262887271741&quot;&gt;ps2020超快速更换证件照背景颜色的&lt;/a&gt;&lt;/li&gt;</summary>
      
    
    
    
    <category term="PS" scheme="https://changzeyan.github.io/categories/PS/"/>
    
    
  </entry>
  
  <entry>
    <title>PPT</title>
    <link href="https://changzeyan.github.io/2021/06/18/write/ppt/ppt/"/>
    <id>https://changzeyan.github.io/2021/06/18/write/ppt/ppt/</id>
    <published>2021-06-18T11:56:49.000Z</published>
    <updated>2021-06-18T12:13:06.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置主题字体"><a href="#设置主题字体" class="headerlink" title="设置主题字体"></a>设置主题字体</h1><p>设计中右边框点击小三角<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ppt_theme_typeface0.png" alt="ppt主题字体"></p><p>自定义添加字体：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ppt_theme_typeface.png" alt="ppt主题字体"></p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ppt_theme_typeface1.png" alt="ppt主题字体"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设置主题字体&quot;&gt;&lt;a href=&quot;#设置主题字体&quot; class=&quot;headerlink&quot; title=&quot;设置主题字体&quot;&gt;&lt;/a&gt;设置主题字体&lt;/h1&gt;&lt;p&gt;设计中右边框点击小三角&lt;br&gt;&lt;img src=&quot;https://github.com/ChangzeYan</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jmeter</title>
    <link href="https://changzeyan.github.io/2021/06/05/softwaretest/jmeter/"/>
    <id>https://changzeyan.github.io/2021/06/05/softwaretest/jmeter/</id>
    <published>2021-06-05T12:03:46.000Z</published>
    <updated>2021-06-05T12:59:14.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h1><p>参考：<a href="https://blog.csdn.net/u012111923/article/details/80705141">JMeter性能测试，完整入门篇</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://jmeter.apache.org/download_jmeter.cgi">下载地址</a></p><p>执行：<br>解压后，执行bin下面的jmeter.bat即可 </p><h3 id="安装jp-gc等插件"><a href="#安装jp-gc等插件" class="headerlink" title="安装jp@gc等插件"></a>安装jp@gc等插件</h3><p>参考：<a href="https://blog.csdn.net/LXiaYu123456789/article/details/113694985">Jmeter-监听器jp@gc</a></p><p>使用监听器jp@gc的，需要选项中存在Plugins Manager,如果没有请下插件：<a href="https://jmeter-plugins.org/downloads/all/">Plugins Manager</a></p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/jmeterplugin.png" alt="JmeterPlugin"></p><p>下载后放置在jmeter安装目录下的lib/ext中，重新启动即可</p><p>如下图，安装jpgc插件：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/jmeterjpgc.png" alt="JmeterPlugin"></p><h2 id="生成web页面的报告"><a href="#生成web页面的报告" class="headerlink" title="生成web页面的报告"></a>生成web页面的报告</h2><pre><code>jmeter -n -t D:\program\apache-jmeter-5.0\samples\28.summary_report.jmx -l d:\summary.jtl -e -o d:\result</code></pre><p>jmx文件：jmeter的测试项目文件<br>jtl文件：生成的脚本文件<br>d:\result：web页面报告的存储路径（必须为空目录）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Jmeter&quot;&gt;&lt;a href=&quot;#Jmeter&quot; class=&quot;headerlink&quot; title=&quot;Jmeter&quot;&gt;&lt;/a&gt;Jmeter&lt;/h1&gt;&lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/u012111923/article/d</summary>
      
    
    
    
    <category term="SoftwareTest" scheme="https://changzeyan.github.io/categories/SoftwareTest/"/>
    
    
  </entry>
  
  <entry>
    <title>Latex-参考文献</title>
    <link href="https://changzeyan.github.io/2021/05/09/write/latex/latex-can-kao-wen-xian/"/>
    <id>https://changzeyan.github.io/2021/05/09/write/latex/latex-can-kao-wen-xian/</id>
    <published>2021-05-09T11:22:34.000Z</published>
    <updated>2021-07-01T11:25:05.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode-编译bib文件的配置"><a href="#vscode-编译bib文件的配置" class="headerlink" title="vscode 编译bib文件的配置"></a>vscode 编译bib文件的配置</h1><p>参考：<a href="https://blog.csdn.net/lishu14/article/details/102774145">vscode latex 踩坑记 ： 文献索引 bib 文件和setting.json的那点事</a></p><p>在vscode中 file-&gt;preferences-&gt;settings：</p><p>点击右上角的（open settings(Json)）:</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/vscode-latex-setting.png" alt="vscode中配置文件位置"><br>复制下面代码：</p><pre><code>&#123;    &quot;latex-workshop.latex.recipes&quot;: [        &#123;            &quot;name&quot;: &quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;,            &quot;tools&quot;: [                &quot;xelatex&quot;,                &quot;bibtex&quot;,                &quot;xelatex&quot;,                &quot;xelatex&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;XeLaTeX&quot;,            &quot;tools&quot;: [                &quot;xelatex&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;LaTeXmk&quot;,            &quot;tools&quot;: [                &quot;latexmk&quot;            ]        &#125;,        // &#123;        //     &quot;name&quot;: &quot;PDFLaTeX&quot;,        //     &quot;tools&quot;: [        //         &quot;pdflatex&quot;        //     ]        // &#125;,        &#123;            &quot;name&quot;: &quot;BibTeX&quot;,            &quot;tools&quot;: [                &quot;bibtex&quot;            ]        &#125;,                // &#123;        //     &quot;name&quot;: &quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;,        //     &quot;tools&quot;: [        //         &quot;pdflatex&quot;,        //         &quot;bibtex&quot;,        //         &quot;pdflatex&quot;,        //         &quot;pdflatex&quot;        //     ]        // &#125;    ],  &quot;latex-workshop.latex.tools&quot;: [    &#123;        &quot;name&quot;: &quot;xelatex&quot;,        &quot;command&quot;: &quot;xelatex&quot;,        &quot;args&quot;: [            &quot;-synctex=1&quot;,            &quot;-interaction=nonstopmode&quot;,            &quot;-file-line-error&quot;,            &quot;%DOCFILE%&quot;        ]    &#125;,    &#123;        &quot;name&quot;: &quot;pdflatex&quot;,        &quot;command&quot;: &quot;pdflatex&quot;,        &quot;args&quot;: [            &quot;-synctex=1&quot;,            &quot;-interaction=nonstopmode&quot;,            &quot;-file-line-error&quot;,            &quot;%DOCFILE%&quot;        ]    &#125;,    &#123;        &quot;name&quot;: &quot;latexmk&quot;,        &quot;command&quot;: &quot;latexmk&quot;,        &quot;args&quot;: [            &quot;-synctex=1&quot;,            &quot;-interaction=nonstopmode&quot;,            &quot;-file-line-error&quot;,            &quot;-pdf&quot;,            &quot;-outdir=%OUTDIR%&quot;,            &quot;%DOCFILE%&quot;        ]    &#125;,    &#123;        &quot;name&quot;: &quot;bibtex&quot;,        &quot;command&quot;: &quot;bibtex&quot;,        &quot;args&quot;: [            &quot;%DOCFILE%&quot;        ]    &#125;  ],  &quot;latex-workshop.latex.clean.fileTypes&quot;: [      &quot;*.aux&quot;,      &quot;*.bbl&quot;,      &quot;*.blg&quot;,      &quot;*.idx&quot;,      &quot;*.ind&quot;,      &quot;*.lof&quot;,      &quot;*.lot&quot;,      &quot;*.out&quot;,      &quot;*.toc&quot;,      &quot;*.acn&quot;,      &quot;*.acr&quot;,      &quot;*.alg&quot;,      &quot;*.glg&quot;,      &quot;*.glo&quot;,      &quot;*.gls&quot;,      &quot;*.ist&quot;,      &quot;*.fls&quot;,      &quot;*.log&quot;,      &quot;*.fdb_latexmk&quot;  ],  &quot;files.autoSave&quot;: &quot;afterDelay&quot;,  &quot;editor.wordWrap&quot;: &quot;on&quot;,  &quot;explorer.confirmDelete&quot;: false,  &quot;git.autofetch&quot;: true,  &quot;window.zoomLevel&quot;: 0,  &quot;explorer.confirmDragAndDrop&quot;: false,  &#125;</code></pre><h2 id="配置文件注意点"><a href="#配置文件注意点" class="headerlink" title="配置文件注意点"></a>配置文件注意点</h2><p>原来我的配置是下面这样（也是很多博客中的做法）：</p><pre><code> &quot;latex-workshop.latex.recipes&quot;: [  &#123;    &quot;name&quot;: &quot;xelatex&quot;,    &quot;tools&quot;: [        &quot;xelatex&quot;    ]  &#125;,   &#123;    &quot;name&quot;: &quot;latexmk&quot;,    &quot;tools&quot;: [        &quot;latexmk&quot;    ]  &#125;,    &#123;    &quot;name&quot;: &quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;,    &quot;tools&quot;: [        &quot;pdflatex&quot;,        &quot;bibtex&quot;,        &quot;pdflatex&quot;,        &quot;pdflatex&quot;    ]  &#125;  ],</code></pre><p><strong>这个配置的问题在于，只会使用第一个recipe</strong></p><pre><code>&#123;    &quot;name&quot;: &quot;xelatex&quot;,    &quot;tools&quot;: [        &quot;xelatex&quot;    ]  &#125;,</code></pre><p>会导致只编译一次，而bib文件不会被编译，导致参考文献出不来</p><p>而用命令行编译是四次，结果正常：</p><pre class=" language-bash"><code class="language-bash">xelatex -shell-escape thesis.texbibtex thesisxelatex -shell-escape thesis.texxelatex -shell-escape thesis.tex</code></pre><p>假设我们的核心文件是hello.tex，我们的参考文件是ref.bib，在hello.tex文末通过  \bibliography{ref}  来指明引用的文件叫做ref.bib。然后编译hello.tex，发现文章除了参考文献之外的其他内容都是正常的，唯独参考文献。这是因为只用了xelatex来编译hello.tex。而ref.bib也需要编译，通过bibtex。而直接在命令行里输入bibtex ref.bib会有问题报错说找不到ref.aux。本文件夹里只有hello.aux，因此只需要将ref.bib改名为hello.bib即可（在hello.tex中也需要将对应的 \bibliography{ref} 改为 \bibliography{hello}），然后先编译hello.tex（这个能在vscode里通过ctrl+s自动保存hello.tex进而自动编译）生成hello.aux，再通过命令行编译hello.bib生成hello.bbl，然后再编译hello.tex更新hello.aux，然后再编译hello.tex将其与参考文献(hello.bbl)真正结合起来。所以一共需要编译4次！</p><p>很麻烦！那么我们只需要对上述的三个recipe调换顺序即可，把第三个放到第一位置：</p><pre><code>&quot;latex-workshop.latex.recipes&quot;: [  &#123;    &quot;name&quot;: &quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;,    &quot;tools&quot;: [        &quot;pdflatex&quot;,        &quot;bibtex&quot;,        &quot;pdflatex&quot;,        &quot;pdflatex&quot;    ]  &#125;   &#123;    &quot;name&quot;: &quot;xelatex&quot;,    &quot;tools&quot;: [        &quot;xelatex&quot;    ]  &#125;,   &#123;    &quot;name&quot;: &quot;latexmk&quot;,    &quot;tools&quot;: [        &quot;latexmk&quot;    ]  &#125;,  ],</code></pre><p>  这样就可以了通过一次单纯的ctrl+s自动顺序完成全部4次编译！而且也不必保证.bib文件名必须与.tex一致。缺点是每次都会编译4次。（pdflatex可以换为xelatex或latexmk，pdflatex比xelatex快，latexmk最慢）。</p><h1 id="反向搜索和正向搜索"><a href="#反向搜索和正向搜索" class="headerlink" title="反向搜索和正向搜索"></a>反向搜索和正向搜索</h1><h2 id="反向搜索"><a href="#反向搜索" class="headerlink" title="反向搜索"></a>反向搜索</h2><p>  默认在pdf中ctrl+鼠标左键就能定位到源文件位置</p><h2 id="正向搜索"><a href="#正向搜索" class="headerlink" title="正向搜索"></a>正向搜索</h2><p>  在源文件中定位到pdf与之对应位置<br> 点击这个SyncTex from cursor，pdf就能滚动到当前鼠标所在源文件对应位置：<br>  <img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/vscode-latex-setting_search.png" alt="vscode中配置文件位置"></p><h1 id="各参考文献格式"><a href="#各参考文献格式" class="headerlink" title="各参考文献格式"></a>各参考文献格式</h1><pre><code>@article期刊杂志的论文必要域: author, title, journal, year.可选域: volume, number, pages, month, note.@book公开出版的图书必要域: author/editor, title, publisher, year.可选域: volume/number, series, address, edition, month, note.@booklet无出版商或作者的图书必要域: title.可选域: author, howpublished, address, month, year, note.@conference等价于 inproceedings必要域: author, title, booktitle, year.可选域: editor, volume/number, series, pages, address, month, organization, publisher, note.@inbook书籍的一部分章节必要域: author/editor, title, chapter and/or pages, publisher, year.可选域: volume/number, series, type, address, edition, month, note.@incollection书籍中带独立标题的章节必要域: author, title, booktitle, publisher, year.可选域: editor, volume/number, series, type, chapter, pages, address, edition, month, note.**publisher和address如果没有的话可能会有缺失[S.I.]**@inproceedings会议论文集中的一篇必要域: author, title, booktitle, year.可选域: editor, volume/number, series, pages, address, month, organization, publisher, note.@manual技术文档必要域: title.可选域: author, organization, address, edition, month, year, note.@mastersthesis硕士论文必要域: author, title, school, year.可选域: type, address, month, note.@misc其他必要域: none可选域: author, title, howpublished, month, year, note.@phdthesis博士论文必要域: author, title, year, school.可选域: address, month, keywords, note.@proceedings会议论文集必要域: title, year.可选域: editor, volume/number, series, address, month, organization, publisher, note.@techreport教育，商业机构的技术报告必要域: author, title, institution, year.可选域: type, number, address, month, note.@unpublished未出版的论文，图书必要域: author, title, note.可选域: month, year.</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vscode-编译bib文件的配置&quot;&gt;&lt;a href=&quot;#vscode-编译bib文件的配置&quot; class=&quot;headerlink&quot; title=&quot;vscode 编译bib文件的配置&quot;&gt;&lt;/a&gt;vscode 编译bib文件的配置&lt;/h1&gt;&lt;p&gt;参考：&lt;a href</summary>
      
    
    
    
    <category term="Latex" scheme="https://changzeyan.github.io/categories/Latex/"/>
    
    
  </entry>
  
  <entry>
    <title>Pandas</title>
    <link href="https://changzeyan.github.io/2021/03/13/python/pandas/"/>
    <id>https://changzeyan.github.io/2021/03/13/python/pandas/</id>
    <published>2021-03-13T11:51:15.000Z</published>
    <updated>2021-09-13T15:09:05.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p>创建dataframe</p><pre><code>df = pd.DataFrame(columns=[&#39;a&#39;,&#39;b&#39;])</code></pre><p>给dataframe增加行：</p><pre><code>for i in range(5):    df.loc[i]=[1,2,3]</code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>对行排序：</p><pre><code>按照&#39;阅读&#39;列将行降序排列sort_res=df.sort_index(axis=0, by=&#39;阅读&#39;, ascending=False)</code></pre><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><p>保存到excel中：</p><pre><code>df.to_excel(&#39;test.xls&#39;)</code></pre><h1 id="统计某列值出现的次数"><a href="#统计某列值出现的次数" class="headerlink" title="统计某列值出现的次数"></a>统计某列值出现的次数</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'key1':['a','a','b','b','a'],'key2':['one','two','one','two','one'],'data1':np.random.randn(5),'data2':np.random.randn(5)&amp;#125;)</span></code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/pandas_datadf.png" alt="dataframe"></p><p>统计key2中各个元素的出现次数：</p><pre class=" language-python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">//</span>返回series</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/df_value_count.png" alt="key2中各个元素的出现次数"></p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><h2 id="遍历series"><a href="#遍历series" class="headerlink" title="遍历series"></a>遍历series</h2><pre class=" language-python"><code class="language-python">series <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> series<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DataFrame&quot;&gt;&lt;a href=&quot;#DataFrame&quot; class=&quot;headerlink&quot; title=&quot;DataFrame&quot;&gt;&lt;/a&gt;DataFrame&lt;/h1&gt;&lt;p&gt;创建dataframe&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df = pd.DataFra</summary>
      
    
    
    
    <category term="Python" scheme="https://changzeyan.github.io/categories/Python/"/>
    
    
    <category term="pandas" scheme="https://changzeyan.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>origin</title>
    <link href="https://changzeyan.github.io/2021/03/13/write/origin/origin/"/>
    <id>https://changzeyan.github.io/2021/03/13/write/origin/origin/</id>
    <published>2021-03-13T07:53:11.000Z</published>
    <updated>2021-05-23T11:55:03.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="倾斜横坐标"><a href="#倾斜横坐标" class="headerlink" title="倾斜横坐标"></a>倾斜横坐标</h1><p>双击横坐标下的文字，或者右键选择横坐标，然后点击刻度线标签</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/origin-scale1.png" alt="双击横坐标"></p><p>然后接着点击刻度线标签下的格式，设置旋转角度：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/origin-scale2.png" alt="双击横坐标"></p><h1 id="根据某两列计算第三列数"><a href="#根据某两列计算第三列数" class="headerlink" title="根据某两列计算第三列数"></a>根据某两列计算第三列数</h1><p>参考：<a href="https://zhidao.baidu.com/question/286467057.html">origin 8.0两列相加怎么算</a></p><p>全选要生成的列，右键，set colum values。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/calculate_cols.png" alt="在选项卡中选择参与计算的列"></p><h1 id="去掉导出图片的白边"><a href="#去掉导出图片的白边" class="headerlink" title="去掉导出图片的白边"></a>去掉导出图片的白边</h1><p>右键图片，选择 Fit page to layers，根据需要调整border值。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/origin_fit_page_to_layers.png" alt="在选项卡中选择参与计算的列"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;倾斜横坐标&quot;&gt;&lt;a href=&quot;#倾斜横坐标&quot; class=&quot;headerlink&quot; title=&quot;倾斜横坐标&quot;&gt;&lt;/a&gt;倾斜横坐标&lt;/h1&gt;&lt;p&gt;双击横坐标下的文字，或者右键选择横坐标，然后点击刻度线标签&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://git</summary>
      
    
    
    
    <category term="Origin" scheme="https://changzeyan.github.io/categories/Origin/"/>
    
    
  </entry>
  
  <entry>
    <title>代码和算法</title>
    <link href="https://changzeyan.github.io/2021/03/11/write/latex/latex-lst/"/>
    <id>https://changzeyan.github.io/2021/03/11/write/latex/latex-lst/</id>
    <published>2021-03-11T13:21:26.000Z</published>
    <updated>2021-05-22T02:30:18.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定制lstlisting-的标题"><a href="#定制lstlisting-的标题" class="headerlink" title="定制lstlisting 的标题"></a>定制lstlisting 的标题</h1><p>参考：<a href="https://www.latexstudio.net/archives/625.html">按照算法标题样式定制listings的标题</a></p><pre><code>\renewcommand*\thelstnumber&#123;\arabic&#123;lstnumber&#125;:&#125;\DeclareCaptionFormat&#123;mylst&#125;&#123;\hrule#1#2#3&#125;\captionsetup[lstlisting]&#123;format=mylst,labelfont=bf,singlelinecheck=off,labelsep=space&#125;\documentclass&#123;article&#125;\usepackage&#123;listings&#125;\usepackage&#123;caption&#125;\lstset&#123;language=C++,basicstyle=\small\ttfamily,numbers=left,numbersep=5pt,xleftmargin=20pt,showstringspaces=false, %去掉空格时产生的下划的空格标志, 设置为true则出现frame=tb,framexleftmargin=20pt&#125;\renewcommand*\thelstnumber&#123;\arabic&#123;lstnumber&#125;:&#125;\DeclareCaptionFormat&#123;mylst&#125;&#123;\hrule#1#2#3&#125;\captionsetup[lstlisting]&#123;format=mylst,labelfont=bf,singlelinecheck=off,labelsep=space&#125;\begin&#123;document&#125;\begin&#123;lstlisting&#125;[caption=&#123;test algorithm&#125;,label=&#123;lst1&#125;]#includeusing namespace std;int main()&#123;cout &lt;&lt; &quot;Welcome to the wonderful world of C++!!!\n&quot;;return 0;&#125;\end&#123;lstlisting&#125;\end&#123;document&#125;</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/latex-lst.png" alt="hithesis生成的样式-本部硕士中期"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定制lstlisting-的标题&quot;&gt;&lt;a href=&quot;#定制lstlisting-的标题&quot; class=&quot;headerlink&quot; title=&quot;定制lstlisting 的标题&quot;&gt;&lt;/a&gt;定制lstlisting 的标题&lt;/h1&gt;&lt;p&gt;参考：&lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="Latex" scheme="https://changzeyan.github.io/categories/Latex/"/>
    
    
    <category term="Lst" scheme="https://changzeyan.github.io/tags/Lst/"/>
    
  </entry>
  
  <entry>
    <title>Keras</title>
    <link href="https://changzeyan.github.io/2021/03/09/python/nlp/keras/"/>
    <id>https://changzeyan.github.io/2021/03/09/python/nlp/keras/</id>
    <published>2021-03-09T11:27:36.000Z</published>
    <updated>2021-04-13T07:35:37.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Keras-和-Tensorflow的版本对应关系"><a href="#Keras-和-Tensorflow的版本对应关系" class="headerlink" title="Keras 和 Tensorflow的版本对应关系"></a>Keras 和 Tensorflow的版本对应关系</h2><pre><code>tensorflow 2.0 - keras 2.2.4tensorflow 1.9 - keras 2.2.0 对应keras-transformer==0.31.0tensorflow 1.8 - keras 2.1.6tensorflow 1.5 - keras 2.1.4 tensorflow 1.4 - keras 2.1.3tensorflow 1.3 - keras 2.1.2tensorflow 1.2 - keras 2.1.1TensorFlow 1.14.0 + Keras 2.2.5 on Python 3.6.TensorFlow 1.13.0 + Keras 2.2.4 on Python 3.6.TensorFlow 1.12.0 + Keras 2.2.4 on Python 3.6.TensorFlow 1.11.0 + Keras 2.2.4 on Python 3.6.TensorFlow 1.10.0 + Keras 2.2.0 on Python 3.6.TensorFlow 1.12.0 + Keras 2.2.4 on Python 2.TensorFlow 1.11.0 + Keras 2.2.4 on Python 2.</code></pre><h2 id="保存和加载模型"><a href="#保存和加载模型" class="headerlink" title="保存和加载模型"></a>保存和加载模型</h2><p>参考：<a href="https://blog.csdn.net/tszupup/article/details/85198949">Keras框架下的保存模型和加载模型</a></p><ol><li>完整保存使用model.save()完整地保存整个模型，将Keras模型和权重保存在一个HDF5文件中，该文件将包含：模型的结构，模型的参数以及优化器参数：用于继续训练过程</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>core <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Activation<span class="token keyword">from</span> keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> SGD<span class="token keyword">from</span> keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> np_utils<span class="token comment" spellcheck="true">#随机数种子，重复性设置</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1671</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#网络结构和训练的参数</span>NB_EPOCH <span class="token operator">=</span> <span class="token number">20</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">128</span>VERBOSE <span class="token operator">=</span> <span class="token number">1</span>NB_CLASSES <span class="token operator">=</span> <span class="token number">10</span>OPTIMIZER <span class="token operator">=</span> SGD<span class="token punctuation">(</span><span class="token punctuation">)</span>N_HIDDEN <span class="token operator">=</span> <span class="token number">128</span>VALIDATION_SPLIT <span class="token operator">=</span> <span class="token number">0.2</span>RESHAPED <span class="token operator">=</span> <span class="token number">784</span><span class="token comment" spellcheck="true">#加载数据</span><span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"mnist.npz"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    x_train<span class="token punctuation">,</span> y_train <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token string">'x_train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token string">'y_train'</span><span class="token punctuation">]</span>    x_test<span class="token punctuation">,</span> y_test <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token string">'x_test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token string">'y_test'</span><span class="token punctuation">]</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#调用函数加载数据</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#数据预处理</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#数据变形、类型转换及归一化</span>x_train <span class="token operator">=</span> x_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span>x_test <span class="token operator">=</span> x_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token comment" spellcheck="true">#打印消息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Training samples:'</span><span class="token punctuation">,</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Testing samples:'</span><span class="token punctuation">,</span> x_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将类别转换为one-hot编码</span>y_train <span class="token operator">=</span> np_utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> NB_CLASSES<span class="token punctuation">)</span>y_test <span class="token operator">=</span> np_utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> NB_CLASSES<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义网络结构</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span>RESHAPED<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>NB_CLASSES<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印模型概述信息</span>model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#编译模型</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>OPTIMIZER<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#训练模型</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> epochs<span class="token operator">=</span>NB_EPOCH<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">,</span>                    validation_split<span class="token operator">=</span>VALIDATION_SPLIT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#评估模型</span>score <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test score:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test accuracy:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存模型</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'my_model.h5'</span><span class="token punctuation">)</span></code></pre><p>加载：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> load_model<span class="token comment" spellcheck="true">#加载整个模型</span>model <span class="token operator">=</span> load_model<span class="token punctuation">(</span><span class="token string">'my_model.h5'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#训练模型</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> epochs<span class="token operator">=</span>NB_EPOCH<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">,</span>                    validation_split<span class="token operator">=</span>VALIDATION_SPLIT<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#评估模型</span>score <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">)</span></code></pre><ol start="2"><li>保存模型结构和权重<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>core <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Activation<span class="token keyword">from</span> keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> SGD<span class="token keyword">from</span> keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> np_utils<span class="token comment" spellcheck="true"># 定义网络结构</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span>RESHAPED<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>NB_CLASSES<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印模型概述信息</span>model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 编译模型</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>OPTIMIZER<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 训练模型</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> epochs<span class="token operator">=</span>NB_EPOCH<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">,</span>                 validation_split<span class="token operator">=</span>VALIDATION_SPLIT<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 评估模型</span>score <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test score:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test accuracy:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存模型的结构</span>json_string <span class="token operator">=</span> model<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 方式1</span>open<span class="token punctuation">(</span><span class="token string">'model_architecture_1.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json_string<span class="token punctuation">)</span>yaml_string <span class="token operator">=</span> model<span class="token punctuation">.</span>to_yaml<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 方式2</span>open<span class="token punctuation">(</span><span class="token string">'model_arthitecture_2.yaml'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>yaml_string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存模型的权重</span>model<span class="token punctuation">.</span>save_weights<span class="token punctuation">(</span><span class="token string">'my_model_weights.h5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印消息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练和保存模型结构完成！！！'</span><span class="token punctuation">)</span></code></pre></li></ol><p>加载结构：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> model_from_json<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> model_from_yaml<span class="token comment" spellcheck="true"># 加载模型结构</span>model <span class="token operator">=</span> model_from_json<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'model_architecture_1.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>或：model <span class="token operator">=</span> model_from_yaml<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'model_arthitecture_2.yaml'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加载模型权重</span>model<span class="token punctuation">.</span>load_weights<span class="token punctuation">(</span><span class="token string">'my_model_weights.h5'</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Keras-和-Tensorflow的版本对应关系&quot;&gt;&lt;a href=&quot;#Keras-和-Tensorflow的版本对应关系&quot; class=&quot;headerlink&quot; title=&quot;Keras 和 Tensorflow的版本对应关系&quot;&gt;&lt;/a&gt;Keras 和 Ten</summary>
      
    
    
    
    <category term="Python" scheme="https://changzeyan.github.io/categories/Python/"/>
    
    
    <category term="NLP" scheme="https://changzeyan.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Pip</title>
    <link href="https://changzeyan.github.io/2021/02/10/python/python-yu-fa/pip/"/>
    <id>https://changzeyan.github.io/2021/02/10/python/python-yu-fa/pip/</id>
    <published>2021-02-10T02:32:04.000Z</published>
    <updated>2021-02-10T02:57:33.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看pip-安装了那些包"><a href="#查看pip-安装了那些包" class="headerlink" title="查看pip 安装了那些包"></a>查看pip 安装了那些包</h2><pre class=" language-bash"><code class="language-bash">查看所有pip list查看是否安装了某个包centospip list<span class="token operator">|</span><span class="token function">grep</span> pandaswindowspip list <span class="token operator">|</span> findstr pandas</code></pre><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><pre class=" language-bash"><code class="language-bash">4.查看已安装过的包pip show - -files Somepackage5.检查哪些包需要更新pip list - -outdated</code></pre><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><pre class=" language-bash"><code class="language-bash">6.升级包pip <span class="token function">install</span> --upgrade Somepackage升级pip：python -m pip <span class="token function">install</span> --upgrade pip或者：pip <span class="token function">install</span> -U pip</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查看pip-安装了那些包&quot;&gt;&lt;a href=&quot;#查看pip-安装了那些包&quot; class=&quot;headerlink&quot; title=&quot;查看pip 安装了那些包&quot;&gt;&lt;/a&gt;查看pip 安装了那些包&lt;/h2&gt;&lt;pre class=&quot; language-bash&quot;&gt;&lt;code</summary>
      
    
    
    
    <category term="Python" scheme="https://changzeyan.github.io/categories/Python/"/>
    
    
    <category term="Pip" scheme="https://changzeyan.github.io/tags/Pip/"/>
    
  </entry>
  
  <entry>
    <title>实体识别</title>
    <link href="https://changzeyan.github.io/2021/02/10/python/nlp/shi-ti-shi-bie/"/>
    <id>https://changzeyan.github.io/2021/02/10/python/nlp/shi-ti-shi-bie/</id>
    <published>2021-02-10T01:59:13.000Z</published>
    <updated>2021-06-18T11:59:42.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实体识别工具"><a href="#实体识别工具" class="headerlink" title="实体识别工具"></a>实体识别工具</h1><h2 id="Pyhanlp"><a href="#Pyhanlp" class="headerlink" title="Pyhanlp"></a><a href="https://github.com/hankcs/pyhanlp">Pyhanlp</a></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>先安装JDK。你需要保证JDK位数、操作系统位数和Python位数一致。然后设置JAVA_HOME环境变量，最后执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># (可选)conda安装jpype1更方便</span>conda <span class="token function">install</span> -c conda-forge jpype1<span class="token operator">==</span>0.7.0      pip <span class="token function">install</span> pyhanlp</code></pre><p>检测是否安装成功：</p><pre class=" language-bash"><code class="language-bash">hanlp</code></pre><p>如果安装成功，会自动下载词典</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hanlp-install-success.png" alt="安装成功"></p><p>如果报RuntimeError: module compiled against API version 0xc but this version of numpy is 0xb，需要升级 numpy：</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> --upgrade numpy</code></pre><h3 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h3><pre class=" language-bash"><code class="language-bash">hanlp segment</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hanlp-segment.png" alt="交互模式"></p><h3 id="hanlp词性表"><a href="#hanlp词性表" class="headerlink" title="hanlp词性表"></a>hanlp词性表</h3><p>参考：<a href="https://blog.csdn.net/u014258362/article/details/81044286">hanlp词性表</a></p><h2 id="StanfordCoreNLP"><a href="#StanfordCoreNLP" class="headerlink" title="StanfordCoreNLP"></a>StanfordCoreNLP</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash"> pip <span class="token function">install</span> stanfordcorenlp </code></pre><p>由于其源码为 JAVA 编写，所以需要 JDK1.8 及以上版本的支持，下载安装 JDK1.8。<br>下载 <a href="https://stanfordnlp.github.io/CoreNLP/">StanfordCoreNLP 的相关文件</a>，解压到任意目录</p><p>如果要处理中文，还需下载中文jar包：<a href="http://nlp.stanford.edu/software/stanford-chinese-corenlp-2018-10-05-models.jar">stanford-chinese-corenlp-2018-10-05-models</a>，下载完放到上一步解压后的文件夹中。</p><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> stanfordcorenlp <span class="token keyword">import</span> StanfordCoreNLP <span class="token comment" spellcheck="true"># 加载模型，路径是上面解压的路径</span>stanford_model <span class="token operator">=</span> StanfordCoreNLP<span class="token punctuation">(</span>r<span class="token string">'./stanford-corenlp-full-2018-02-27'</span><span class="token punctuation">,</span> lang<span class="token operator">=</span><span class="token string">'zh'</span><span class="token punctuation">)</span> text <span class="token operator">=</span> <span class="token string">"张三和李四在2019年3月23日在北京的腾讯技术有限公司一起开会。"</span> res <span class="token operator">=</span> stanford_model<span class="token punctuation">.</span>ner<span class="token punctuation">(</span>text<span class="token punctuation">)</span></code></pre><p>参数：<br>处理英文时：lang=’en’</p><h2 id="kashgari"><a href="#kashgari" class="headerlink" title="kashgari"></a>kashgari</h2><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_27492735/article/details/108767237">Kashgari:一个方便快捷的命名实体识别、文本分类工具包</a></li><li><a href="https://www.cnblogs.com/mingriyingying/p/13379434.html">NER-使用kashgari中的Bert+BiLSTM+CRF</a></li><li><a href="https://www.jianshu.com/p/1d6689851622">五分钟搭建一个基于BERT的NER模型</a></li><li><a href="https://kashgari-zh.bmio.net/tutorial/text-labeling/">kashgari-zh.bmio.net</a></li><li><a href="https://shfshf.github.io/2019/12/26/Kashgari/">Kashgari概述</a></li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><pre class=" language-bash"><code class="language-bash">conda create --envs myTestNER python<span class="token operator">==</span>3.6pip insall tensorflow<span class="token operator">==</span>1.14.0pip <span class="token function">install</span> kashgari<span class="token operator">==</span>1.1.5</code></pre><h3 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h3><p><a href="https://github.com/ymcui/Chinese-BERT-wwm/">中文模型</a></p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/Chinese-BERT-wwm.png" alt="中文模型下载"></p><p><a href="https://github.com/google-research/bert">英文模型</a></p><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>训练集、测试集、验证集的格式均为：</p><pre><code>我 O们 O变 O而 O以 O书 O会 O友 O， O把 O欧 B-LOC美 B-LOC流 O行 O的 O食 O品 O类 O图 O谱 O、 O画 O册 O</code></pre><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Tuple<span class="token punctuation">,</span> List<span class="token comment" spellcheck="true"># 定义一个读取数据的类</span><span class="token keyword">class</span> <span class="token class-name">DataReader</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> str<span class="token punctuation">,</span>                  text_index<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                  label_index<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        根据文件路径读取训练数据、测试数据以及验证数据的text和label        """</span>        x_data<span class="token punctuation">,</span> y_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            lines <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以splitlines的方式获取数据</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>                rows <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以空格进行切分</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>rows<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    x_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                    y_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>                    x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rows<span class="token punctuation">[</span>text_index<span class="token punctuation">]</span><span class="token punctuation">)</span>                    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rows<span class="token punctuation">[</span>label_index<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x_data<span class="token punctuation">,</span> y_data</code></pre><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> kashgari<span class="token keyword">from</span> kashgari <span class="token keyword">import</span> utils<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>embeddings <span class="token keyword">import</span> BERTEmbedding<span class="token punctuation">,</span> BERTEmbeddingV2<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>labeling <span class="token keyword">import</span> BiLSTM_CRF_Model<span class="token keyword">from</span> data_load <span class="token keyword">import</span> DataReaderkashgari<span class="token punctuation">.</span>config<span class="token punctuation">.</span>use_cudnn_cell <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 加载训练数据、验证数据以及测试数据</span>train_x<span class="token punctuation">,</span> train_y <span class="token operator">=</span> DataReader<span class="token punctuation">.</span>read_file<span class="token punctuation">(</span><span class="token string">'../data/train.txt'</span><span class="token punctuation">)</span>test_x<span class="token punctuation">,</span> test_y <span class="token operator">=</span> DataReader<span class="token punctuation">.</span>read_file<span class="token punctuation">(</span><span class="token string">'../data/test.txt'</span><span class="token punctuation">)</span>valid_x<span class="token punctuation">,</span> valid_y <span class="token operator">=</span> DataReader<span class="token punctuation">.</span>read_file<span class="token punctuation">(</span><span class="token string">'../data/new_val.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train data count: &amp;#123;len(train_x)&amp;#125;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"validate data count: &amp;#123;len(valid_x)&amp;#125;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test data count: &amp;#123;len(test_x)&amp;#125;"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 利用kashgari创建Bert Embedding</span>bert_embed <span class="token operator">=</span> BERTEmbedding<span class="token punctuation">(</span><span class="token string">'chinese_wwm_ext_L-12_H-768_A-12'</span><span class="token punctuation">,</span>                           task<span class="token operator">=</span>kashgari<span class="token punctuation">.</span>LABELING<span class="token punctuation">,</span>                           sequence_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用BiLSTM_CRF_Model模型并进行训练</span>model <span class="token operator">=</span> BiLSTM_CRF_Model<span class="token punctuation">(</span>bert_embed<span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token operator">=</span>train_x<span class="token punctuation">,</span> y_train<span class="token operator">=</span>train_y<span class="token punctuation">,</span>          x_validate<span class="token operator">=</span>valid_x<span class="token punctuation">,</span> y_validate<span class="token operator">=</span>valid_y<span class="token punctuation">,</span>          batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./model/NER.h5'</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_x<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'小'</span><span class="token punctuation">,</span> <span class="token string">'明'</span><span class="token punctuation">,</span> <span class="token string">'在'</span><span class="token punctuation">,</span> <span class="token string">'商'</span><span class="token punctuation">,</span> <span class="token string">'务'</span><span class="token punctuation">,</span> <span class="token string">'部'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="使用自带的人民日报数据"><a href="#使用自带的人民日报数据" class="headerlink" title="使用自带的人民日报数据"></a>使用自带的人民日报数据</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>seq_labeling <span class="token keyword">import</span> BLSTMCRFModel<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> ChinaPeoplesDailyNerCorpus<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>embeddings <span class="token keyword">import</span> BERTEmbeddingembedding <span class="token operator">=</span> BERTEmbedding<span class="token punctuation">(</span><span class="token string">'/home/eee/sentence-alignment-classification-model/model/multi_cased_L-12_H-768_A-12'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> train_x<span class="token punctuation">,</span> train_y <span class="token operator">=</span> ChinaPeoplesDailyNerCorpus<span class="token punctuation">.</span>get_sequence_tagging_data<span class="token punctuation">(</span><span class="token string">'train'</span><span class="token punctuation">)</span>validate_x<span class="token punctuation">,</span> validate_y <span class="token operator">=</span> ChinaPeoplesDailyNerCorpus<span class="token punctuation">.</span>get_sequence_tagging_data<span class="token punctuation">(</span><span class="token string">'validate'</span><span class="token punctuation">)</span>test_x<span class="token punctuation">,</span> test_y  <span class="token operator">=</span> ChinaPeoplesDailyNerCorpus<span class="token punctuation">.</span>get_sequence_tagging_data<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> model <span class="token operator">=</span> BLSTMCRFModel<span class="token punctuation">(</span>embedding<span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span>          train_y<span class="token punctuation">,</span>          validate_y<span class="token operator">=</span>validate_y<span class="token punctuation">,</span>          validate_x<span class="token operator">=</span>validate_x<span class="token punctuation">,</span>          epochs<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>          batch_size<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./model'</span><span class="token punctuation">)</span> new_model <span class="token operator">=</span> BLSTMCRFModel<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">'./model'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># EXAMPLE 1</span>news <span class="token operator">=</span> <span class="token string">"「DeepMind 击败人类职业玩家的方式与他们声称的 AI 使命，以及所声称的『正确』方式完全相反。」"</span>x <span class="token operator">=</span> list<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'「'</span><span class="token punctuation">,</span> <span class="token string">'DeepMind'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'击败'</span><span class="token punctuation">,</span> <span class="token string">'人类'</span><span class="token punctuation">,</span> <span class="token string">'职业'</span><span class="token punctuation">,</span> <span class="token string">'玩家'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'方式'</span><span class="token punctuation">,</span> <span class="token string">'与'</span><span class="token punctuation">,</span> <span class="token string">'他们'</span><span class="token punctuation">,</span> <span class="token string">'声称'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'AI'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'使命'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'以及'</span><span class="token punctuation">,</span> <span class="token string">'所'</span><span class="token punctuation">,</span> <span class="token string">'声称'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'『'</span><span class="token punctuation">,</span> <span class="token string">'正确'</span><span class="token punctuation">,</span> <span class="token string">'』'</span><span class="token punctuation">,</span> <span class="token string">'方式'</span><span class="token punctuation">,</span> <span class="token string">'完全'</span><span class="token punctuation">,</span> <span class="token string">'相反'</span><span class="token punctuation">,</span> <span class="token string">'。'</span><span class="token punctuation">,</span> <span class="token string">'」'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> new_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                                                                                                     <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># EXAMPLE 2</span>news <span class="token operator">=</span> <span class="token string">"陈志衍是有个非常好的男孩子，他住在香港的九龙塘区，他今年二十三号生日。"</span>x <span class="token operator">=</span> list<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'陈志衍'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'有'</span><span class="token punctuation">,</span> <span class="token string">'个'</span><span class="token punctuation">,</span> <span class="token string">'非常'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'男孩子'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'他'</span><span class="token punctuation">,</span> <span class="token string">'住'</span><span class="token punctuation">,</span> <span class="token string">'在'</span><span class="token punctuation">,</span> <span class="token string">'香港'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'吉林'</span><span class="token punctuation">,</span> <span class="token string">'区'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'他'</span><span class="token punctuation">,</span> <span class="token string">'今年'</span><span class="token punctuation">,</span> <span class="token string">'二十三'</span><span class="token punctuation">,</span> <span class="token string">'号'</span><span class="token punctuation">,</span> <span class="token string">'生日'</span><span class="token punctuation">,</span> <span class="token string">'。'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> new_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">]</span></code></pre><h3 id="自带数据集"><a href="#自带数据集" class="headerlink" title="自带数据集"></a>自带数据集</h3><pre><code>加载内置数据集中文数据集from kashgari.corpus import ChineseDailyNerCorpustrain_x, train_y = ChineseDailyNerCorpus.load_data(&#39;train&#39;)valid_x, valid_y = ChineseDailyNerCorpus.load_data(&#39;valid&#39;)test_x, test_y = ChineseDailyNerCorpus.load_data(&#39;test&#39;)英文数据集from kashgari.corpus import CONLL2003ENCorpustrain_x, train_y = CONLL2003ENCorpus.load_data(&#39;train&#39;)valid_x, valid_y = CONLL2003ENCorpus.load_data(&#39;valid&#39;)test_x, test_y = CONLL2003ENCorpus.load_data(&#39;test&#39;)# 也可以使用自己的数据集train_x = [[&#39;Hello&#39;, &#39;world&#39;], [&#39;Hello&#39;, &#39;Kashgari&#39;], [&#39;I&#39;, &#39;love&#39;, &#39;Beijing&#39;]]train_y = [[&#39;O&#39;, &#39;O&#39;], [&#39;O&#39;, &#39;B-PER&#39;], [&#39;O&#39;, &#39;B-LOC&#39;]]valid_x, valid_y = train_x, train_ytest_x, test_x = train_x, train_y</code></pre><h2 id="stanza"><a href="#stanza" class="headerlink" title="stanza"></a><a href="https://mp.weixin.qq.com/s/HcX8b84YazwVI-usWsCUew">stanza</a></h2><h2 id="LTP"><a href="#LTP" class="headerlink" title="LTP"></a>LTP</h2><p>参考：<a href="https://ltp.readthedocs.io/zh_CN/latest/index.html">LTP4 文档</a></p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><pre><code>pip install ltp</code></pre><h3 id="加载模型"><a href="#加载模型" class="headerlink" title="加载模型"></a>加载模型</h3><pre><code>from ltp import LTPltp = LTP() # 默认加载 Small 模型# ltp = LTP(path = &quot;base|small|tiny&quot;)# ltp = LTP(path = &quot;tiny.tgz|tiny-tgz-extracted&quot;) # 其中 tiny-tgz-extracted 是 tiny.tgz 解压出来的文件夹</code></pre><h3 id="命名实体识别"><a href="#命名实体识别" class="headerlink" title="命名实体识别"></a>命名实体识别</h3><pre><code>from ltp import LTPltp = LTP()seg, hidden = ltp.seg([&quot;他叫汤姆去拿外衣。&quot;])ner = ltp.ner(hidden)# [[&#39;他&#39;, &#39;叫&#39;, &#39;汤姆&#39;, &#39;去&#39;, &#39;拿&#39;, &#39;外衣&#39;, &#39;。&#39;]]# [[(&#39;Nh&#39;, 2, 2)]]tag, start, end = ner[0][0]print(tag,&quot;:&quot;, &quot;&quot;.join(seg[0][start:end + 1]))# Nh : 汤姆</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实体识别工具&quot;&gt;&lt;a href=&quot;#实体识别工具&quot; class=&quot;headerlink&quot; title=&quot;实体识别工具&quot;&gt;&lt;/a&gt;实体识别工具&lt;/h1&gt;&lt;h2 id=&quot;Pyhanlp&quot;&gt;&lt;a href=&quot;#Pyhanlp&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Python" scheme="https://changzeyan.github.io/categories/Python/"/>
    
    
    <category term="NLP" scheme="https://changzeyan.github.io/tags/NLP/"/>
    
  </entry>
  
</feed>
