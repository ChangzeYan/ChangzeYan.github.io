<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>杂文</title>
      <link href="2021/10/21/wen-shi-zhe/poetry/"/>
      <url>2021/10/21/wen-shi-zhe/poetry/</url>
      
        <content type="html"><![CDATA[<pre><code>思幽幽出皓月，浅浅入白雪。微微携清风，渐渐眠江夜。</code></pre><p>回来再次走过那几条路，恍若隔世。</p><p>2021年10月25日，晴。偶然间发现自己一直被上天眷顾，高中一直念叨以后一定要来北京，虽然当时没能如愿，但兜兜转转几年后我竟真的来了北京，与其说是来到，更有一种回到的感觉，尽管这感觉并不真实可信，或者是一种错觉。错到我认为北京就像一个吸铁石，我是一个漂浮的铁屑，一个铁屑是无法决定它要去哪的，它只能被吸铁石吸走。但是到了北京并没有我想象地那么欣喜，反而心静地像是没有风的湖面，没有一丝波澜。也许是人生早已有了剧本，我只需要按照它走下去就好了。但是这剧本没人给我剧透，我不知何时来，也不知何时去。但我知道无论怎么走都超不出它的范围，所以我每次走在十字路口不知道往哪走的时候，我总是告诉自己随便选一个，或者取局部最优解就可以。我这样做是因为我相信我的结局已经写好了，条条大路通罗马，只要大方向没错，我怎么走都能到达终点，无非是走的进还是走得远，走得轻松还是走得辛苦。最近我说会成为一个符号，隔天就变成了“Y”，我觉得很巧，蹊跷，甚至很离谱。导致我一度怀疑是有一根看不见的线将世间你我相连，被连起来的人有着莫名其妙相通的情愫。但是谁跟谁连在一起、连多长时间只有负责连线的人才知道，自己是不知道自己身上有没有线，有几根线，线的那头是谁的。如果只到这里还情有可原，但是昨天发现网易云音乐中有一首名为“Y”的歌，</p><p>我总觉得每个人来到这里是为了一件事的，虽然他自己也不知道是什么事，也许是看看花，也许是走一段路，又或许是见一个人。当事情做完后他就走了，有的人不舍是因为他不知道自己已经做完了，有的人想提前走是因为他觉得自己不想再做了。</p>]]></content>
      
      
      <categories>
          
          <category> 文史哲 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Excel</title>
      <link href="2021/09/16/write/excel/excel/"/>
      <url>2021/09/16/write/excel/excel/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="求和函数"><a href="#求和函数" class="headerlink" title="求和函数"></a>求和函数</h2><p>两行对应的数值相乘求和：<br>B2列到AB2列这一行与B3:AB3列这一行对应相乘求和</p><pre><code>=SUMPRODUCT($B$2:$AB$2, B3:AB3)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webdriverer命令</title>
      <link href="2021/09/03/python/webdriver/webdriverer-basic/"/>
      <url>2021/09/03/python/webdriver/webdriverer-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="Webdriver使用"><a href="#Webdriver使用" class="headerlink" title="Webdriver使用"></a>Webdriver使用</h1><p>安装</p><pre><code>pip install selenium</code></pre><p>下载与浏览器版本对应的驱动：<br>chrome：<br><a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver/</a><br><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a><br>下载后放到以下目录：<br>C:\Program Files (x86)\Google\Chrome\Application<br>然后修改环境变量，在path后面加：<br>;C:\Program Files (x86)\Google\Chrome\Application<br>导包</p><pre><code>from selenium import webdriverfrom selenium.webdriver import ChromeOptions</code></pre><p>启动与打开网页：</p><pre><code>本地:option = ChromeOptions()# 启动chrome时，去掉window.navigator.webdriver属性，使浏览器检测不到webdriveroption.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])browser = webdriver.Chrome(options=option)browser.get(r&quot;C:\Users\Changze\Desktop\gongzhong.html&quot;)</code></pre><p>拖动滚动条</p><pre><code># 拖动十次for i in range(10):    browser.execute_script(&quot;window.scrollTo(0, document.body.scrollHeight);&quot;)    # 两次拖动之间间隔随机时间    time.sleep(random.randint(2, 5))</code></pre><p>获取标签的属性值：</p><pre><code>&lt;time datetime=&quot;2021-07-01T09:17:23.000Z&quot;&gt;7月1日&lt;/time&gt;ele_time = twitter.find_element_by_tag_name(&#39;time&#39;)datetime = ele_time.get_attribute(&#39;datetime&#39;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Webdriver </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PS快捷键</title>
      <link href="2021/08/30/photoshop/ps-kuai-jie-jian/"/>
      <url>2021/08/30/photoshop/ps-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="PS-快捷键"><a href="#PS-快捷键" class="headerlink" title="PS 快捷键"></a>PS 快捷键</h1><pre><code>缩放图片中的某一部分：ctrl+t鼠标放在边框上拖拉缩放路径变选区：ctrl+enter填充前景色到图层或选区：Alt + Backspace或Delete填充背景色到图层或选区：Ctrl + Backspace或Delete复制图层：ctrl+j取消选区：Ctrl+D</code></pre><h2 id="扣字变换颜色"><a href="#扣字变换颜色" class="headerlink" title="扣字变换颜色"></a>扣字变换颜色</h2><p>选择主体后，用魔棒圈出字体轮廓，ctrl+enter载入选区，然后alt+del填充前景色<br>参考：<a href="https://jingyan.baidu.com/article/a501d80c0309cfad630f5edb.html" target="_blank" rel="noopener">怎么用PS改变图片中部分区域的颜色？</a></p><h2 id="删除背景色"><a href="#删除背景色" class="headerlink" title="删除背景色"></a>删除背景色</h2><p>魔棒工具选中背景色，然后del健删除</p>]]></content>
      
      
      <categories>
          
          <category> PS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>中国古代土地制度演变及所有权归属</title>
      <link href="2021/08/19/wen-shi-zhe/zhong-guo-gu-dai-tu-di-zhi-du-yan-bian-ji-suo-you-quan-gui-shu/"/>
      <url>2021/08/19/wen-shi-zhe/zhong-guo-gu-dai-tu-di-zhi-du-yan-bian-ji-suo-you-quan-gui-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://baijiahao.baidu.com/s?id=1600769382305099561&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1600769382305099561&amp;wfr=spider&amp;for=pc</a><br>参考：<a href="https://zhuanlan.zhihu.com/p/63156984" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/63156984</a></p></blockquote><h2 id="先秦"><a href="#先秦" class="headerlink" title="先秦"></a>先秦</h2><p>夏、商时期，土地制度是以氏族为单位的土地公有制，农业生产往往采取集体劳作的方式进行。</p><p>武王克商以后，采用“分封亲戚、以藩屏周”的政策，把他的同姓宗亲和功臣谋士分封各地，建立诸侯国。分封地的主权和产权是周王的，诸侯只有财权和治权。全国的土地与臣民，名义上都属周王所有，正如《诗·小雅·北山》所说：“普天之下，莫非王土；率土之滨，莫非王臣”。当时的土地制度为井田制。井田制规定一切土地属于国家所有（即属于周天子所有），周王是全国最高的统治者，也是最高的土地所有者。</p><p>其特点有三：一是土地国有，亦即归周天子所有；二是分赐诸侯臣下，世代享用，不得买卖；三是缴纳贡赋。诸侯大夫对分封的土地只享有使用权而无所有权，并且要按时向周天子缴纳贡赋。</p><p>井田制是把耕地划分为多块一定面积的方田，周围有经界，中间有水沟，阡陌纵横，像一个井字。一人耕种大约100亩（约合今70公亩）。100亩为一个方块，称为“一田”。甲骨文中的“田”字也是由此而来。 一井分为9个方块，周围的8块田由8户耕种，谓之私田，私田收成全部归耕户所有；中间是公田，由8户共耕，收入全归封邑贵族所有。</p><h2 id="建国后"><a href="#建国后" class="headerlink" title="建国后"></a>建国后</h2><p>我国土地所有权，分为国家土地所有权和集体土地所有权，自然人不能成为土地所有权的主体。中华人民共和国是国家土地所有权的统一和唯一的主体，由其代表全体人民对国有土地享有独占性支配的权利。</p>]]></content>
      
      
      <categories>
          
          <category> 文史哲 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>修改图片大小</title>
      <link href="2021/07/18/photoshop/xiu-gai-tu-pian-da-xiao/"/>
      <url>2021/07/18/photoshop/xiu-gai-tu-pian-da-xiao/</url>
      
        <content type="html"><![CDATA[<h1 id="修改分辨率大小"><a href="#修改分辨率大小" class="headerlink" title="修改分辨率大小"></a>修改分辨率大小</h1><p>参考：<a href="https://www.jb51.net/photoshop/774494_all.html" target="_blank" rel="noopener">ps2021怎么修改图片尺寸? ps2021调整图片大小的三种方法</a></p><ol><li><p>工作视图选择图形和web<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_change_size1.png" alt="裁剪工具"></p></li><li><p>修改像素值<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_change_size2.png" alt="修改像素值"></p></li></ol><h1 id="修改内存大小"><a href="#修改内存大小" class="headerlink" title="修改内存大小"></a>修改内存大小</h1><p>参考：<a href="http://www.360doc.com/content/12/0515/16/5787601_211212018.shtml" target="_blank" rel="noopener">用ps怎么缩小图片大小保持图片的清晰度?</a></p><ol><li>选择，文件，导出，存储为web和设备所用格式（旧版）<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_change_size3.png" alt="存储为web和设备所用格式"></li><li>在预设中选择品质，左下角显示修改后的图片内存大小<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_change_size4.png" alt="在预设中选择品质"></li></ol>]]></content>
      
      
      <categories>
          
          <category> PS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>修改证件照背景</title>
      <link href="2021/07/14/photoshop/xiu-gai-zheng-jian-zhao-bei-jing/"/>
      <url>2021/07/14/photoshop/xiu-gai-zheng-jian-zhao-bei-jing/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://www.bilibili.com/video/BV1Q741147i4?from=search&seid=10245401262887271741" target="_blank" rel="noopener">ps2020超快速更换证件照背景颜色的</a></li><li><a href="https://www.bilibili.com/video/BV15A411p7RU?t=8" target="_blank" rel="noopener">PS2021的对象选择工具可真是太秀了！</a></li></ul><h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>ps2021</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><ol><li><p>使用<strong>对象选择工具</strong> 框住人物</p></li><li><p>点击遮住并覆盖<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg1.png" alt="对象选择工具"></p></li><li><p>在输出颜色中选中净化颜色，确定 （抠图）<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg2.png" alt="净化颜色"></p></li><li><p>新建图层 ，右下角加号<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg3.png" alt="新建图层"></p></li><li><p>设置新图层背景色，这里修改为白色<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg4.png" alt="设置新图层背景色"></p></li><li><p>ctrl+delete 删除人像<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg5.png" alt="删除人像"></p></li><li><p>将人像图层拖动到背景图层前<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg6.png" alt="拖动图层"></p></li></ol><p>这样背景就换成白色了，如果想换成红色：</p><ol><li>新建图层，设置图层背景色为红色，#FF0000 ，然后ctrl+delete删除人像</li><li>将人物图层拖动到背景前<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg7.png" alt="拖动图层"></li></ol><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><ol><li>ctrl+f，在快速操作中选择移除背景。</li><li>然后新建图层，设置背景色（ctrl+backspace填充背景色）</li><li>将人物图层移动到背景图层之上</li></ol><h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><ol><li>右下角选择色相/饱和度，右下角<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg8.png" alt="选择色相饱和度"></li><li>点击手形按钮，然后点击背景色，滑动调整色相、饱和度等<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ps_del_bg9.png" alt="选择色相饱和度"></li></ol>]]></content>
      
      
      <categories>
          
          <category> PS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PPT</title>
      <link href="2021/06/18/write/ppt/ppt/"/>
      <url>2021/06/18/write/ppt/ppt/</url>
      
        <content type="html"><![CDATA[<h1 id="设置主题字体"><a href="#设置主题字体" class="headerlink" title="设置主题字体"></a>设置主题字体</h1><p>设计中右边框点击小三角<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ppt_theme_typeface0.png" alt="ppt主题字体"></p><p>自定义添加字体：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ppt_theme_typeface.png" alt="ppt主题字体"></p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/ppt_theme_typeface1.png" alt="ppt主题字体"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jmeter</title>
      <link href="2021/06/05/softwaretest/jmeter/"/>
      <url>2021/06/05/softwaretest/jmeter/</url>
      
        <content type="html"><![CDATA[<h1 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h1><p>参考：<a href="https://blog.csdn.net/u012111923/article/details/80705141" target="_blank" rel="noopener">JMeter性能测试，完整入门篇</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">下载地址</a></p><p>执行：<br>解压后，执行bin下面的jmeter.bat即可 </p><h3 id="安装jp-gc等插件"><a href="#安装jp-gc等插件" class="headerlink" title="安装jp@gc等插件"></a>安装jp@gc等插件</h3><p>参考：<a href="https://blog.csdn.net/LXiaYu123456789/article/details/113694985" target="_blank" rel="noopener">Jmeter-监听器jp@gc</a></p><p>使用监听器jp@gc的，需要选项中存在Plugins Manager,如果没有请下插件：<a href="https://jmeter-plugins.org/downloads/all/" target="_blank" rel="noopener">Plugins Manager</a></p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/jmeterplugin.png" alt="JmeterPlugin"></p><p>下载后放置在jmeter安装目录下的lib/ext中，重新启动即可</p><p>如下图，安装jpgc插件：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/jmeterjpgc.png" alt="JmeterPlugin"></p><h2 id="生成web页面的报告"><a href="#生成web页面的报告" class="headerlink" title="生成web页面的报告"></a>生成web页面的报告</h2><pre><code>jmeter -n -t D:\program\apache-jmeter-5.0\samples\28.summary_report.jmx -l d:\summary.jtl -e -o d:\result</code></pre><p>jmx文件：jmeter的测试项目文件<br>jtl文件：生成的脚本文件<br>d:\result：web页面报告的存储路径（必须为空目录）</p>]]></content>
      
      
      <categories>
          
          <category> SoftwareTest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Latex-参考文献</title>
      <link href="2021/05/09/write/latex/latex-can-kao-wen-xian/"/>
      <url>2021/05/09/write/latex/latex-can-kao-wen-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode-编译bib文件的配置"><a href="#vscode-编译bib文件的配置" class="headerlink" title="vscode 编译bib文件的配置"></a>vscode 编译bib文件的配置</h1><p>参考：<a href="https://blog.csdn.net/lishu14/article/details/102774145" target="_blank" rel="noopener">vscode latex 踩坑记 ： 文献索引 bib 文件和setting.json的那点事</a></p><p>在vscode中 file-&gt;preferences-&gt;settings：</p><p>点击右上角的（open settings(Json)）:</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/vscode-latex-setting.png" alt="vscode中配置文件位置"><br>复制下面代码：</p><pre><code>{    &quot;latex-workshop.latex.recipes&quot;: [        {            &quot;name&quot;: &quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;,            &quot;tools&quot;: [                &quot;xelatex&quot;,                &quot;bibtex&quot;,                &quot;xelatex&quot;,                &quot;xelatex&quot;            ]        },        {            &quot;name&quot;: &quot;XeLaTeX&quot;,            &quot;tools&quot;: [                &quot;xelatex&quot;            ]        },        {            &quot;name&quot;: &quot;LaTeXmk&quot;,            &quot;tools&quot;: [                &quot;latexmk&quot;            ]        },        // {        //     &quot;name&quot;: &quot;PDFLaTeX&quot;,        //     &quot;tools&quot;: [        //         &quot;pdflatex&quot;        //     ]        // },        {            &quot;name&quot;: &quot;BibTeX&quot;,            &quot;tools&quot;: [                &quot;bibtex&quot;            ]        },        // {        //     &quot;name&quot;: &quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;,        //     &quot;tools&quot;: [        //         &quot;pdflatex&quot;,        //         &quot;bibtex&quot;,        //         &quot;pdflatex&quot;,        //         &quot;pdflatex&quot;        //     ]        // }    ],  &quot;latex-workshop.latex.tools&quot;: [    {        &quot;name&quot;: &quot;xelatex&quot;,        &quot;command&quot;: &quot;xelatex&quot;,        &quot;args&quot;: [            &quot;-synctex=1&quot;,            &quot;-interaction=nonstopmode&quot;,            &quot;-file-line-error&quot;,            &quot;%DOCFILE%&quot;        ]    },    {        &quot;name&quot;: &quot;pdflatex&quot;,        &quot;command&quot;: &quot;pdflatex&quot;,        &quot;args&quot;: [            &quot;-synctex=1&quot;,            &quot;-interaction=nonstopmode&quot;,            &quot;-file-line-error&quot;,            &quot;%DOCFILE%&quot;        ]    },    {        &quot;name&quot;: &quot;latexmk&quot;,        &quot;command&quot;: &quot;latexmk&quot;,        &quot;args&quot;: [            &quot;-synctex=1&quot;,            &quot;-interaction=nonstopmode&quot;,            &quot;-file-line-error&quot;,            &quot;-pdf&quot;,            &quot;-outdir=%OUTDIR%&quot;,            &quot;%DOCFILE%&quot;        ]    },    {        &quot;name&quot;: &quot;bibtex&quot;,        &quot;command&quot;: &quot;bibtex&quot;,        &quot;args&quot;: [            &quot;%DOCFILE%&quot;        ]    }  ],  &quot;latex-workshop.latex.clean.fileTypes&quot;: [      &quot;*.aux&quot;,      &quot;*.bbl&quot;,      &quot;*.blg&quot;,      &quot;*.idx&quot;,      &quot;*.ind&quot;,      &quot;*.lof&quot;,      &quot;*.lot&quot;,      &quot;*.out&quot;,      &quot;*.toc&quot;,      &quot;*.acn&quot;,      &quot;*.acr&quot;,      &quot;*.alg&quot;,      &quot;*.glg&quot;,      &quot;*.glo&quot;,      &quot;*.gls&quot;,      &quot;*.ist&quot;,      &quot;*.fls&quot;,      &quot;*.log&quot;,      &quot;*.fdb_latexmk&quot;  ],  &quot;files.autoSave&quot;: &quot;afterDelay&quot;,  &quot;editor.wordWrap&quot;: &quot;on&quot;,  &quot;explorer.confirmDelete&quot;: false,  &quot;git.autofetch&quot;: true,  &quot;window.zoomLevel&quot;: 0,  &quot;explorer.confirmDragAndDrop&quot;: false,  }</code></pre><h2 id="配置文件注意点"><a href="#配置文件注意点" class="headerlink" title="配置文件注意点"></a>配置文件注意点</h2><p>原来我的配置是下面这样（也是很多博客中的做法）：</p><pre><code> &quot;latex-workshop.latex.recipes&quot;: [  {    &quot;name&quot;: &quot;xelatex&quot;,    &quot;tools&quot;: [        &quot;xelatex&quot;    ]  },  {    &quot;name&quot;: &quot;latexmk&quot;,    &quot;tools&quot;: [        &quot;latexmk&quot;    ]  },  {    &quot;name&quot;: &quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;,    &quot;tools&quot;: [        &quot;pdflatex&quot;,        &quot;bibtex&quot;,        &quot;pdflatex&quot;,        &quot;pdflatex&quot;    ]  }  ],</code></pre><p><strong>这个配置的问题在于，只会使用第一个recipe</strong></p><pre><code>{    &quot;name&quot;: &quot;xelatex&quot;,    &quot;tools&quot;: [        &quot;xelatex&quot;    ]  },</code></pre><p>会导致只编译一次，而bib文件不会被编译，导致参考文献出不来</p><p>而用命令行编译是四次，结果正常：</p><pre class=" language-bash"><code class="language-bash">xelatex -shell-escape thesis.texbibtex thesisxelatex -shell-escape thesis.texxelatex -shell-escape thesis.tex</code></pre><p>假设我们的核心文件是hello.tex，我们的参考文件是ref.bib，在hello.tex文末通过  \bibliography{ref}  来指明引用的文件叫做ref.bib。然后编译hello.tex，发现文章除了参考文献之外的其他内容都是正常的，唯独参考文献。这是因为只用了xelatex来编译hello.tex。而ref.bib也需要编译，通过bibtex。而直接在命令行里输入bibtex ref.bib会有问题报错说找不到ref.aux。本文件夹里只有hello.aux，因此只需要将ref.bib改名为hello.bib即可（在hello.tex中也需要将对应的 \bibliography{ref} 改为 \bibliography{hello}），然后先编译hello.tex（这个能在vscode里通过ctrl+s自动保存hello.tex进而自动编译）生成hello.aux，再通过命令行编译hello.bib生成hello.bbl，然后再编译hello.tex更新hello.aux，然后再编译hello.tex将其与参考文献(hello.bbl)真正结合起来。所以一共需要编译4次！</p><p>很麻烦！那么我们只需要对上述的三个recipe调换顺序即可，把第三个放到第一位置：</p><pre><code>&quot;latex-workshop.latex.recipes&quot;: [  {    &quot;name&quot;: &quot;pdflatex -&gt; bibtex -&gt; pdflatex*2&quot;,    &quot;tools&quot;: [        &quot;pdflatex&quot;,        &quot;bibtex&quot;,        &quot;pdflatex&quot;,        &quot;pdflatex&quot;    ]  }  {    &quot;name&quot;: &quot;xelatex&quot;,    &quot;tools&quot;: [        &quot;xelatex&quot;    ]  },  {    &quot;name&quot;: &quot;latexmk&quot;,    &quot;tools&quot;: [        &quot;latexmk&quot;    ]  },  ],</code></pre><p>  这样就可以了通过一次单纯的ctrl+s自动顺序完成全部4次编译！而且也不必保证.bib文件名必须与.tex一致。缺点是每次都会编译4次。（pdflatex可以换为xelatex或latexmk，pdflatex比xelatex快，latexmk最慢）。</p><h1 id="反向搜索和正向搜索"><a href="#反向搜索和正向搜索" class="headerlink" title="反向搜索和正向搜索"></a>反向搜索和正向搜索</h1><h2 id="反向搜索"><a href="#反向搜索" class="headerlink" title="反向搜索"></a>反向搜索</h2><p>  默认在pdf中ctrl+鼠标左键就能定位到源文件位置</p><h2 id="正向搜索"><a href="#正向搜索" class="headerlink" title="正向搜索"></a>正向搜索</h2><p>  在源文件中定位到pdf与之对应位置<br> 点击这个SyncTex from cursor，pdf就能滚动到当前鼠标所在源文件对应位置：<br>  <img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/vscode-latex-setting_search.png" alt="vscode中配置文件位置"></p><h1 id="各参考文献格式"><a href="#各参考文献格式" class="headerlink" title="各参考文献格式"></a>各参考文献格式</h1><pre><code>@article期刊杂志的论文必要域: author, title, journal, year.可选域: volume, number, pages, month, note.@book公开出版的图书必要域: author/editor, title, publisher, year.可选域: volume/number, series, address, edition, month, note.@booklet无出版商或作者的图书必要域: title.可选域: author, howpublished, address, month, year, note.@conference等价于 inproceedings必要域: author, title, booktitle, year.可选域: editor, volume/number, series, pages, address, month, organization, publisher, note.@inbook书籍的一部分章节必要域: author/editor, title, chapter and/or pages, publisher, year.可选域: volume/number, series, type, address, edition, month, note.@incollection书籍中带独立标题的章节必要域: author, title, booktitle, publisher, year.可选域: editor, volume/number, series, type, chapter, pages, address, edition, month, note.**publisher和address如果没有的话可能会有缺失[S.I.]**@inproceedings会议论文集中的一篇必要域: author, title, booktitle, year.可选域: editor, volume/number, series, pages, address, month, organization, publisher, note.@manual技术文档必要域: title.可选域: author, organization, address, edition, month, year, note.@mastersthesis硕士论文必要域: author, title, school, year.可选域: type, address, month, note.@misc其他必要域: none可选域: author, title, howpublished, month, year, note.@phdthesis博士论文必要域: author, title, year, school.可选域: address, month, keywords, note.@proceedings会议论文集必要域: title, year.可选域: editor, volume/number, series, address, month, organization, publisher, note.@techreport教育，商业机构的技术报告必要域: author, title, institution, year.可选域: type, number, address, month, note.@unpublished未出版的论文，图书必要域: author, title, note.可选域: month, year.</code></pre>]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas</title>
      <link href="2021/03/13/python/pandas/"/>
      <url>2021/03/13/python/pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p>创建dataframe</p><pre><code>df = pd.DataFrame(columns=[&#39;a&#39;,&#39;b&#39;])</code></pre><p>给dataframe增加行：</p><pre><code>for i in range(5):    df.loc[i]=[1,2,3]</code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>对行排序：</p><pre><code>按照&#39;阅读&#39;列将行降序排列sort_res=df.sort_index(axis=0, by=&#39;阅读&#39;, ascending=False)</code></pre><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><p>保存到excel中：</p><pre><code>df.to_excel(&#39;test.xls&#39;)</code></pre><h1 id="统计某列值出现的次数"><a href="#统计某列值出现的次数" class="headerlink" title="统计某列值出现的次数"></a>统计某列值出现的次数</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'key1'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'key2'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'data1'</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'data2'</span><span class="token punctuation">:</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/pandas_datadf.png" alt="dataframe"></p><p>统计key2中各个元素的出现次数：</p><pre class=" language-python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">//</span>返回series</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/df_value_count.png" alt="key2中各个元素的出现次数"></p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><h2 id="遍历series"><a href="#遍历series" class="headerlink" title="遍历series"></a>遍历series</h2><pre class=" language-python"><code class="language-python">series <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> series<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>origin</title>
      <link href="2021/03/13/write/origin/origin/"/>
      <url>2021/03/13/write/origin/origin/</url>
      
        <content type="html"><![CDATA[<h1 id="倾斜横坐标"><a href="#倾斜横坐标" class="headerlink" title="倾斜横坐标"></a>倾斜横坐标</h1><p>双击横坐标下的文字，或者右键选择横坐标，然后点击刻度线标签</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/origin-scale1.png" alt="双击横坐标"></p><p>然后接着点击刻度线标签下的格式，设置旋转角度：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/origin-scale2.png" alt="双击横坐标"></p><h1 id="根据某两列计算第三列数"><a href="#根据某两列计算第三列数" class="headerlink" title="根据某两列计算第三列数"></a>根据某两列计算第三列数</h1><p>参考：<a href="https://zhidao.baidu.com/question/286467057.html" target="_blank" rel="noopener">origin 8.0两列相加怎么算</a></p><p>全选要生成的列，右键，set colum values。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/calculate_cols.png" alt="在选项卡中选择参与计算的列"></p><h1 id="去掉导出图片的白边"><a href="#去掉导出图片的白边" class="headerlink" title="去掉导出图片的白边"></a>去掉导出图片的白边</h1><p>右键图片，选择 Fit page to layers，根据需要调整border值。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/origin_fit_page_to_layers.png" alt="在选项卡中选择参与计算的列"></p>]]></content>
      
      
      <categories>
          
          <category> Origin </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码和算法</title>
      <link href="2021/03/11/write/latex/latex-lst/"/>
      <url>2021/03/11/write/latex/latex-lst/</url>
      
        <content type="html"><![CDATA[<h1 id="定制lstlisting-的标题"><a href="#定制lstlisting-的标题" class="headerlink" title="定制lstlisting 的标题"></a>定制lstlisting 的标题</h1><p>参考：<a href="https://www.latexstudio.net/archives/625.html" target="_blank" rel="noopener">按照算法标题样式定制listings的标题</a></p><pre><code>\renewcommand*\thelstnumber{\arabic{lstnumber}:}\DeclareCaptionFormat{mylst}{\hrule#1#2#3}\captionsetup[lstlisting]{format=mylst,labelfont=bf,singlelinecheck=off,labelsep=space}\documentclass{article}\usepackage{listings}\usepackage{caption}\lstset{language=C++,basicstyle=\small\ttfamily,numbers=left,numbersep=5pt,xleftmargin=20pt,showstringspaces=false, %去掉空格时产生的下划的空格标志, 设置为true则出现frame=tb,framexleftmargin=20pt}\renewcommand*\thelstnumber{\arabic{lstnumber}:}\DeclareCaptionFormat{mylst}{\hrule#1#2#3}\captionsetup[lstlisting]{format=mylst,labelfont=bf,singlelinecheck=off,labelsep=space}\begin{document}\begin{lstlisting}[caption={test algorithm},label={lst1}]#includeusing namespace std;int main(){cout &lt;&lt; &quot;Welcome to the wonderful world of C++!!!\n&quot;;return 0;}\end{lstlisting}\end{document}</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/latex-lst.png" alt="hithesis生成的样式-本部硕士中期"></p>]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lst </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras</title>
      <link href="2021/03/09/python/nlp/keras/"/>
      <url>2021/03/09/python/nlp/keras/</url>
      
        <content type="html"><![CDATA[<h2 id="Keras-和-Tensorflow的版本对应关系"><a href="#Keras-和-Tensorflow的版本对应关系" class="headerlink" title="Keras 和 Tensorflow的版本对应关系"></a>Keras 和 Tensorflow的版本对应关系</h2><pre><code>tensorflow 2.0 - keras 2.2.4tensorflow 1.9 - keras 2.2.0 对应keras-transformer==0.31.0tensorflow 1.8 - keras 2.1.6tensorflow 1.5 - keras 2.1.4 tensorflow 1.4 - keras 2.1.3tensorflow 1.3 - keras 2.1.2tensorflow 1.2 - keras 2.1.1TensorFlow 1.14.0 + Keras 2.2.5 on Python 3.6.TensorFlow 1.13.0 + Keras 2.2.4 on Python 3.6.TensorFlow 1.12.0 + Keras 2.2.4 on Python 3.6.TensorFlow 1.11.0 + Keras 2.2.4 on Python 3.6.TensorFlow 1.10.0 + Keras 2.2.0 on Python 3.6.TensorFlow 1.12.0 + Keras 2.2.4 on Python 2.TensorFlow 1.11.0 + Keras 2.2.4 on Python 2.</code></pre><h2 id="保存和加载模型"><a href="#保存和加载模型" class="headerlink" title="保存和加载模型"></a>保存和加载模型</h2><p>参考：<a href="https://blog.csdn.net/tszupup/article/details/85198949" target="_blank" rel="noopener">Keras框架下的保存模型和加载模型</a></p><ol><li>完整保存使用model.save()完整地保存整个模型，将Keras模型和权重保存在一个HDF5文件中，该文件将包含：模型的结构，模型的参数以及优化器参数：用于继续训练过程</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>core <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Activation<span class="token keyword">from</span> keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> SGD<span class="token keyword">from</span> keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> np_utils<span class="token comment" spellcheck="true">#随机数种子，重复性设置</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1671</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#网络结构和训练的参数</span>NB_EPOCH <span class="token operator">=</span> <span class="token number">20</span>BATCH_SIZE <span class="token operator">=</span> <span class="token number">128</span>VERBOSE <span class="token operator">=</span> <span class="token number">1</span>NB_CLASSES <span class="token operator">=</span> <span class="token number">10</span>OPTIMIZER <span class="token operator">=</span> SGD<span class="token punctuation">(</span><span class="token punctuation">)</span>N_HIDDEN <span class="token operator">=</span> <span class="token number">128</span>VALIDATION_SPLIT <span class="token operator">=</span> <span class="token number">0.2</span>RESHAPED <span class="token operator">=</span> <span class="token number">784</span><span class="token comment" spellcheck="true">#加载数据</span><span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"mnist.npz"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    x_train<span class="token punctuation">,</span> y_train <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token string">'x_train'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token string">'y_train'</span><span class="token punctuation">]</span>    x_test<span class="token punctuation">,</span> y_test <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token string">'x_test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token string">'y_test'</span><span class="token punctuation">]</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用函数加载数据</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#数据预处理</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#数据变形、类型转换及归一化</span>x_train <span class="token operator">=</span> x_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span>x_test <span class="token operator">=</span> x_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token comment" spellcheck="true">#打印消息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Training samples:'</span><span class="token punctuation">,</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Testing samples:'</span><span class="token punctuation">,</span> x_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将类别转换为one-hot编码</span>y_train <span class="token operator">=</span> np_utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> NB_CLASSES<span class="token punctuation">)</span>y_test <span class="token operator">=</span> np_utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> NB_CLASSES<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定义网络结构</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span>RESHAPED<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>NB_CLASSES<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印模型概述信息</span>model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#编译模型</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>OPTIMIZER<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#训练模型</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> epochs<span class="token operator">=</span>NB_EPOCH<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">,</span>                    validation_split<span class="token operator">=</span>VALIDATION_SPLIT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#评估模型</span>score <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test score:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test accuracy:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存模型</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'my_model.h5'</span><span class="token punctuation">)</span></code></pre><p>加载：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> load_model<span class="token comment" spellcheck="true">#加载整个模型</span>model <span class="token operator">=</span> load_model<span class="token punctuation">(</span><span class="token string">'my_model.h5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#训练模型</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> epochs<span class="token operator">=</span>NB_EPOCH<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">,</span>                    validation_split<span class="token operator">=</span>VALIDATION_SPLIT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#评估模型</span>score <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">)</span></code></pre><ol start="2"><li>保存模型结构和权重<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>core <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Activation<span class="token keyword">from</span> keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> SGD<span class="token keyword">from</span> keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> np_utils<span class="token comment" spellcheck="true"># 定义网络结构</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span>RESHAPED<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>N_HIDDEN<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>NB_CLASSES<span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印模型概述信息</span>model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 编译模型</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>OPTIMIZER<span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 训练模型</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span> epochs<span class="token operator">=</span>NB_EPOCH<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">,</span>                 validation_split<span class="token operator">=</span>VALIDATION_SPLIT<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 评估模型</span>score <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> verbose<span class="token operator">=</span>VERBOSE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test score:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Test accuracy:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存模型的结构</span>json_string <span class="token operator">=</span> model<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 方式1</span>open<span class="token punctuation">(</span><span class="token string">'model_architecture_1.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json_string<span class="token punctuation">)</span>yaml_string <span class="token operator">=</span> model<span class="token punctuation">.</span>to_yaml<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 方式2</span>open<span class="token punctuation">(</span><span class="token string">'model_arthitecture_2.yaml'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>yaml_string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存模型的权重</span>model<span class="token punctuation">.</span>save_weights<span class="token punctuation">(</span><span class="token string">'my_model_weights.h5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印消息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练和保存模型结构完成！！！'</span><span class="token punctuation">)</span></code></pre></li></ol><p>加载结构：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> model_from_json<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> model_from_yaml<span class="token comment" spellcheck="true"># 加载模型结构</span>model <span class="token operator">=</span> model_from_json<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'model_architecture_1.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>或：model <span class="token operator">=</span> model_from_yaml<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'model_arthitecture_2.yaml'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加载模型权重</span>model<span class="token punctuation">.</span>load_weights<span class="token punctuation">(</span><span class="token string">'my_model_weights.h5'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pip</title>
      <link href="2021/02/10/python/python-yu-fa/pip/"/>
      <url>2021/02/10/python/python-yu-fa/pip/</url>
      
        <content type="html"><![CDATA[<h2 id="查看pip-安装了那些包"><a href="#查看pip-安装了那些包" class="headerlink" title="查看pip 安装了那些包"></a>查看pip 安装了那些包</h2><pre class=" language-bash"><code class="language-bash">查看所有pip list查看是否安装了某个包centospip list<span class="token operator">|</span><span class="token function">grep</span> pandaswindowspip list <span class="token operator">|</span> findstr pandas</code></pre><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><pre class=" language-bash"><code class="language-bash">4.查看已安装过的包pip show - -files Somepackage5.检查哪些包需要更新pip list - -outdated</code></pre><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><pre class=" language-bash"><code class="language-bash">6.升级包pip <span class="token function">install</span> --upgrade Somepackage升级pip：python -m pip <span class="token function">install</span> --upgrade pip或者：pip <span class="token function">install</span> -U pip</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实体识别</title>
      <link href="2021/02/10/python/nlp/shi-ti-shi-bie/"/>
      <url>2021/02/10/python/nlp/shi-ti-shi-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="实体识别工具"><a href="#实体识别工具" class="headerlink" title="实体识别工具"></a>实体识别工具</h1><h2 id="Pyhanlp"><a href="#Pyhanlp" class="headerlink" title="Pyhanlp"></a><a href="https://github.com/hankcs/pyhanlp" target="_blank" rel="noopener">Pyhanlp</a></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>先安装JDK。你需要保证JDK位数、操作系统位数和Python位数一致。然后设置JAVA_HOME环境变量，最后执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># (可选)conda安装jpype1更方便</span>conda <span class="token function">install</span> -c conda-forge jpype1<span class="token operator">==</span>0.7.0      pip <span class="token function">install</span> pyhanlp</code></pre><p>检测是否安装成功：</p><pre class=" language-bash"><code class="language-bash">hanlp</code></pre><p>如果安装成功，会自动下载词典</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hanlp-install-success.png" alt="安装成功"></p><p>如果报RuntimeError: module compiled against API version 0xc but this version of numpy is 0xb，需要升级 numpy：</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> --upgrade numpy</code></pre><h3 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h3><pre class=" language-bash"><code class="language-bash">hanlp segment</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hanlp-segment.png" alt="交互模式"></p><h3 id="hanlp词性表"><a href="#hanlp词性表" class="headerlink" title="hanlp词性表"></a>hanlp词性表</h3><p>参考：<a href="https://blog.csdn.net/u014258362/article/details/81044286" target="_blank" rel="noopener">hanlp词性表</a></p><h2 id="StanfordCoreNLP"><a href="#StanfordCoreNLP" class="headerlink" title="StanfordCoreNLP"></a>StanfordCoreNLP</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash"> pip <span class="token function">install</span> stanfordcorenlp </code></pre><p>由于其源码为 JAVA 编写，所以需要 JDK1.8 及以上版本的支持，下载安装 JDK1.8。<br>下载 <a href="https://stanfordnlp.github.io/CoreNLP/" target="_blank" rel="noopener">StanfordCoreNLP 的相关文件</a>，解压到任意目录</p><p>如果要处理中文，还需下载中文jar包：<a href="http://nlp.stanford.edu/software/stanford-chinese-corenlp-2018-10-05-models.jar" target="_blank" rel="noopener">stanford-chinese-corenlp-2018-10-05-models</a>，下载完放到上一步解压后的文件夹中。</p><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> stanfordcorenlp <span class="token keyword">import</span> StanfordCoreNLP<span class="token comment" spellcheck="true"># 加载模型，路径是上面解压的路径</span>stanford_model <span class="token operator">=</span> StanfordCoreNLP<span class="token punctuation">(</span>r<span class="token string">'./stanford-corenlp-full-2018-02-27'</span><span class="token punctuation">,</span> lang<span class="token operator">=</span><span class="token string">'zh'</span><span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">"张三和李四在2019年3月23日在北京的腾讯技术有限公司一起开会。"</span>res <span class="token operator">=</span> stanford_model<span class="token punctuation">.</span>ner<span class="token punctuation">(</span>text<span class="token punctuation">)</span></code></pre><p>参数：<br>处理英文时：lang=’en’</p><h2 id="kashgari"><a href="#kashgari" class="headerlink" title="kashgari"></a>kashgari</h2><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_27492735/article/details/108767237" target="_blank" rel="noopener">Kashgari:一个方便快捷的命名实体识别、文本分类工具包</a></li><li><a href="https://www.cnblogs.com/mingriyingying/p/13379434.html" target="_blank" rel="noopener">NER-使用kashgari中的Bert+BiLSTM+CRF</a></li><li><a href="https://www.jianshu.com/p/1d6689851622" target="_blank" rel="noopener">五分钟搭建一个基于BERT的NER模型</a></li><li><a href="https://kashgari-zh.bmio.net/tutorial/text-labeling/" target="_blank" rel="noopener">kashgari-zh.bmio.net</a></li><li><a href="https://shfshf.github.io/2019/12/26/Kashgari/" target="_blank" rel="noopener">Kashgari概述</a></li></ul><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><pre class=" language-bash"><code class="language-bash">conda create --envs myTestNER python<span class="token operator">==</span>3.6pip insall tensorflow<span class="token operator">==</span>1.14.0pip <span class="token function">install</span> kashgari<span class="token operator">==</span>1.1.5</code></pre><h3 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h3><p><a href="https://github.com/ymcui/Chinese-BERT-wwm/" target="_blank" rel="noopener">中文模型</a></p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/Chinese-BERT-wwm.png" alt="中文模型下载"></p><p><a href="https://github.com/google-research/bert" target="_blank" rel="noopener">英文模型</a></p><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>训练集、测试集、验证集的格式均为：</p><pre><code>我 O们 O变 O而 O以 O书 O会 O友 O， O把 O欧 B-LOC美 B-LOC流 O行 O的 O食 O品 O类 O图 O谱 O、 O画 O册 O</code></pre><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Tuple<span class="token punctuation">,</span> List<span class="token comment" spellcheck="true"># 定义一个读取数据的类</span><span class="token keyword">class</span> <span class="token class-name">DataReader</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">read_file</span><span class="token punctuation">(</span>file_path<span class="token punctuation">:</span> str<span class="token punctuation">,</span>                  text_index<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                  label_index<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        根据文件路径读取训练数据、测试数据以及验证数据的text和label        """</span>        x_data<span class="token punctuation">,</span> y_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            lines <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以splitlines的方式获取数据</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>                rows <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以空格进行切分</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>rows<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    x_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                    y_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>                    x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                    y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rows<span class="token punctuation">[</span>text_index<span class="token punctuation">]</span><span class="token punctuation">)</span>                    y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rows<span class="token punctuation">[</span>label_index<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x_data<span class="token punctuation">,</span> y_data</code></pre><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> kashgari<span class="token keyword">from</span> kashgari <span class="token keyword">import</span> utils<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>embeddings <span class="token keyword">import</span> BERTEmbedding<span class="token punctuation">,</span> BERTEmbeddingV2<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>labeling <span class="token keyword">import</span> BiLSTM_CRF_Model<span class="token keyword">from</span> data_load <span class="token keyword">import</span> DataReaderkashgari<span class="token punctuation">.</span>config<span class="token punctuation">.</span>use_cudnn_cell <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 加载训练数据、验证数据以及测试数据</span>train_x<span class="token punctuation">,</span> train_y <span class="token operator">=</span> DataReader<span class="token punctuation">.</span>read_file<span class="token punctuation">(</span><span class="token string">'../data/train.txt'</span><span class="token punctuation">)</span>test_x<span class="token punctuation">,</span> test_y <span class="token operator">=</span> DataReader<span class="token punctuation">.</span>read_file<span class="token punctuation">(</span><span class="token string">'../data/test.txt'</span><span class="token punctuation">)</span>valid_x<span class="token punctuation">,</span> valid_y <span class="token operator">=</span> DataReader<span class="token punctuation">.</span>read_file<span class="token punctuation">(</span><span class="token string">'../data/new_val.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train data count: {len(train_x)}"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"validate data count: {len(valid_x)}"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test data count: {len(test_x)}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 利用kashgari创建Bert Embedding</span>bert_embed <span class="token operator">=</span> BERTEmbedding<span class="token punctuation">(</span><span class="token string">'chinese_wwm_ext_L-12_H-768_A-12'</span><span class="token punctuation">,</span>                           task<span class="token operator">=</span>kashgari<span class="token punctuation">.</span>LABELING<span class="token punctuation">,</span>                           sequence_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用BiLSTM_CRF_Model模型并进行训练</span>model <span class="token operator">=</span> BiLSTM_CRF_Model<span class="token punctuation">(</span>bert_embed<span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token operator">=</span>train_x<span class="token punctuation">,</span> y_train<span class="token operator">=</span>train_y<span class="token punctuation">,</span>          x_validate<span class="token operator">=</span>valid_x<span class="token punctuation">,</span> y_validate<span class="token operator">=</span>valid_y<span class="token punctuation">,</span>          batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./model/NER.h5'</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>test_x<span class="token punctuation">,</span> test_y<span class="token punctuation">)</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'小'</span><span class="token punctuation">,</span> <span class="token string">'明'</span><span class="token punctuation">,</span> <span class="token string">'在'</span><span class="token punctuation">,</span> <span class="token string">'商'</span><span class="token punctuation">,</span> <span class="token string">'务'</span><span class="token punctuation">,</span> <span class="token string">'部'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="使用自带的人民日报数据"><a href="#使用自带的人民日报数据" class="headerlink" title="使用自带的人民日报数据"></a>使用自带的人民日报数据</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>seq_labeling <span class="token keyword">import</span> BLSTMCRFModel<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> ChinaPeoplesDailyNerCorpus<span class="token keyword">from</span> kashgari<span class="token punctuation">.</span>embeddings <span class="token keyword">import</span> BERTEmbeddingembedding <span class="token operator">=</span> BERTEmbedding<span class="token punctuation">(</span><span class="token string">'/home/eee/sentence-alignment-classification-model/model/multi_cased_L-12_H-768_A-12'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>train_x<span class="token punctuation">,</span> train_y <span class="token operator">=</span> ChinaPeoplesDailyNerCorpus<span class="token punctuation">.</span>get_sequence_tagging_data<span class="token punctuation">(</span><span class="token string">'train'</span><span class="token punctuation">)</span>validate_x<span class="token punctuation">,</span> validate_y <span class="token operator">=</span> ChinaPeoplesDailyNerCorpus<span class="token punctuation">.</span>get_sequence_tagging_data<span class="token punctuation">(</span><span class="token string">'validate'</span><span class="token punctuation">)</span>test_x<span class="token punctuation">,</span> test_y  <span class="token operator">=</span> ChinaPeoplesDailyNerCorpus<span class="token punctuation">.</span>get_sequence_tagging_data<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>model <span class="token operator">=</span> BLSTMCRFModel<span class="token punctuation">(</span>embedding<span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span>          train_y<span class="token punctuation">,</span>          validate_y<span class="token operator">=</span>validate_y<span class="token punctuation">,</span>          validate_x<span class="token operator">=</span>validate_x<span class="token punctuation">,</span>          epochs<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>          batch_size<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./model'</span><span class="token punctuation">)</span>new_model <span class="token operator">=</span> BLSTMCRFModel<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">'./model'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># EXAMPLE 1</span>news <span class="token operator">=</span> <span class="token string">"「DeepMind 击败人类职业玩家的方式与他们声称的 AI 使命，以及所声称的『正确』方式完全相反。」"</span>x <span class="token operator">=</span> list<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'「'</span><span class="token punctuation">,</span> <span class="token string">'DeepMind'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'击败'</span><span class="token punctuation">,</span> <span class="token string">'人类'</span><span class="token punctuation">,</span> <span class="token string">'职业'</span><span class="token punctuation">,</span> <span class="token string">'玩家'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'方式'</span><span class="token punctuation">,</span> <span class="token string">'与'</span><span class="token punctuation">,</span> <span class="token string">'他们'</span><span class="token punctuation">,</span> <span class="token string">'声称'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'AI'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'使命'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'以及'</span><span class="token punctuation">,</span> <span class="token string">'所'</span><span class="token punctuation">,</span> <span class="token string">'声称'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'『'</span><span class="token punctuation">,</span> <span class="token string">'正确'</span><span class="token punctuation">,</span> <span class="token string">'』'</span><span class="token punctuation">,</span> <span class="token string">'方式'</span><span class="token punctuation">,</span> <span class="token string">'完全'</span><span class="token punctuation">,</span> <span class="token string">'相反'</span><span class="token punctuation">,</span> <span class="token string">'。'</span><span class="token punctuation">,</span> <span class="token string">'」'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> new_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                                                                                                     <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># EXAMPLE 2</span>news <span class="token operator">=</span> <span class="token string">"陈志衍是有个非常好的男孩子，他住在香港的九龙塘区，他今年二十三号生日。"</span>x <span class="token operator">=</span> list<span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token string">'陈志衍'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'有'</span><span class="token punctuation">,</span> <span class="token string">'个'</span><span class="token punctuation">,</span> <span class="token string">'非常'</span><span class="token punctuation">,</span> <span class="token string">'好'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'男孩子'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'他'</span><span class="token punctuation">,</span> <span class="token string">'住'</span><span class="token punctuation">,</span> <span class="token string">'在'</span><span class="token punctuation">,</span> <span class="token string">'香港'</span><span class="token punctuation">,</span> <span class="token string">'的'</span><span class="token punctuation">,</span> <span class="token string">'吉林'</span><span class="token punctuation">,</span> <span class="token string">'区'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'他'</span><span class="token punctuation">,</span> <span class="token string">'今年'</span><span class="token punctuation">,</span> <span class="token string">'二十三'</span><span class="token punctuation">,</span> <span class="token string">'号'</span><span class="token punctuation">,</span> <span class="token string">'生日'</span><span class="token punctuation">,</span> <span class="token string">'。'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> new_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">]</span></code></pre><h3 id="自带数据集"><a href="#自带数据集" class="headerlink" title="自带数据集"></a>自带数据集</h3><pre><code>加载内置数据集中文数据集from kashgari.corpus import ChineseDailyNerCorpustrain_x, train_y = ChineseDailyNerCorpus.load_data(&#39;train&#39;)valid_x, valid_y = ChineseDailyNerCorpus.load_data(&#39;valid&#39;)test_x, test_y = ChineseDailyNerCorpus.load_data(&#39;test&#39;)英文数据集from kashgari.corpus import CONLL2003ENCorpustrain_x, train_y = CONLL2003ENCorpus.load_data(&#39;train&#39;)valid_x, valid_y = CONLL2003ENCorpus.load_data(&#39;valid&#39;)test_x, test_y = CONLL2003ENCorpus.load_data(&#39;test&#39;)# 也可以使用自己的数据集train_x = [[&#39;Hello&#39;, &#39;world&#39;], [&#39;Hello&#39;, &#39;Kashgari&#39;], [&#39;I&#39;, &#39;love&#39;, &#39;Beijing&#39;]]train_y = [[&#39;O&#39;, &#39;O&#39;], [&#39;O&#39;, &#39;B-PER&#39;], [&#39;O&#39;, &#39;B-LOC&#39;]]valid_x, valid_y = train_x, train_ytest_x, test_x = train_x, train_y</code></pre><h2 id="stanza"><a href="#stanza" class="headerlink" title="stanza"></a><a href="https://mp.weixin.qq.com/s/HcX8b84YazwVI-usWsCUew" target="_blank" rel="noopener">stanza</a></h2><h2 id="LTP"><a href="#LTP" class="headerlink" title="LTP"></a>LTP</h2><p>参考：<a href="https://ltp.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">LTP4 文档</a></p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><pre><code>pip install ltp</code></pre><h3 id="加载模型"><a href="#加载模型" class="headerlink" title="加载模型"></a>加载模型</h3><pre><code>from ltp import LTPltp = LTP() # 默认加载 Small 模型# ltp = LTP(path = &quot;base|small|tiny&quot;)# ltp = LTP(path = &quot;tiny.tgz|tiny-tgz-extracted&quot;) # 其中 tiny-tgz-extracted 是 tiny.tgz 解压出来的文件夹</code></pre><h3 id="命名实体识别"><a href="#命名实体识别" class="headerlink" title="命名实体识别"></a>命名实体识别</h3><pre><code>from ltp import LTPltp = LTP()seg, hidden = ltp.seg([&quot;他叫汤姆去拿外衣。&quot;])ner = ltp.ner(hidden)# [[&#39;他&#39;, &#39;叫&#39;, &#39;汤姆&#39;, &#39;去&#39;, &#39;拿&#39;, &#39;外衣&#39;, &#39;。&#39;]]# [[(&#39;Nh&#39;, 2, 2)]]tag, start, end = ner[0][0]print(tag,&quot;:&quot;, &quot;&quot;.join(seg[0][start:end + 1]))# Nh : 汤姆</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-str</title>
      <link href="2021/01/28/python/python-yu-fa/python-str/"/>
      <url>2021/01/28/python/python-yu-fa/python-str/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><p>多个字符串拼接可以用join:</p><pre class=" language-python"><code class="language-python">str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span>str_join1 <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>str_list<span class="token punctuation">)</span>str_join2 <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>str_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_join1<span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span>Hello world<span class="token keyword">print</span><span class="token punctuation">(</span>str_join2<span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span>Hello<span class="token operator">-</span>world</code></pre><p>加号拼接:</p><pre class=" language-python"><code class="language-python">str_1 <span class="token operator">=</span> <span class="token string">'Hello world！ '</span>str_2 <span class="token operator">=</span> <span class="token string">'My name is Python猫.'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_1 <span class="token operator">+</span> str_2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>Hello world！ My name <span class="token keyword">is</span> Python猫<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>str_1<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>Hello world！</code></pre><p>字符串增长：</p><pre><code>str += &#39;s&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongo语法</title>
      <link href="2021/01/28/linux/mongo/mongo-grammar/"/>
      <url>2021/01/28/linux/mongo/mongo-grammar/</url>
      
        <content type="html"><![CDATA[<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h2><pre class=" language-bash"><code class="language-bash">db.collection.find<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="获取数据条数"><a href="#获取数据条数" class="headerlink" title="获取数据条数"></a>获取数据条数</h2><pre class=" language-bash"><code class="language-bash">db.collection.find<span class="token punctuation">(</span><span class="token punctuation">)</span>.count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h2><pre class=" language-bash"><code class="language-bash">查询age<span class="token operator">></span>22的记录db.userInfo.find<span class="token punctuation">((</span>age:<span class="token punctuation">{</span><span class="token variable">$gt</span>:22<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查询age<span class="token operator">&lt;</span>22的记录db.userInfo.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$lt</span>:22<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查询age<span class="token operator">>=</span>25的记录db.userInfo.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$gte</span>:25<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查询age<span class="token operator">&lt;=</span>25的记录db.userInfo.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span><span class="token variable">$lte</span>:25<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>查询age<span class="token operator">></span>23并且age<span class="token operator">&lt;=</span>26db.userInfo.find<span class="token punctuation">(</span><span class="token punctuation">{</span>age:<span class="token punctuation">{</span>gte:23,<span class="token variable">$lte</span>:26<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><p>查询student 集合中名字为zs且id为02的项:</p><pre class=" language-bash"><code class="language-bash">db.getCollection<span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"zs"</span>,<span class="token string">"id"</span><span class="token keyword">:</span><span class="token string">"02"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="查询集合中指定字段的所有不同值"><a href="#查询集合中指定字段的所有不同值" class="headerlink" title="查询集合中指定字段的所有不同值"></a>查询集合中指定字段的所有不同值</h2><pre><code>db.目标集合.distinct(&quot;指定字段&quot;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Python3.6</title>
      <link href="2021/01/27/linux/ming-ling/install-python3-6/"/>
      <url>2021/01/27/linux/ming-ling/install-python3-6/</url>
      
        <content type="html"><![CDATA[<p>参考: <a href="https://www.cnblogs.com/yangzhaon/p/11203395.html" target="_blank" rel="noopener">Centos7安装python3.6.5</a></p><p>安装python3.6.5,原来的python2.7并存</p><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel <span class="token function">wget</span></code></pre><p>下载安装包:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz</code></pre><p>解压文件:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf Python-3.6.5.tgz</code></pre><p>进入 解压后的目录,指定编译后文件的目录:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> Python-3.6.5.tgz./configure --prefix<span class="token operator">=</span>/usr/local/python3</code></pre><p>编译:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><p>如果出现zipimport.ZipImportError: can’t decompress data; zlib not avaliable,则安装:</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y zlib*</code></pre><p>然后重新执行make</p><h1 id="设置软链"><a href="#设置软链" class="headerlink" title="设置软链"></a>设置软链</h1><p>查看 /usr/bin下是否有pip3和python3,如果没有设置下面的软链:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/local/python3/bin/python3 /usr/bin/python3<span class="token function">ln</span> -s /usr/local/python3/bin/pip3 /usr/bin/pip3</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新Centos内核</title>
      <link href="2021/01/27/linux/ming-ling/update-centos-core/"/>
      <url>2021/01/27/linux/ming-ling/update-centos-core/</url>
      
        <content type="html"><![CDATA[<p>参考: <a href="https://www.cnblogs.com/xzkzzz/p/9627658.html" target="_blank" rel="noopener">Centos7 升级内核版本</a></p><h1 id="查看当前内核版本"><a href="#查看当前内核版本" class="headerlink" title="查看当前内核版本"></a>查看当前内核版本</h1><pre class=" language-bash"><code class="language-bash">内核版本$ <span class="token function">uname</span> -r3.10.0-514.el7.x86_64$ <span class="token function">uname</span> -aLinux k8s-master 3.10.0-514.el7.x86_64 <span class="token comment" spellcheck="true">#1 SMP Tue Nov 22 16:42:41 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span>centos版本：$ <span class="token function">cat</span> /etc/redhat-release CentOS Linux release 7.3.1611 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span> </code></pre><h1 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h1><h2 id="更新yum源仓库"><a href="#更新yum源仓库" class="headerlink" title="更新yum源仓库"></a>更新yum源仓库</h2><pre class=" language-bash"><code class="language-bash">$ yum -y update</code></pre><h2 id="启用-ELRepo-仓库"><a href="#启用-ELRepo-仓库" class="headerlink" title="启用 ELRepo 仓库"></a>启用 ELRepo 仓库</h2><p>ELRepo 仓库是基于社区的用于企业级 Linux 仓库，提供对 RedHat Enterprise (RHEL) 和 其他基于 RHEL的 Linux 发行版（CentOS、Scientific、Fedora 等）的支持。<br>ELRepo 聚焦于和硬件相关的软件包，包括文件系统驱动、显卡驱动、网络驱动、声卡驱动和摄像头驱动等。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#导入ELRepo仓库的公共密钥</span>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org<span class="token comment" spellcheck="true">#安装ELRepo仓库的yum源</span>rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</code></pre><h2 id="查看可用的系统内核包"><a href="#查看可用的系统内核包" class="headerlink" title="查看可用的系统内核包"></a>查看可用的系统内核包</h2><pre class=" language-bash"><code class="language-bash">yum --disablerepo<span class="token operator">=</span><span class="token string">"*"</span> --enablerepo<span class="token operator">=</span><span class="token string">"elrepo-kernel"</span> list available</code></pre><h2 id="安装最新版本内核"><a href="#安装最新版本内核" class="headerlink" title="安装最新版本内核"></a>安装最新版本内核</h2><pre class=" language-bash"><code class="language-bash">yum --enablerepo<span class="token operator">=</span>elrepo-kernel <span class="token function">install</span> kernel-ml</code></pre><p>–enablerepo 选项开启 CentOS 系统上的指定仓库。默认开启的是 elrepo，这里用 elrepo-kernel 替换。</p><h1 id="设置-grub2"><a href="#设置-grub2" class="headerlink" title="设置 grub2"></a>设置 grub2</h1><p>内核安装好后，需要设置为默认启动选项并重启后才会生效</p><h2 id="查看系统上的所有可用内核"><a href="#查看系统上的所有可用内核" class="headerlink" title="查看系统上的所有可用内核"></a>查看系统上的所有可用内核</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">awk</span> -F\<span class="token string">' '</span><span class="token variable">$1</span><span class="token operator">==</span><span class="token string">"menuentry "</span> <span class="token punctuation">{</span>print i++ <span class="token string">" : "</span> <span class="token variable">$2</span><span class="token punctuation">}</span>' /etc/grub2.cfg0 <span class="token keyword">:</span> CentOS Linux <span class="token punctuation">(</span>4.18.7-1.el7.elrepo.x86_64<span class="token punctuation">)</span> 7 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>1 <span class="token keyword">:</span> CentOS Linux <span class="token punctuation">(</span>3.10.0-862.11.6.el7.x86_64<span class="token punctuation">)</span> 7 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>2 <span class="token keyword">:</span> CentOS Linux <span class="token punctuation">(</span>3.10.0-514.el7.x86_64<span class="token punctuation">)</span> 7 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>3 <span class="token keyword">:</span> CentOS Linux <span class="token punctuation">(</span>0-rescue-063ec330caa04d4baae54c6902c62e54<span class="token punctuation">)</span> 7 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span></code></pre><h2 id="设置新的内核为grub2的默认版本"><a href="#设置新的内核为grub2的默认版本" class="headerlink" title="设置新的内核为grub2的默认版本"></a>设置新的内核为grub2的默认版本</h2><p>服务器上存在4 个内核，我们要使用 4.18 这个版本，可以通过 grub2-set-default 0 命令或编辑 /etc/default/grub 文件来设置</p><h3 id="方法1、通过-grub2-set-default-0-命令设置"><a href="#方法1、通过-grub2-set-default-0-命令设置" class="headerlink" title="方法1、通过 grub2-set-default 0 命令设置"></a>方法1、通过 grub2-set-default 0 命令设置</h3><p>其中 0 是上面查询出来的可用内核编号</p><pre class=" language-bash"><code class="language-bash">grub2-set-default 0</code></pre><h3 id="方法2、编辑-etc-default-grub-文件"><a href="#方法2、编辑-etc-default-grub-文件" class="headerlink" title="方法2、编辑 /etc/default/grub 文件"></a>方法2、编辑 /etc/default/grub 文件</h3><p>设置 GRUB_DEFAULT=0，通过上面查询显示的编号为 0 的内核作为默认内核：</p><pre class=" language-bash"><code class="language-bash">$ vim /etc/default/grubGRUB_TIMEOUT<span class="token operator">=</span>5GRUB_DISTRIBUTOR<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">sed</span> 's, release .*$,,g' /etc/system-release<span class="token variable">)</span></span>"</span>GRUB_DEFAULT<span class="token operator">=</span>0GRUB_DISABLE_SUBMENU<span class="token operator">=</span>trueGRUB_TERMINAL_OUTPUT<span class="token operator">=</span><span class="token string">"console"</span>GRUB_CMDLINE_LINUX<span class="token operator">=</span><span class="token string">"crashkernel=auto rd.lvm.lv=cl/root rhgb quiet"</span>GRUB_DISABLE_RECOVERY<span class="token operator">=</span><span class="token string">"true"</span></code></pre><p>生成 grub 配置文件并重启</p><pre class=" language-bash"><code class="language-bash">grub2-mkconfig -o /boot/grub2/grub.cfg<span class="token function">reboot</span></code></pre><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><pre class=" language-bash"><code class="language-bash">$ <span class="token function">uname</span> -r4.18.7-1.el7.elrepo.x86_64</code></pre><h1 id="删除旧内核（可选）"><a href="#删除旧内核（可选）" class="headerlink" title="删除旧内核（可选）"></a>删除旧内核（可选）</h1><p>查看系统中全部的内核：</p><pre class=" language-bash"><code class="language-bash">$ rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> kernelkernel-3.10.0-514.el7.x86_64kernel-ml-4.18.7-1.el7.elrepo.x86_64kernel-tools-libs-3.10.0-862.11.6.el7.x86_64kernel-tools-3.10.0-862.11.6.el7.x86_64kernel-3.10.0-862.11.6.el7.x86_64</code></pre><h2 id="方法1、yum-remove-删除旧内核的-RPM-包"><a href="#方法1、yum-remove-删除旧内核的-RPM-包" class="headerlink" title="方法1、yum remove 删除旧内核的 RPM 包"></a>方法1、yum remove 删除旧内核的 RPM 包</h2><pre class=" language-bash"><code class="language-bash">$ yum remove kernel-3.10.0-514.el7.x86_64 \kernel-tools-libs-3.10.0-862.11.6.el7.x86_64 \kernel-tools-3.10.0-862.11.6.el7.x86_64 \kernel-3.10.0-862.11.6.el7.x86_64</code></pre><h2 id="方法2、yum-utils-工具"><a href="#方法2、yum-utils-工具" class="headerlink" title="方法2、yum-utils 工具"></a>方法2、yum-utils 工具</h2><p>如果安装的内核不多于 3 个，yum-utils 工具不会删除任何一个。只有在安装的内核大于 3 个时，才会自动删除旧内核。<br>安装yum-utils</p><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> yum-utils</code></pre><p>删除旧版本　</p><pre class=" language-bash"><code class="language-bash">package-cleanup --oldkernels</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-堆</title>
      <link href="2021/01/26/python/python-yu-fa/python-heap/"/>
      <url>2021/01/26/python/python-yu-fa/python-heap/</url>
      
        <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> heapq <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token comment" spellcheck="true"># 建立堆</span>heap<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将x压入堆中</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从堆中弹出最小的元素              </span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 让列表具备堆特征，函数heapify通过执行尽可能少的移位操作将列表变成合法的堆（即具备堆特征）。如果你的堆并不是使用heappush创建的，应在使用heappush和heappop之前使用这个函数。</span>heapify<span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 弹出最小的元素，并将x压入堆中</span>heapreplace<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回iter中n个最大的元素</span>nlargest<span class="token punctuation">(</span>n<span class="token punctuation">,</span> iter<span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># 返回iter中n个最小的元素            </span>nsmallest<span class="token punctuation">(</span>n<span class="token punctuation">,</span> iter<span class="token punctuation">)</span>                                   </code></pre><h1 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Document</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> _id<span class="token punctuation">,</span> con<span class="token punctuation">,</span> goal<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>id <span class="token operator">=</span> str<span class="token punctuation">(</span>_id<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>content <span class="token operator">=</span> con        self<span class="token punctuation">.</span>goal <span class="token operator">=</span> goal    <span class="token comment" spellcheck="true"># 按照goal，从小到大排序</span>    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>goal <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>goal<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>d1<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">"fda"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span>d2<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">"fda"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>d3<span class="token operator">=</span>Document<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">"fda"</span><span class="token punctuation">,</span><span class="token number">245</span><span class="token punctuation">)</span>li<span class="token operator">=</span><span class="token punctuation">[</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">]</span>li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-ConnectKafka</title>
      <link href="2021/01/07/linux/kafka/java-connectkafka/"/>
      <url>2021/01/07/linux/kafka/java-connectkafka/</url>
      
        <content type="html"><![CDATA[<h2 id="从头开始消费"><a href="#从头开始消费" class="headerlink" title="从头开始消费"></a>从头开始消费</h2><p>消费者要从头开始消费某个topic的全量数据，需要满足2个条件（spring-kafka）：</p><ul><li>使用一个全新的”group.id”（就是之前没有被任何消费者使用过）;</li><li>指定”auto.offset.reset”参数的值为earliest；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java-Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex-table</title>
      <link href="2021/01/06/write/latex/latex-table/"/>
      <url>2021/01/06/write/latex/latex-table/</url>
      
        <content type="html"><![CDATA[<h2 id="三线表"><a href="#三线表" class="headerlink" title="三线表"></a>三线表</h2><p>\vspace{-0.5em}用于设置与表标题之间的距离</p><pre><code>\begin{table}[!ht]    \bicaption{八种DNA编码规则}{Eight kinds of DNA coding rules.}    \label{tab:atcg}    \vspace{-0.5em}\centering\wuhao    \begin{tabular}{cccc}        \toprule        词 &amp; 经济 &amp; 政治 &amp; 体育 \\        \midrule        “冠军” &amp; -6.9077 &amp; -6.9077 &amp; 0.6931\\        \bottomrule    \end{tabular}\end{table}</code></pre><h2 id="设置表格列宽"><a href="#设置表格列宽" class="headerlink" title="设置表格列宽"></a>设置表格列宽</h2><p>参考：<a href="https://blog.csdn.net/sptoor/article/details/21493777" target="_blank" rel="noopener">Latex设定表格列宽</a></p><p>固定列宽可以使用 array 宏包的 p{2cm} 系列命令，如果需要指定水平对齐方式，可以使用下面的形式 &gt;{\centering}p{2cm} 实现，但如果使用这种方式，缺省情况下不能使用 \ 换行，需要使用\tabularnewline 代替。为了仍然使用 \ 换行，需要在导言区加上下面的代码：</p><pre><code>\usepackage{array}\newcommand{\PreserveBackslash}[1]{\let\temp=\\#1\let\\=\temp}\newcolumntype{C}[1]{&gt;{\PreserveBackslash\centering}p{#1}}\newcolumntype{R}[1]{&gt;{\PreserveBackslash\raggedleft}p{#1}}\newcolumntype{L}[1]{&gt;{\PreserveBackslash\raggedright}p{#1}}</code></pre><p>使用 C{3cm} 命令即可指定该列宽度为 3cm，并且文字居中对齐，左对齐和右对齐命令分别是 L{2cm} 和R{2cm}。</p><pre><code>\begin{table}[htbp]  \centering\caption{\label{tab:test}2000 和~2004 年中国制造业产品的出口份额}  \begin{tabular}{L{2cm}C{2cm}R{2cm}}    \toprule    &amp; 2000 &amp; 2004 \\    \midrule    钢铁 &amp; 3.1 &amp; 5.2 \\    化学制品 &amp; 2.1 &amp; 2.7 \\    办公设备及电信设备 &amp; 4.5 &amp; 15.2 \\    汽车产品 &amp; 0.3 &amp; 0.7 \\    纺织品 &amp; 10.4 &amp; 17.2 \\    服装 &amp; 18.3 &amp; 24\\    \bottomrule  \end{tabular}\end{table}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex-table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex-pic</title>
      <link href="2021/01/06/write/latex/latex-pic/"/>
      <url>2021/01/06/write/latex/latex-pic/</url>
      
        <content type="html"><![CDATA[<h2 id="设置图片存放路径"><a href="#设置图片存放路径" class="headerlink" title="设置图片存放路径"></a>设置图片存放路径</h2><p>设置存放图片的根路径<br>导包：</p><pre><code>\usepackage{graphicx}</code></pre><p>使用：<br>在根目录下建立figures目录，将图片存放在该目录中，以后直接引用图片名称即可，不用扩展名：</p><pre><code>\graphicspath{{figures/}} </code></pre><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>isNumberDFA是图片名，不用加扩展名：</p><pre><code>\begin{figure}[htb]    \centering    % 调整图片与标题之间的距离    \setlength{\abovecaptionskip}{0.5em}    \includegraphics[width=1\textwidth]{isNumberDFA}    \caption{DFA状态转移图}    \label{isNumberDFA}\end{figure}</code></pre><h2 id="两张图片横着放"><a href="#两张图片横着放" class="headerlink" title="两张图片横着放"></a>两张图片横着放</h2><pre><code>\begin{figure}[htb]    \centering    \subfigure[冠状树]{        \begin{minipage}[b]{0.4\textwidth}            \includegraphics[width=1\textwidth]{isNumberDFA}        \end{minipage}    }    \subfigure[龙曲线]{        \begin{minipage}[b]{0.4\textwidth}            \includegraphics[width=1\textwidth]{status-table-DFA}        \end{minipage}    }    \caption{DFA状态转移图}    \label{isNumberDFA}\end{figure}</code></pre><h2 id="四张图片两两并列排放"><a href="#四张图片两两并列排放" class="headerlink" title="四张图片两两并列排放"></a>四张图片两两并列排放</h2><p>空行表示换行。</p><pre><code>\begin{figure}[H]    \centering    \begin{minipage}{7cm}        \includegraphics[width=1\textwidth]{./pic/info1}        \label{1}    \end{minipage}    \begin{minipage}{7cm}        \includegraphics[width=1\textwidth]{./pic/info2}        \label{2}    \end{minipage}    % 空一行会分两行排版    \begin{minipage}{7cm}        \includegraphics[width=\textwidth]{./pic/info3}        \label{3}    \end{minipage}    \begin{minipage}{7cm}        \includegraphics[width=\textwidth]{./pic/info4}        \label{4}    \end{minipage}    \caption{填写信息}\end{figure}</code></pre><h2 id="九张图片"><a href="#九张图片" class="headerlink" title="九张图片"></a>九张图片</h2><pre><code>\begin{figure}[htb]    \centering    \subfigure[冠状树]{        \label{xx}        \begin{minipage}[b]{0.3\textwidth}            \includegraphics[width=1\textwidth]{runcoronaltree}        \end{minipage}    }    \subfigure[龙曲线]{        \label{xx}        \begin{minipage}[b]{0.3\textwidth}            \includegraphics[width=1\textwidth]{rundragon}        \end{minipage}    }    \subfigure[丢勒五边形]{        \label{xx}        \begin{minipage}[b]{0.3\textwidth}            \includegraphics[width=1\textwidth]{rundurer}        \end{minipage}    }    \subfigure[蕨类植物]{        \label{fern0}        \begin{minipage}[b]{0.3\textwidth}            \includegraphics[width=1\textwidth]{runfern0}         \end{minipage}    }    \subfigure[鱼群]{        \begin{minipage}[b]{0.3\textwidth}            \includegraphics[width=1\textwidth]{runfish}         \end{minipage}    }    \subfigure[树]{        \begin{minipage}[b]{0.3\textwidth}            \includegraphics[width=1\textwidth]{runtree}        \end{minipage}    }    \subfigure[c曲线]{        \begin{minipage}[b]{0.3\textwidth}            \includegraphics[width=1\textwidth]{runc}         \end{minipage}    }    \subfigure[枫树]{        \begin{minipage}[b]{0.3\textwidth}            \includegraphics[width=1\textwidth]{runmapletree}         \end{minipage}    }    \subfigure[Sierpinski三角形]{        \begin{minipage}[b]{0.3\textwidth}            \includegraphics[width=1\textwidth]{runsierpinski}        \end{minipage}    }    \caption{程序运行结果}    \label{runresult}\end{figure}</code></pre><h1 id="图标题"><a href="#图标题" class="headerlink" title="图标题"></a>图标题</h1><pre><code>\vspace{-0.8cm}  %调整图片与上文的垂直距离\setlength{\abovecaptionskip}{-0.2cm}   %调整图片标题与图距离\setlength{\belowcaptionskip}{-1cm}   %调整图片标题与下文距离</code></pre><p><strong>图片超过宽度</strong>会导致图片标题与下文之间间隔变大。<br>减少宽度即可：设置为行宽的90%</p><pre><code>\includegraphics[width = 0.9\textwidth]{picname}</code></pre><h1 id="子标题与子图的距离"><a href="#子标题与子图的距离" class="headerlink" title="子标题与子图的距离"></a>子标题与子图的距离</h1><p>参考：<a href="https://www.pianshen.com/article/8282354102/" target="_blank" rel="noopener">subfigure命令插入多行多列图片修改子图与子图、子标题的距离</a><br>\subfigcapskip=-5pt %设置子图与子标题之间的距离</p><pre><code>\usepackage{graphicx}  %插入图片的宏包\usepackage{float}  %设置图片浮动位置的宏包\usepackage{subfigure}  %插入多图时用子图显示的宏包\begin{figure}[H] %这里使用的是强制位置，除非真的放不下，不然就是写在哪里图就放在哪里，不会乱动    \centering  %图片全局居中    \vspace{-0.35cm} %设置与上面正文的距离    \subfigtopskip=2pt %设置子图与上面正文或别的内容的距离    \subfigbottomskip=2pt %设置第二行子图与第一行子图的距离，即下面的头与上面的脚的距离    \subfigcapskip=-5pt %设置子图与子标题之间的距离    \subfigure[original]{        \label{level.sub.1}        \includegraphics[width=0.32\linewidth]{./figure/original.png}}    \quad %默认情况下两个子图之间空的较少，使用这个命令加大宽度    \subfigure[level=9]{        \label{level.sub.2}        \includegraphics[width=0.32\linewidth]{./figure/level9.png}}      %这里是空了一行，能够实现强制将四张图分成两行两列显示，而不是放不下图了再换行，使用\\也行。    \subfigure[level=8]{        \label{level.sub.3}        \includegraphics[width=0.32\linewidth]{./figure/level8.png}}    \quad    \subfigure[level=7]{        \label{level.sub.4}        \includegraphics[width=0.32\linewidth]{./figure/level7.png}}    \caption{不同level的渲染效果}    \label{level}\end{figure}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex-pic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-IO</title>
      <link href="2021/01/05/java/java-io/"/>
      <url>2021/01/05/java/java-io/</url>
      
        <content type="html"><![CDATA[<h1 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h1><p>一行一行地读：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String path <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    StringBuilder result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造一个BufferedReader类来读取文件</span>        String s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用readLine方法，一次读一行</span>            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span> System<span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex-字体</title>
      <link href="2021/01/05/write/latex/latex-zi-ti/"/>
      <url>2021/01/05/write/latex/latex-zi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h1><h2 id="英文字体"><a href="#英文字体" class="headerlink" title="英文字体"></a>英文字体</h2><p>单独设置：</p><pre><code>\usepackage{ctex}\rmfamily{Kafka}和\rmfamily{RocketMQ}的调研报告}</code></pre><h1 id="字号大小对应关系"><a href="#字号大小对应关系" class="headerlink" title="字号大小对应关系"></a>字号大小对应关系</h1><table><thead><tr><th>字号</th><th>磅(pt)</th><th>毫米数</th></tr></thead><tbody><tr><td>初号</td><td>42</td><td>14.28</td></tr><tr><td>小初</td><td>36</td><td>12.70</td></tr><tr><td>一号</td><td>26</td><td>9.17</td></tr><tr><td>小一</td><td>24</td><td>8.47</td></tr><tr><td>二号</td><td>22</td><td>7.76</td></tr><tr><td>小二</td><td>18</td><td>6.35</td></tr><tr><td>三号</td><td>16</td><td>5.64</td></tr><tr><td>小三</td><td>15</td><td>5.29</td></tr><tr><td>四号</td><td>14</td><td>4.94</td></tr><tr><td>小四</td><td>12</td><td>4.32</td></tr><tr><td>五号</td><td>10.5</td><td>3.70</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex-字体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建kafka集群</title>
      <link href="2021/01/05/linux/kafka/da-jian-kafka-ji-qun/"/>
      <url>2021/01/05/linux/kafka/da-jian-kafka-ji-qun/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建zookeeper集群"><a href="#搭建zookeeper集群" class="headerlink" title="搭建zookeeper集群"></a>搭建zookeeper集群</h1><p>参考：<a href="https://www.cnblogs.com/lenmom/p/10290045.html" target="_blank" rel="noopener">centos7安装zookeeper3.4.12集群</a></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>三台服务器，已经做了ssh免密登录，都安装了jdk8</p><pre class=" language-bash"><code class="language-bash">master: 192.168.244.5slave1: 192.168.244.6slave2: 192.168.244.7</code></pre><h2 id="下载和解压"><a href="#下载和解压" class="headerlink" title="下载和解压"></a>下载和解压</h2><p><a href="http://archive.apache.org/dist/zookeeper/" target="_blank" rel="noopener">zookeeper历史版本</a><br>本次使用版本：zookeeper-3.4.12.tar.gz<br>在三台服务器都建立 /opt/software目录</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /opt/software</code></pre><p>将安装包上传到master服务器，解压：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -xzvf zookeeper-3.4.12.tar.gz -C  /opt/software</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">mv</span> /opt/software/zookeeper-3.4.12/conf/zoo_sample.cfg  /opt/software/zookeeper-3.4.12/conf/zoo.cfg  <span class="token function">vi</span> /opt/software/zookeeper-3.4.12/conf/zoo.cfg</code></pre><p>注释掉dataDir=/tmp/zookeeper，然后在文件末尾添加：</p><pre class=" language-bash"><code class="language-bash">dataDir<span class="token operator">=</span>/opt/software/zookeeper-3.4.12/datadataLogDir<span class="token operator">=</span>/opt/software/zookeeper-3.4.12/log<span class="token comment" spellcheck="true"># 主机名可以用对应ip代替</span>server.1<span class="token operator">=</span>master:2888:3888server.2<span class="token operator">=</span>slave1:2888:3888server.3<span class="token operator">=</span>slave2:2888:3888</code></pre><p>创建myid文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /opt/software/zookeeper-3.4.12/data  <span class="token comment" spellcheck="true">#创建数据目录，该目录在zoo.cfg中配置</span><span class="token function">cd</span> /opt/software/zookeeper-3.4.12/data <span class="token comment" spellcheck="true">#上面配置的zookeeper数据保存目录</span><span class="token function">touch</span> myid   <span class="token comment" spellcheck="true">#创建myid文件</span><span class="token keyword">echo</span> <span class="token string">"1"</span><span class="token operator">>></span>myid   <span class="token comment" spellcheck="true">#往myid中写入1，对应server.X={IP}:2888:3888 中的x数字</span></code></pre><p>将上面在master机器上配置好的zookeeper复制到slave1,slave2两台机器上去：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> -r /opt/software/zookeeper-3.4.12/ slave1:/opt/software/  <span class="token function">scp</span> -r /opt/software/zookeeper-3.4.12/ slave2:/opt/software/</code></pre><p>修改slave1,slave2机器上/opt/software/zookeeper-3.4.12/data/myid为对应的值：<br>slave1中：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/software/zookeeper-3.4.12/data<span class="token function">rm</span> -f ./myid<span class="token keyword">echo</span> <span class="token string">"2"</span><span class="token operator">>></span>myid</code></pre><p>slave2中：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/software/zookeeper-3.4.12/data<span class="token function">rm</span> -f ./myid<span class="token keyword">echo</span> <span class="token string">"3"</span><span class="token operator">>></span>myid   <span class="token comment" spellcheck="true">#往myid中写入3，对应server.X={IP}:2888:3888 中的x数字,此处为3</span></code></pre><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><pre class=" language-bash"><code class="language-bash">vim /etc/profile</code></pre><p>在PATH后添加：:$ZK_HOME/bin</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> ZK_HOME<span class="token operator">=</span>/opt/software/zookeeper-3.4.12<span class="token function">export</span> PATH<span class="token operator">=</span>XXXXXXX:<span class="token variable">$ZK_HOME</span>/bin</code></pre><p>使环境变量生效：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile</code></pre><p>三台服务器都配置环境变量。</p><h2 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h2><p>三台服务器都执行：</p><pre class=" language-bash"><code class="language-bash">zkServer.sh start</code></pre><h2 id="zookeeper命令"><a href="#zookeeper命令" class="headerlink" title="zookeeper命令"></a>zookeeper命令</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动ZK服务      </span>sh zkServer.sh start<span class="token comment" spellcheck="true"># 查看ZK服务状态: </span>sh zkServer.sh status<span class="token comment" spellcheck="true"># 停止ZK服务: </span>sh zkServer.sh stop<span class="token comment" spellcheck="true"># 重启ZK服务</span>sh zkServer.sh restart<span class="token comment" spellcheck="true"># 客户端连接zookeeper</span>zkCli.sh -server master:2181</code></pre><h1 id="搭建Kafka"><a href="#搭建Kafka" class="headerlink" title="搭建Kafka"></a>搭建Kafka</h1><p>参考：</p><ul><li><a href="https://www.cnblogs.com/ifme/p/13929928.html" target="_blank" rel="noopener">Centos7搭建kafka集群</a></li><li><a href="https://www.cnblogs.com/xiaohan970121/p/12357199.html" target="_blank" rel="noopener">centos7搭建kafka集群</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://archive.apache.org/dist/kafka" target="_blank" rel="noopener">历史版本</a><br>本文选择kafka_2.13-2.4.0.tgz。<br>上传到master /opt/software下，解压：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf kafka_2.12-2.6.0.tgz</code></pre><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>修改server.properties:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /opt/software/kafka_2.13-2.4.0/config/server.properties<span class="token comment" spellcheck="true"># 修改如下内容</span>// 依次增长的整数，0、1、2，集群中Broker的唯一idbroker.id：0advertised.listeners<span class="token operator">=</span>PLAINTEXT://192.168.244.5:9092zookeeper.connect<span class="token operator">=</span>192.168.244.5:2181,192.168.244.6:2181,192.168.244.7:2181</code></pre><p>修改/opt/software/kafka_2.13-2.4.0/config/zookeeper.properties中的dataDir：</p><pre class=" language-bash"><code class="language-bash">dataDir<span class="token operator">=</span>/opt/software/zookeeper-3.4.12/data</code></pre><p>分发到其他两个节点：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> -r /opt/software/kafka_2.13-2.4.0/  slave1:/opt/software/<span class="token function">scp</span> -r /opt/software/kafka_2.13-2.4.0/  slave2:/opt/software/</code></pre><p>修改其它节点配置文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#slave1节点</span><span class="token function">vi</span> /opt/software/kafka_2.13-2.4.0/config/server.properties<span class="token comment" spellcheck="true"># The id of the broker. This must be set to a unique integer for each broker.</span>broker.id<span class="token operator">=</span>1advertised.listeners<span class="token operator">=</span>PLAINTEXT://192.168.244.6:9092<span class="token comment" spellcheck="true">#slave2节点</span><span class="token function">vi</span> /opt/software/kafka_2.13-2.4.0/config/server.properties<span class="token comment" spellcheck="true"># The id of the broker. This must be set to a unique integer for each broker.</span>broker.id<span class="token operator">=</span>2advertised.listeners<span class="token operator">=</span>PLAINTEXT://192.168.244.7:9092</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>三台服务器在/opt/software/kafka_2.13-2.4.0/bin/下：</p><pre class=" language-bash"><code class="language-bash">./kafka-server-start.sh -daemon <span class="token punctuation">..</span>/config/server.properties</code></pre><h2 id="kafka命令"><a href="#kafka命令" class="headerlink" title="kafka命令"></a>kafka命令</h2><p>由于配置了环境变量，所以可以直接执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动kafka</span>kafka-server-start.sh -daemon <span class="token punctuation">..</span>/config/server.properties<span class="token comment" spellcheck="true"># 停止</span>./kafka-server-stop.sh<span class="token comment" spellcheck="true"># 查看topic</span>kafka-topics.sh --list --zookeeper master:2181,slave1:2181,slave2:2181<span class="token comment" spellcheck="true"># 创建topic，replication-factor设置副本的数量，不能超过broker数量</span>kafka-topics.sh --create --zookeeper master:2181,slave1:2181,slave2:2181 --replication-factor 1 --partitions 1 --topic <span class="token function">test</span><span class="token comment" spellcheck="true"># 发送消息</span>kafka-console-producer.sh --broker-list master:9092,slave1:9092,slave2:9092 --topic <span class="token function">test</span><span class="token comment" spellcheck="true"># 接收消息</span>kafka-console-consumer.sh --bootstrap-server  master:9092,slave1:9092,slave2:9092 --topic <span class="token function">test</span> --from-beginning</code></pre><h1 id="安装中的问题"><a href="#安装中的问题" class="headerlink" title="安装中的问题"></a>安装中的问题</h1><h2 id="kafka无法启动"><a href="#kafka无法启动" class="headerlink" title="kafka无法启动"></a>kafka无法启动</h2><p>master中原来安装过单机版kafka，启动时报错（在/opt/software/kafka_2.13-2.4.0/logs/server.log中）：</p><pre class=" language-bash"><code class="language-bash">ERROR Fatal error during KafkaServer startup. Prepare to <span class="token function">shutdown</span> <span class="token punctuation">(</span>kafka.server.KafkaServer<span class="token punctuation">)</span> kafka.common.InconsistentClusterIdException: The Cluster ID Reu8ClK3TTywPiNLIQIm1w doesn\'t match stored clusterId Some<span class="token punctuation">(</span>BaPSk1bCSsKFxQQ4717R6Q<span class="token punctuation">)</span> <span class="token keyword">in</span> meta.properties. The broker is trying to <span class="token function">join</span> the wrong cluster. Configured zookeeper.connect may be wrong. at kafka.server.KafkaServer.startup<span class="token punctuation">(</span>KafkaServer.scala:220<span class="token punctuation">)</span> at kafka.server.KafkaServerStartable.startup<span class="token punctuation">(</span>KafkaServerStartable.scala:44<span class="token punctuation">)</span> at kafka.Kafka$.main<span class="token punctuation">(</span>Kafka.scala:84<span class="token punctuation">)</span> at kafka.Kafka.main<span class="token punctuation">(</span>Kafka.scala<span class="token punctuation">)</span></code></pre><p>参考：<a href="https://stackoverflow.com/questions/59481878/unable-to-start-kafka-with-zookeeper-kafka-common-inconsistentclusteridexceptio" target="_blank" rel="noopener">kafka.common.InconsistentClusterIdException)</a></p><p>原因是两个kafka占用了同一个kafka日志目录（存放topic的目录）。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li><p>停止三台服务器中zookeeper和kafka。</p></li><li><p>删除 三个服务器以下内容：</p><pre class=" language-bash"><code class="language-bash">/opt/software/kafka_2.13-2.4.0/logs 下所有内容/opt/software/zookeeper-3.4.12/log 下所有内容/opt/software/zookeeper-3.4.12/data 下除了myid外所有内容</code></pre></li><li><p>在三台服务器下新建kafka日志目录：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /opt/software/kafka_2.13-2.4.0/kafka-logs</code></pre></li><li><p>修改/opt/software/kafka_2.13-2.4.0/config/server.properties中配置的kafka日志目录，三台服务器都需要修改：</p></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /opt/software/kafka_2.13-2.4.0/config/server.propertieslog.dirs<span class="token operator">=</span>/opt/software/kafka_2.13-2.4.0/kafka-logs</code></pre><p>然后重新启动zookeeper和kafka。</p><h2 id="zookeeper-ConnectException"><a href="#zookeeper-ConnectException" class="headerlink" title="zookeeper ConnectException"></a>zookeeper ConnectException</h2><p>启动zookeeper后发现/opt/software/zookeeper-3.4.12/data/zookeeper.out中报错：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/zookeeper_connection_err.png" alt="Connection refused"></p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>参考：[WARN [WorkerSender[myid=1]:QuorumCnxManager@584] - Cannot open channel to 2 at election address /x.x.x.x:3888](<a href="https://www.cnblogs.com/chuijingjing/p/10907244.html" target="_blank" rel="noopener">https://www.cnblogs.com/chuijingjing/p/10907244.html</a>)</p><p>如果是刚启动zookeeper报出这个错误，然后不再不错，那就是正常现象。是由于有的节点启动，而有的节点还没有启动，这段时间已经启动的节点就会去努力寻找没有启动的节点，就会报出这样的错误。这是一种正常现象，无需多虑。</p><p>如果启动很长时间之后还在报错，可以尝试：<br>修改每个节点的zoo.cfg文件中的相对应的server.x=0.0.0.0:2888:3888</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># master:</span>server.1<span class="token operator">=</span>0.0.0.0:2888:3888server.2<span class="token operator">=</span>slave1:2888:3888server.3<span class="token operator">=</span>slave2:2888:3888<span class="token comment" spellcheck="true"># slave1:</span>server.1<span class="token operator">=</span>master:2888:3888server.2<span class="token operator">=</span>0.0.0.0:2888:3888server.3<span class="token operator">=</span>slave2:2888:3888<span class="token comment" spellcheck="true"># slave2:</span>server.1<span class="token operator">=</span>master:2888:3888server.2<span class="token operator">=</span>slave1:2888:3888server.3<span class="token operator">=</span>0.0.0.0:2888:3888</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装镜像</title>
      <link href="2021/01/04/docker/an-zhuang-jing-xiang/"/>
      <url>2021/01/04/docker/an-zhuang-jing-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><p>参考：<a href="https://www.jianshu.com/p/8ccd712e2599" target="_blank" rel="noopener">Docker快速搭建Kafka 1.x集群</a><br>windows下，安装docker时默认安装了docker-compose，可以执行测试：</p><pre class=" language-bash"><code class="language-bash">docker-compose -v</code></pre><h2 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h2><pre class=" language-bash"><code class="language-bash">version: <span class="token string">'2'</span>services:  zookeeper:    image: <span class="token string">"zookeeper"</span>    hostname: <span class="token string">"zookeeper.local"</span>    container_name: <span class="token string">"zookeeper"</span>    <span class="token comment" spellcheck="true">#设置网络别名</span>    networks:      local:        aliases:          - <span class="token string">"zookeeper.local"</span>  kafka:    image: <span class="token string">"wurstmeister/kafka"</span>    hostname: <span class="token string">"kafka.local"</span>    container_name: <span class="token string">"kafka"</span>    ports:      - <span class="token string">"9092:9092"</span>    networks:      local:        aliases:          - <span class="token string">"kafka.local"</span>    environment:      KAFKA_ADVERTISED_HOST_NAME: kafka.local      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181<span class="token comment" spellcheck="true">#设置网络，名为local</span>networks:  local:    driver: bridge</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><pre class=" language-bash"><code class="language-bash">进入kafka容器docker <span class="token function">exec</span> -it kafka /bin/bash<span class="token function">cd</span> /opt/kafka_2.12-2.4.0/bin/<span class="token comment" spellcheck="true">#创建topic</span>kafka-console-producer.sh --broker-list kafka:9092 --topic <span class="token function">test</span><span class="token comment" spellcheck="true"># 查看topic，localhost要改成zookeeper容器的名字</span>./kafka-topics.sh --list --zookeeper zookeeper:2181<span class="token comment" spellcheck="true">#生产者生产消息</span>kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="token function">test</span><span class="token comment" spellcheck="true">#消费topic</span>kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test--from-beginning</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 命令</title>
      <link href="2021/01/01/npm/npm/"/>
      <url>2021/01/01/npm/npm/</url>
      
        <content type="html"><![CDATA[<h1 id="重建项目依赖"><a href="#重建项目依赖" class="headerlink" title="重建项目依赖"></a>重建项目依赖</h1><pre class=" language-shell"><code class="language-shell">rm -rf node_modules && npm install --force</code></pre><h1 id="更新项目依赖"><a href="#更新项目依赖" class="headerlink" title="更新项目依赖"></a>更新项目依赖</h1><p>更新后会在package.json中看到变化，<strong>但是可能会造成格式错误，提前做好package.json的备份</strong></p><pre class=" language-shell"><code class="language-shell"> npm audit fix --force</code></pre>]]></content>
      
      
      <categories>
          
          <category> Npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架</title>
      <link href="2020/12/19/java/java-ji-he-kuang-jia/java-ji-he-kuang-jia/"/>
      <url>2020/12/19/java/java-ji-he-kuang-jia/java-ji-he-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="数组和集合的区别"><a href="#数组和集合的区别" class="headerlink" title="数组和集合的区别"></a>数组和集合的区别</h1><ul><li>数组能存放基本数据类型和对象，而集合类存放的都是对象，集合类不能存放基本数据类型。数组和集合存放的对象皆为对象的引用地址。Java集合中实际存放的只是对象的引用，每个集合元素都是一个引用变量，实际内容都放在堆内存或者方法区里。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 数组能存放对象和基本数据类型</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>List<span class="token punctuation">[</span><span class="token punctuation">]</span> listNums<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 集合只能存放引用数据类型</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span>list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>数组大小固定无法动态改变，集合类容量动态改变。</li><li>数组无法判断其中实际存有多少元素，length只告诉了数组的容量，而集合的size()可以确切知道元素的个数</li><li>集合有多种实现方式和不同适用场合，不像数组仅采用顺序表方式</li><li>集合以类的形式存在，具有封装、继承、多态等类的特性，通过简单的方法和属性即可实现各种复杂操作，大大提高了软件的开发效率，而数组不具备这种特征</li></ul><h1 id="Java集合框架图"><a href="#Java集合框架图" class="headerlink" title="Java集合框架图"></a>Java集合框架图</h1><p>椭圆为接口，方形为类，实线为继承，虚线为实现：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="Java集合框架图"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-import</title>
      <link href="2020/12/17/python/python-yu-fa/python-import/"/>
      <url>2020/12/17/python/python-yu-fa/python-import/</url>
      
        <content type="html"><![CDATA[<h1 id="同一包内import"><a href="#同一包内import" class="headerlink" title="同一包内import"></a>同一包内import</h1><p>问题分两种情况</p><ol><li>如果你是自己手动建的文件夹，你可以直接import</li><li>如果你是用pycharm的新建python package，你新建的目录下就会有一个<strong>init</strong>.py文件</li></ol><p>Trie.py文件与<strong>init</strong>.py文件在同一目录NER下，在<strong>init</strong>.py中importTrie.py：</p><pre class=" language-py"><code class="language-py">'''__init__.py '''from NER.Trie import Trie_Ope</code></pre><p>如果仍不能导入，在导包的前面加入这样一段代码:</p><pre class=" language-py"><code class="language-py">import os, syscurrent_dir = os.path.abspath(os.path.dirname(__file__))sys.path.append(current_dir)</code></pre><p>这样导入在部署的时候可能出错，找不到 module NER，解决：将<strong>init</strong>.py文件改成其他的名称，这时这个文件夹就不是python package了，然后右键文件夹选择 mark as Sources root，然后导入：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Trie <span class="token keyword">import</span> Trie_Ope</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树</title>
      <link href="2020/12/17/leetcode/tree/zi-dian-shu/"/>
      <url>2020/12/17/leetcode/tree/zi-dian-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h1><p>又称前缀树，实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">T208Trie</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">TrieNode</span><span class="token punctuation">{</span>        TrieNode <span class="token punctuation">[</span><span class="token punctuation">]</span>nodes<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isLeaf<span class="token punctuation">;</span>        <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nodes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            isLeaf<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> TrieNode root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">T208Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Inserts a word into the trie. */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TrieNode tmpRoot<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmpRoot<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                tmpRoot<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tmpRoot<span class="token operator">=</span>tmpRoot<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tmpRoot<span class="token punctuation">.</span>isLeaf<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** Returns if the word is in the trie. */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TrieNode tmpRoot<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmpRoot<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            tmpRoot<span class="token operator">=</span>tmpRoot<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tmpRoot<span class="token punctuation">.</span>isLeaf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TrieNode tmpRoot<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>prefix<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmpRoot<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            tmpRoot<span class="token operator">=</span>tmpRoot<span class="token punctuation">.</span>nodes<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T208Trie t208Trie<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">T208Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t208Trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t208Trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"hell"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t208Trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"helloa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本相似度</title>
      <link href="2020/12/17/python/nlp/wen-ben-xiang-si-du/"/>
      <url>2020/12/17/python/nlp/wen-ben-xiang-si-du/</url>
      
        <content type="html"><![CDATA[<h1 id="词汇语义相似度"><a href="#词汇语义相似度" class="headerlink" title="词汇语义相似度"></a>词汇语义相似度</h1><h2 id="基于word-net语义相似度计算"><a href="#基于word-net语义相似度计算" class="headerlink" title="基于word_net语义相似度计算"></a>基于word_net语义相似度计算</h2><p>参考：<a href="https://blog.csdn.net/loveitlovelife/article/details/102582942" target="_blank" rel="noopener">WordNet介绍及相似度计算</a><br> 获取单词的所有含义：</p><pre class=" language-py"><code class="language-py"> print(wn.synsets("dog")) >>>[Synset('dog.n.01'), Synset('frump.n.01'), Synset('dog.n.03'),  Synset('cad.n.01'), Synset('frank.n.02'), Synset('pawl.n.01'),  Synset('andiron.n.01'), Synset('chase.v.01')]</code></pre><p> 计算语义相似度：</p><pre class=" language-py"><code class="language-py">dog = wn.synset('dog.n.01')cat = wn.synset('cat.n.01')# 当dog词性为'dog.n.01'与'cat.n.01'的语义相似度similar = dog.path_similarity(cat)print(similar)>>>0.2</code></pre><h1 id="字面相似度"><a href="#字面相似度" class="headerlink" title="字面相似度"></a>字面相似度</h1><h2 id="FuzzyWuzzy"><a href="#FuzzyWuzzy" class="headerlink" title="FuzzyWuzzy"></a>FuzzyWuzzy</h2><p>FuzzyWuzzy是字符串模糊匹配工具</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> fuzzywuzzy</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class=" language-py"><code class="language-py">from fuzzywuzzy import fuzzfrom fuzzywuzzy import process# 简单匹配fuzz.ratio("this is a test", "this is a test!")>>> 97# 非完全匹配（Partial Ratio）fuzz.partial_ratio("this is a test", "this is a test!")>>> 100# 忽略顺序匹配（Token Sort Ratio）fuzz.ratio("fuzzy wuzzy was a bear", "wuzzy fuzzy was a bear")>>> 91fuzz.token_sort_ratio("fuzzy wuzzy was a bear", "wuzzy fuzzy was a bear")>>> 100# 去重子集匹配（Token Set Ratio）fuzz.token_sort_ratio("fuzzy was a bear", "fuzzy fuzzy was a bear")>>> 84fuzz.token_set_ratio("fuzzy was a bear", "fuzzy fuzzy was a bear")>>> 100# 从候选字符串中选出最相似的字符串choices = ["Atlanta Falcons", "New York Jets", "New York Giants", "Dallas Cowboys"]process.extract("new york jets", choices, limit=2)>>> [('New York Jets', 100), ('New York Giants', 78)]process.extractOne("cowboys", choices)>>>  ("Dallas Cowboys", 90)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-操作mongo</title>
      <link href="2020/12/16/python/python-yu-fa/python-cao-zuo-mongo/"/>
      <url>2020/12/16/python/python-yu-fa/python-cao-zuo-mongo/</url>
      
        <content type="html"><![CDATA[<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> pymongo</code></pre><h1 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h1><pre class=" language-py"><code class="language-py">from pymongo import MongoClient# 无密码：mongo_client = MongoClient(host='localhost', port=27017)# 使用管理员的用户名和密码myclient = pymongo.MongoClient('mongodb://root:123456@localhost:27017/')</code></pre><p>使用数据库密码：</p><pre class=" language-py"><code class="language-py">mongo_client = MongoClient(host='ip', port=34843)# 数据库名db = mongo_client.my_mongodbdb.authenticate('username', 'xxxxx')# collection名称collection = db.student# 打印前3条数据for document in collection.find().limit(3):    print(document)</code></pre><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><pre class=" language-python"><code class="language-python">json_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span>  <span class="token operator">//</span>将json字符串转成字典mongo_collection<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>json_dict<span class="token punctuation">)</span></code></pre><h1 id="加载mongo数据到pandas"><a href="#加载mongo数据到pandas" class="headerlink" title="加载mongo数据到pandas"></a>加载mongo数据到pandas</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> json<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdmongo_client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'xxx'</span><span class="token punctuation">,</span> port<span class="token operator">=</span>xxx<span class="token punctuation">)</span>db <span class="token operator">=</span> mongo_client<span class="token punctuation">.</span>db_namedb<span class="token punctuation">.</span>authenticate<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'pwd'</span><span class="token punctuation">)</span>collection <span class="token operator">=</span> db<span class="token punctuation">.</span>studentdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list<span class="token punctuation">(</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-Mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令</title>
      <link href="2020/12/16/docker/docker-ming-ling/"/>
      <url>2020/12/16/docker/docker-ming-ling/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载镜像</span>docker pull 镜像名<span class="token comment" spellcheck="true"># 查看镜像</span>docker images<span class="token comment" spellcheck="true"># 删除镜像</span>docker rmi -f （强制删除参数） 镜像名/id</code></pre><p>运行容器：</p><pre class=" language-bash"><code class="language-bash">docker run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><p>参数：<br>OPTIONS说明：</p><pre class=" language-bash"><code class="language-bash">-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；-d: 后台运行容器，并返回容器ID；-i: 以交互模式运行容器，通常与 -t 同时使用；-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；-P: 随机端口映射，容器内部端口随机映射到主机的高端口-p: 指定端口映射，格式为：主机<span class="token punctuation">(</span>宿主<span class="token punctuation">)</span>端口:容器端口--name<span class="token operator">=</span><span class="token string">"nginx-lb"</span><span class="token keyword">:</span> 为容器指定一个名称；名称是唯一的，不可重名--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；-h <span class="token string">"mars"</span><span class="token keyword">:</span> 指定容器的hostname；-e username<span class="token operator">=</span><span class="token string">"ritchie"</span><span class="token keyword">:</span> 设置环境变量；--env-file<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>: 从指定文件读入环境变量；--cpuset<span class="token operator">=</span><span class="token string">"0-2"</span> or --cpuset<span class="token operator">=</span><span class="token string">"0,1,2"</span><span class="token keyword">:</span> 绑定容器到指定CPU运行；-m :设置容器使用内存最大值；--net<span class="token operator">=</span><span class="token string">"bridge"</span><span class="token keyword">:</span> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；--link<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>: 添加链接到另一个容器；--expose<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>: 开放一个端口或一组端口；--volume , -v: 绑定一个卷--rm：--rm选项不能与-d同时使用，在容器退出后，自动执行docker <span class="token function">rm</span> -v</code></pre><p>查看正在运行的容器：</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span>已停止但仍存在的容器docker <span class="token function">ps</span> -a</code></pre><p>进入容器：</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it 容器id /bin/bash</code></pre><p>退出容器（容器不会停止）</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 删除容器</span>docker <span class="token function">rm</span> 容器id或容器name<span class="token comment" spellcheck="true"># 强制删除容器db01、db02</span>docker <span class="token function">rm</span> -f db01 db02</code></pre><h1 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h1><pre class=" language-bash"><code class="language-bash">docker logs <span class="token punctuation">[</span>options<span class="token punctuation">]</span> 容器名<span class="token comment" spellcheck="true"># 打印容器mytest应用后10行的内容：</span>docker logs --tail<span class="token operator">=</span><span class="token string">"10"</span> mytest</code></pre><table><thead><tr><th>名字</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>–details</td><td></td><td>显示提供给日志的额外细节</td></tr><tr><td>–follow或-f</td><td></td><td>按日志输出</td></tr><tr><td>–since</td><td></td><td>从某个时间开始显示，例如2013-01-02T13:23:37</td></tr><tr><td>–tail</td><td>all</td><td>从日志末尾多少行开始显示</td></tr><tr><td>–timestamps或-t</td><td></td><td>显示时间戳</td></tr><tr><td>–until</td><td></td><td>打印某个时间以前的日志，例如 2013-01-02T13:23:37</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="2020/12/16/linux/ming-ling/linux-ming-ling/"/>
      <url>2020/12/16/linux/ming-ling/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="文件vi"><a href="#文件vi" class="headerlink" title="文件vi"></a>文件vi</h1><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>shift+:进入命令模式，在冒号后面写命令。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><pre class=" language-bash"><code class="language-bash">/输入要搜索的字符串或者字符，然后回车 （从前往后找） 按下n找下一个匹配项按下N找上一个匹配项?要搜索的字符串或者字符 （从后往前找）命令模式下输入:noh 退出查找高亮显示</code></pre><h3 id="批量替换"><a href="#批量替换" class="headerlink" title="批量替换"></a>批量替换</h3><p>文件内全部替换：</p><pre class=" language-bash"><code class="language-bash">%s<span class="token comment" spellcheck="true">#abc#def#g（用def替换文件中所有的abc）</span></code></pre><p>文件内局部替换：<br>把10行到50行内的“abc”全部替换成“def”</p><pre class=" language-bash"><code class="language-bash">10,50s<span class="token comment" spellcheck="true">#abc#def#g（如文件内有#，可用/替换,:%s/abc/def/g）</span></code></pre><p>以上命令如果在g后面再加上c，则会在替换之前显示提示符给用户确认（conform）是否需要替换。 比如：</p><pre class=" language-bash"><code class="language-bash">:%s<span class="token comment" spellcheck="true">#linuxidc.com#linuxidc.net#gc</span></code></pre><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看状态</span>firewall-cmd --state <span class="token comment" spellcheck="true"># 开启防火墙</span>systemctl start firewalld.service <span class="token comment" spellcheck="true"># 关闭防火墙</span>systemctl stop firewalld.service  <span class="token comment" spellcheck="true"># 重启</span>firewall-cmd --reload  <span class="token comment" spellcheck="true">#禁止firewall开机启动</span>systemctl disable firewalld.service<span class="token comment" spellcheck="true">#开机启用 </span>systemctl <span class="token function">enable</span> firewalld  </code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Flask应用到Docker</title>
      <link href="2020/12/16/docker/bu-shu-flask-ying-yong-dao-docker/"/>
      <url>2020/12/16/docker/bu-shu-flask-ying-yong-dao-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="导出与项目有关的依赖"><a href="#导出与项目有关的依赖" class="headerlink" title="导出与项目有关的依赖"></a>导出与项目有关的依赖</h1><h2 id="安装pipreqs"><a href="#安装pipreqs" class="headerlink" title="安装pipreqs"></a>安装pipreqs</h2><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> pipreqs</code></pre><h2 id="导出项目依赖包"><a href="#导出项目依赖包" class="headerlink" title="导出项目依赖包"></a>导出项目依赖包</h2><p>进入到项目根目录，如果用conda装的python，需要切换到项目的python环境：</p><pre class=" language-bash"><code class="language-bash">activate python36</code></pre><p>然后执行：</p><pre class=" language-bash"><code class="language-bash">pipreqs ./</code></pre><p>成功后在项目根目录下生成requirements.txt文件。</p><p>如果报下面错误：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/flask%E9%83%A8%E7%BD%B2%E5%88%B0docker-%E5%AE%89%E8%A3%85pipreqs.png" alt="安装pipreqs"><br>按照路径提示，修改pipreqs.py文件：<br>将第74行中的</p><pre class=" language-py"><code class="language-py">encoding=encoding改为：encoding='utf-8'</code></pre><p>再次执行 pipreqs ./</p><p>新环境下安装</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> -r requirements.txt</code></pre><h1 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h1><p>项目目录结构：</p><pre class=" language-bash"><code class="language-bash">D:.│- Dockerfile│- requirements.txt│- nltk_data└─NER        key_words.txt        main.py        __init__.py</code></pre><p>Dockerfile：</p><pre class=" language-bash"><code class="language-bash">FROM python:3.6<span class="token comment" spellcheck="true"># 暴露5001端口</span>EXPOSE 5001<span class="token comment" spellcheck="true"># 将NER目录下（不包括NER目录）所有内容复制到 /usr/src/app目录下</span>ADD  ./NER /usr/src/app<span class="token comment" spellcheck="true"># 将nltk所需的词典加入到容器的/usr/local/lib/nltk_data目录下</span>ADD ./nltk_data /usr/local/lib/nltk_data<span class="token comment" spellcheck="true"># WORKDIR设置将要安装应用程序的默认目录,在Dockerfile中的任何剩余命令执行以及运行容器时，其当前目录都会为这个默认目录</span>WORKDIR /usr/src/app<span class="token comment" spellcheck="true"># COPY将文件从你的机器复制到容器文件系统，后面的点就代表上面设置的目录</span>COPY requirements.txt <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 安装依赖</span>RUN  pip <span class="token function">install</span> -r ./requirements.txt -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com<span class="token comment" spellcheck="true"># 启动应用</span>CMD <span class="token punctuation">[</span><span class="token string">"python"</span>,<span class="token string">"/usr/src/app/main.py"</span><span class="token punctuation">]</span></code></pre><h2 id="copy和add的区别"><a href="#copy和add的区别" class="headerlink" title="copy和add的区别"></a>copy和add的区别</h2><p>COPY指令和ADD指令都可以将主机上的资源复制或加入到容器镜像中，COPY指令和ADD指令的唯一区别在于是否支持从远程URL获取资源。COPY指令只能从执行docker build所在的主机上读取资源并复制到镜像中。而ADD指令还支持通过URL从远程服务器读取资源并复制到镜像中。</p><h1 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h1><p>将项目上传到docker服务器，进入工程目录，执行：</p><blockquote><p>注意：镜像名不能有大写字母</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 最后还有一个点</span>docker build -t org_struct_pre:latest <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 如果远程开启了远程访问，在本地可以部署，不用将项目上传至服务器，执行：</span>docker -H IP:2375 build -t org_struct_pre:latest <span class="token keyword">.</span></code></pre><p>运行容器：</p><pre class=" language-bash"><code class="language-bash">docker run -itd -p 5001:5001 --name org_struct_pre（容器名） org_struct_pre<span class="token punctuation">(</span>镜像名<span class="token punctuation">)</span></code></pre><p>进入容器：</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it 7a31796e9cb2 /bin/bash</code></pre><p>进入到/usr/local/lib目录，可以看到所有词典。可以正常使用nltk：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/%E9%83%A8%E7%BD%B2flask-docker-nltk.png" alt="容器中使用nltk"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-函数</title>
      <link href="2020/12/16/python/python-yu-fa/han-shu/"/>
      <url>2020/12/16/python/python-yu-fa/han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>函数参数中 *args 和 **kwargs 都是传参的方式，区别如下：</p><p>*args 的返回值是一个元组，准确的说是将传入的参数中不确定的参数以元组的形式保存下来</p><p>**kwargs的返回值是一个字典，即，传参时必须以确定的键值对来传入，及以键值对保存下来，用字典方式获取</p><pre class=" language-py"><code class="language-py">def test1(x, *args):    print("x: ", x)    print('args: ', args)    returndef test2(x, **kwargs):    print("x: ", x)    print('kwargs: ', kwargs)    returnif __name__ == '__main__':    test1(1)    test1(1, 2, 3, 4)    test2(5)    test2(1, a=1, b=2, c=3)</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/python%E8%AF%AD%E6%B3%95%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0.png" alt="参数传入"></p><h1 id="查看一个对象的方法"><a href="#查看一个对象的方法" class="headerlink" title="查看一个对象的方法"></a>查看一个对象的方法</h1><pre class=" language-py"><code class="language-py">dir([1,2])</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask-GraphQL的使用</title>
      <link href="2020/12/15/python/web-ying-yong-flask/flask-graphql-de-shi-yong/"/>
      <url>2020/12/15/python/web-ying-yong-flask/flask-graphql-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h1><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> flask</code></pre><p>其他可能用到的包（非必须）：</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> sqlalchemy graphene flask-graphql flask-sqlalchemy graphene-sqlalchemy<span class="token comment" spellcheck="true"># MySQL</span>pip <span class="token function">install</span> mysqlclient<span class="token comment" spellcheck="true"># PostgreSQL</span>pip <span class="token function">install</span> psycopg2-binary</code></pre><h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><pre class=" language-py"><code class="language-py">from flask import Flaskapp = Flask(__name__)@app.route('/')def hello_world():    return 'Hello World!'if __name__ == '__main__':    app.run()</code></pre><p>打开浏览器访问<a href="http://127.0.0.1:5000/，浏览页面上将出现Hello" target="_blank" rel="noopener">http://127.0.0.1:5000/，浏览页面上将出现Hello</a> World!。</p><h2 id="Flask打开远程访问"><a href="#Flask打开远程访问" class="headerlink" title="Flask打开远程访问"></a>Flask打开远程访问</h2><blockquote><p>部署到服务器(或者docker)的时候一定要打开,否则访问不到服务.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></blockquote><pre><code># host=0.0.0.0即打开远程访问# 将服务端口改为4704app.run(host=&#39;0.0.0.0&#39;,port=4704)</code></pre><pre><code># Flask结合graphql## 安装：```bashpip install graphene flask-graphql</code></pre><h2 id="然后编写query-和schema："><a href="#然后编写query-和schema：" class="headerlink" title="然后编写query 和schema："></a>然后编写query 和schema：</h2><pre class=" language-py"><code class="language-py">from flask import Flaskfrom graphene import ObjectType, String, Schema, Int,Fieldfrom flask_graphql import GraphQLViewclass User(ObjectType):    id = Int()    name = String()class Result(ObjectType):    code = Int()    msg = String()class Query(ObjectType):    # this defines a Field `hello` in our Schema with a single Argument `name`    hello = String(name=String(default_value="stranger"))    goodbye = Field(Result)    # our Resolver method takes the GraphQL context (root, info) as well as    # Argument (name) for the Field and returns data for the query Response    # resolve需要加上固定前缀resolve_    def resolve_hello(root, info, name):        return f'Hello: {name} !'    def resolve_goodbye(root, info):        return Result(1, "success")    users = List(User, id=Int(required=True))    user = Field(User, id=Int(required=True))    def resolve_user(self, info, id):        """返回单个实例对象"""        return User(id=id, name='zhangsan')    def resolve_users(self, info, id):        """返回列表对象"""        return [User(id=id, name='lisi')]schema = Schema(query=Query)# app = Flask(__name__)# app.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema, graphiql=True))def create_app():    app = Flask(__name__)    app.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema, graphiql=True))    # Optional, for adding batch query support (used in Apollo-Client)    # app.add_url_rule('/graphql/batch', view_func=GraphQLView.as_view('graphql', schema=schema, batch=True))    @app.route("/")    def hello_world():        return "Hello World!"    return appif __name__ == '__main__':    app = create_app()    # 默认端口号5000    app.run()    # 指定端口号5001    # app.run(port=5001)</code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>打开：<a href="http://127.0.0.1:5000/graphql" target="_blank" rel="noopener">http://127.0.0.1:5000/graphql</a></p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/flask-graphql-%E8%BF%90%E8%A1%8C.png" alt="graphiql测试"></p><h2 id="参数传递和获取"><a href="#参数传递和获取" class="headerlink" title="参数传递和获取"></a>参数传递和获取</h2><p>参考：</p><ul><li><a href="https://www.cnblogs.com/gaojy/p/11678191.html" target="_blank" rel="noopener">详解Python Graphql</a></li><li><a href="https://haofly.net/python-graphql/" target="_blank" rel="noopener">Python使用graphene-sqlalchemy提供GraphQL接口</a></li></ul><pre class=" language-py"><code class="language-py">class NER_RESULT(ObjectType):    word_list = List(String)class Query(ObjectType):    # ner是方法名    # Feild表示返回一个非基本类型的对象，    # 第一个参数NER_RESULT表示方法的返回值类型    # 后面的是方法需要的参数    ner = Field(NER_RESULT, text=String())    # 如果需要两个参数:    # ner = Field(NER_RESULT, id=String(),text=String())    # 设置传入参数列表，args    def resolve_ner(self, info, **args):        text = args['text']        print(text)        words = word_tokenize(text)        print(words)        key_words = [word.strip() for word in open("key_words.txt", "r", encoding="utf-8").readlines()]        word_list = []        ner_result = NER_RESULT(word_list)        return ner_result</code></pre><p>访问：</p><pre class=" language-bash"><code class="language-bash">query<span class="token punctuation">{</span>     ner<span class="token punctuation">(</span>text:<span class="token string">"When Jobs arrived back at Apple, it had a conventional structure for a company of its size and scope."</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    wordList  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="info参数"><a href="#info参数" class="headerlink" title="info参数"></a>info参数</h3><p>info表示请求的上下文，可以在查询语中添加context：</p><pre class=" language-py"><code class="language-py">class Query(ObjectType):     hello = String(name=String(default_value="gaojy", required=True))     @staticmethod     def resolve_hello(root, info, name):        # 通过info可获取上下文内容        print(info.context.get('company'))        return f"hello word -- {name}"schema = Schema(query=Query, mutation=MyMutations)if __name__ == '__main__':    query_string = '''{ hello(name:"gaojiayi") }'''    # 1 execute中添加context    result = schema.execute(query_string, context={'company': 'baidu'})    print(result.data['hello'])</code></pre><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><h3 id="返回基本类型"><a href="#返回基本类型" class="headerlink" title="返回基本类型"></a>返回基本类型</h3><pre class=" language-py"><code class="language-py">class Query(graphene.ObjectType):    add = graphene.Int(        description='calculate a + b then return the result.',        a=graphene.Int(),        b=graphene.Int())    @staticmethod    def resolve_add(obj, info, a=0, b=0, **kwargs):        return a + b</code></pre><p>请求：</p><pre class=" language-bash"><code class="language-bash">requests.post<span class="token punctuation">(</span><span class="token string">'http://localhost:5000/graphql'</span>, json<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'query'</span><span class="token keyword">:</span> <span class="token string">'{add(a: 4, b: 5)}'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="返回列表"><a href="#返回列表" class="headerlink" title="返回列表"></a>返回列表</h3><pre class=" language-py"><code class="language-py">class Query(graphene.ObjectType):    rand = graphene.List(        graphene.Int,        description='get some random numbers from 0 to 100',        count=graphene.Int(),    )    @staticmethod    def resolve_rand(obj, info, count=1, **kwargs):        return [random.randint(0, 100) for i in range(count)]</code></pre><h1 id="后台运行-Python脚本"><a href="#后台运行-Python脚本" class="headerlink" title="后台运行 Python脚本"></a>后台运行 Python脚本</h1><pre class=" language-python"><code class="language-python">nohup python <span class="token operator">-</span>u ProductCatDataImport<span class="token punctuation">.</span>py <span class="token operator">></span> out<span class="token punctuation">.</span>log <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-容器</title>
      <link href="2020/12/15/python/python-yu-fa/rong-qi/"/>
      <url>2020/12/15/python/python-yu-fa/rong-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>同时遍历 list中的序号和值：</p><pre class=" language-py"><code class="language-py">for i, val in enumerate(list):    print ("序号：%s   值：%s" % (i , val))</code></pre><p>两个列表合并：</p><pre class=" language-py"><code class="language-py"># 将list2的内容加到list1中list1.extend(list2)</code></pre><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p> 获取字典的keySet 和valueSet</p><pre class=" language-py"><code class="language-py"> # 获取所有键dict.keys()# 获取所有值dict.values()</code></pre><p>添加和获取：</p><pre class=" language-py"><code class="language-py"># 如果键不存在于字典中，将会添加键并将值设为defaultdict.setdefault(key, default=None)# 返回指定键的值，如果值不在字典中返回default值dict.get(key, default=None)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-文件操作</title>
      <link href="2020/12/15/python/python-yu-fa/wen-jian/"/>
      <url>2020/12/15/python/python-yu-fa/wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h1><pre class=" language-py"><code class="language-py">try:   # 'w'表示写，'r'表示读，'a'(append)标识追加模式   my_file=open('file.txt','w')except Exception as e:   print(e)# 可以同时打开多个文件with open('./data/code.txt', 'r', encoding='utf-8') as read_file,open('./data/write.txt', 'w', encoding='utf-8') as write_file:    contents=read_file.readlines()    print(contents)</code></pre><p>一行一行地读用readline()，读取停用词表：</p><pre class=" language-py"><code class="language-py">key_words = [word.strip() for word in open("stop_words.txt", "r", encoding="utf-8").readlines()]</code></pre><h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><p>从文件中加载json：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"../config/record.json"</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> load_f<span class="token punctuation">:</span>   load_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>load_f<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nlp-nltk使用</title>
      <link href="2020/12/15/python/nlp/nlp-ying-wen-chu-li-gong-ju-nltk/"/>
      <url>2020/12/15/python/nlp/nlp-ying-wen-chu-li-gong-ju-nltk/</url>
      
        <content type="html"><![CDATA[<h1 id="Nltk"><a href="#Nltk" class="headerlink" title="Nltk"></a>Nltk</h1><h2 id="安装nltk"><a href="#安装nltk" class="headerlink" title="安装nltk"></a>安装nltk</h2><pre class=" language-py"><code class="language-py">pip install nltk</code></pre><p>然后使用的时候报错：</p><p>Resource punkt not found. Please use the NLTK Downloader to obtain the resource:<br>&gt;&gt;&gt; import nltk &gt;&gt;&gt; nltk.download(‘punkt’)<br>使用提示代码下载词典：</p><pre class=" language-py"><code class="language-py">nltk.download('punkt')</code></pre><p>发现下载不下来，报错：getaddrinfo failed。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>参考：<a href="https://blog.csdn.net/weixin_39712314/article/details/106173356" target="_blank" rel="noopener">nltk_data LookupError</a><br>到：<a href="http://www.nltk.org/nltk_data/" target="_blank" rel="noopener">nltk_data</a>中下载punkt包，然后解压到D:\nltk_data\tokenizers目录下即可。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>参考：<a href="https://www.cnblogs.com/eksnew/p/12909814.html" target="_blank" rel="noopener">离线安装nltk_data</a></p><p>打开<a href="https://github.com/nltk/nltk_data" target="_blank" rel="noopener">Github-nltk_data</a>，将第二个文件夹“packages”下载下来，下载Github文件夹可以用chrome插件：GitZip for github. 右键文件夹右边空白处就可以下载了<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/nlp%E4%BE%9D%E8%B5%96%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-nltk.png" alt="packages文件夹内容"></p><p>然后，将packages中的所有内容拷贝到以下目录中任意一个：</p><pre class=" language-bash"><code class="language-bash">- <span class="token string">'C:\\Users\\cunzhang/nltk_data'</span>    - <span class="token string">'D:\\Anaconda\\nltk_data'</span>    - <span class="token string">'D:\\Anaconda\\share\\nltk_data'</span>    - <span class="token string">'D:\\Anaconda\\lib\\nltk_data'</span>    - <span class="token string">'C:\\Users\\cunzhang\\AppData\\Roaming\\nltk_data'</span>    - <span class="token string">'C:\\nltk_data'</span>    - <span class="token string">'D:\\nltk_data'</span>    - <span class="token string">'E:\\nltk_data'</span></code></pre><p>linux中的目录是：</p><pre class=" language-bash"><code class="language-bash">Searched in:    - <span class="token string">'/home/hadoopcj/nltk_data'</span>    - <span class="token string">'/usr/share/nltk_data'</span>    - <span class="token string">'/usr/local/share/nltk_data'</span>    - <span class="token string">'/usr/lib/nltk_data'</span>    - <span class="token string">'/usr/local/lib/nltk_data'</span>    - <span class="token string">'/home/hadoopcj/nltk_data'</span>    - <span class="token string">''</span></code></pre><p>然后进入到”D:\nltk_data\tokenizers”目录，<strong>将punkt.zip解压</strong> 即可。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/nlp%E4%BE%9D%E8%B5%96%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-nltk-punkt.png" alt="packages文件夹内容"></p><h2 id="nltk英文分词"><a href="#nltk英文分词" class="headerlink" title="nltk英文分词"></a>nltk英文分词</h2><pre class=" language-py"><code class="language-py">from nltk import word_tokenizeparagraph = "When Jobs arrived back at Apple, it had a conventional structure for a company of its size and scope. It was divided into business units, each with its own P&L responsibilities."words = word_tokenize(paragraph)print(words)</code></pre><h2 id="词性标注"><a href="#词性标注" class="headerlink" title="词性标注"></a>词性标注</h2><p>nltk中的词性：</p><table><thead><tr><th>tag</th><th>mean</th><th>释义</th><th>例子</th></tr></thead><tbody><tr><td>CC</td><td>Coordinating conjunction</td><td>连词</td><td>and, or,but, if, while,although</td></tr><tr><td>CD</td><td>Cardinal number</td><td>数词</td><td>twenty-four, fourth, 1991,14:24</td></tr><tr><td>DT</td><td>Determiner</td><td>限定词</td><td>the, a, some, most,every, no</td></tr><tr><td>EX</td><td>Existential there</td><td>存在量词</td><td>there, there’s</td></tr><tr><td>FW</td><td>Foreign word</td><td>外来词</td><td>dolce, ersatz, esprit, quo,maitre</td></tr><tr><td>IN</td><td>Preposition or subordinating conjunction</td><td>介词连词</td><td>on, of,at, with,by,into, under</td></tr><tr><td>JJ</td><td>Adjective</td><td>形容词</td><td>new,good, high, special, big, local</td></tr><tr><td>JJR</td><td>Adjective, comparative</td><td>比较级词语</td><td>bleaker braver breezier briefer brighter brisker</td></tr><tr><td>JJS</td><td>Adjective, superlative</td><td>最高级词语</td><td>calmest cheapest choicest classiest cleanest clearest</td></tr><tr><td>LS</td><td>List item marker</td><td>标记</td><td>A A. B B. C C. D E F First G H I J K</td></tr><tr><td>MD</td><td>Modal</td><td>情态动词</td><td>can cannot could couldn’t</td></tr><tr><td>NN</td><td>Noun, singular or mass</td><td>名词</td><td>year,home, costs, time, education</td></tr><tr><td>NNS</td><td>Noun, plural</td><td>名词复数</td><td>undergraduates scotches</td></tr><tr><td>NNP</td><td>Proper noun, singular</td><td>专有名词</td><td>Alison,Africa,April,Washington</td></tr><tr><td>NNPS</td><td>Proper noun, plural</td><td>专有名词复数</td><td>Americans Americas Amharas Amityvilles</td></tr><tr><td>PDT</td><td>Predeterminer</td><td>前限定词</td><td>all both half many</td></tr><tr><td>POS</td><td>Possessive ending</td><td>所有格标记</td><td>’ ‘s</td></tr><tr><td>PRP</td><td>Personal pronoun</td><td>人称代词</td><td>hers herself him himself hisself</td></tr><tr><td>PRP$</td><td>Possessive pronoun</td><td>所有格</td><td>her his mine my our ours</td></tr><tr><td>RB</td><td>Adverb</td><td>副词</td><td>occasionally unabatingly maddeningly</td></tr><tr><td>RBR</td><td>Adverb, comparative</td><td>副词比较级</td><td>further gloomier grander</td></tr><tr><td>RBS</td><td>Adverb, superlative</td><td>副词最高级</td><td>best biggest bluntest earliest</td></tr><tr><td>RP</td><td>Particle</td><td>虚词</td><td>aboard about across along apart</td></tr><tr><td>SYM</td><td>Symbol</td><td>符号</td><td>% &amp; ’ ” ”. ) )</td></tr><tr><td>TO</td><td>to</td><td>词to</td><td>to</td></tr><tr><td>UH</td><td>Interjection</td><td>感叹词</td><td>Goodbye Goody Gosh Wow</td></tr><tr><td>VB</td><td>Verb, base form</td><td>动词</td><td>ask assemble assess</td></tr><tr><td>VBD</td><td>Verb, past tense</td><td>动词过去式</td><td>dipped pleaded swiped</td></tr><tr><td>VBG</td><td>Verb, gerund or present participle</td><td>动词现在分词</td><td>telegraphing stirring focusing</td></tr><tr><td>VBN</td><td>Verb, past participle</td><td>动词过去分词</td><td>multihulled dilapidated aerosolized</td></tr><tr><td>VBP</td><td>Verb, non-3rd person singular present</td><td>动词现在式非第三人称时态</td><td>predominate wrap resort sue</td></tr><tr><td>VBZ</td><td>Verb, 3rd person singular present</td><td>动词现在式第三人称时态</td><td>bases reconstructs marks</td></tr><tr><td>WDT</td><td>Wh-determiner</td><td>Wh限定词</td><td>who,which,when,what,where,how</td></tr><tr><td>WP</td><td>Wh-pronoun</td><td>WH代词</td><td>that what whatever</td></tr><tr><td>WP$</td><td>Possessive wh-pronoun</td><td>WH代词所有格</td><td>whose</td></tr><tr><td>WRB</td><td>Wh-adverb</td><td>WH副词</td><td></td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分词后的词列表</span>paragraph<span class="token operator">=</span><span class="token string">'When Jobs arrived back at Apple, it had a conventional structure for a company of its size and scope. It was divided into business units,'</span>words <span class="token operator">=</span> word_tokenize<span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 词性标注</span>pos_tag <span class="token operator">=</span> nltk<span class="token punctuation">.</span>pos_tag<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pos_tag<span class="token punctuation">)</span></code></pre><p>获取一个词的词性也得用列表：</p><pre class=" language-py"><code class="language-py">t=nltk.pos_tag(['news'])print(t)</code></pre><h1 id="Nltk的语料库"><a href="#Nltk的语料库" class="headerlink" title="Nltk的语料库"></a>Nltk的语料库</h1><p>语料库在D:\nltk_data\corpora下：</p><p>参考：<a href="https://www.cnblogs.com/itdyb/p/5899616.html" target="_blank" rel="noopener">NLTK文本语料库</a></p><ul><li>古腾堡语料库：gutenberg，包含古腾堡项目电子文本档案的一小部分文本。该项目目前大约有36000本免费的电子图书。</li><li>网络聊天语料库：webtext、nps_chat；这部分代表的是非正式的语言，包括Firefox交流论坛、在纽约无意听到的对话、《加勒比海盗》电影剧本。个人广告以及葡萄酒的评论。</li><li>布朗语料库：brown；布朗语意库是第一个百万词集的英语电子语料库，有布朗大学于1961年创建，包含500多个不同来源的文本，按照文本类型，如新闻、社评等分类。布朗语料库是一个研究文体之间系统性差异的资源。</li><li>路透社语料库：reuters；路透社语料库包括10788个新闻文档，共计130万字。这些文档分成了90个主题，按照‘训练’和‘测试’分为两组。因此，编号为‘test/14826’的文档属于测试组。这样分割是为了方便运用训练和测试算法的自动检验文档的主题。</li><li>就职演说语料库：inaugural；是55个文本的集合，每个文本都是一个总统的演讲。这个集合的显著特征就是时间维度。</li><li>标注文本语料库和其他语言语料库</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda 命令</title>
      <link href="2020/12/15/python/conda/conda-ming-ling/"/>
      <url>2020/12/15/python/conda/conda-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h1><h2 id="指定下载源"><a href="#指定下载源" class="headerlink" title="指定下载源"></a>指定下载源</h2><p>pip install xxx Could not fetch URL <a href="https://pypi.tuna.tsinghua.edu.cn/simple/pipenv/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/pipenv/</a><br>解决，常用的镜像地址有：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 阿里云</span>http://mirrors.aliyun.com/pypi/simple/<span class="token comment" spellcheck="true"># 中国科技大学</span>https://pypi.mirrors.ustc.edu.cn/simple/<span class="token comment" spellcheck="true"># 豆瓣</span>http://pypi.douban.com/simple/<span class="token comment" spellcheck="true"># 清华大学</span>https://pypi.tuna.tsinghua.edu.cn/simple/<span class="token comment" spellcheck="true"># 中国科学技术大学</span>http://pypi.mirrors.ustc.edu.cn/simple/</code></pre><p>安装时指定下载源：</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> xxx -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</code></pre><h2 id="指定安装包的版本"><a href="#指定安装包的版本" class="headerlink" title="指定安装包的版本"></a>指定安装包的版本</h2><pre class=" language-py"><code class="language-py"># 安装conda install numpy=1.9.3# 更新conda update numpy=1.9.3</code></pre><h1 id="查看虚拟环境"><a href="#查看虚拟环境" class="headerlink" title="查看虚拟环境"></a>查看虚拟环境</h1><pre class=" language-bash"><code class="language-bash">conda info --envs</code></pre><p>创建python环境:</p><p>先在conda中创建一个名为python2的环境，并下载对应版本python2.7</p><pre class=" language-bash"><code class="language-bash">conda create --name python27 python<span class="token operator">=</span>2.7或conda create -n python36 python<span class="token operator">=</span>3.6.6conda create -n yourenvname python<span class="token operator">=</span>x.x anaconda <span class="token punctuation">(</span>还会创建与python版本有关的anaconda打包库<span class="token punctuation">)</span></code></pre><p>激活（切换）python环境</p><pre><code>activate yourenvname</code></pre><p>退出虚拟环境：<br>deactivate myenv </p><p>删除虚拟环境</p><pre><code>conda remove -n yourenvname --all</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hithesis 工大论文模板</title>
      <link href="2020/12/14/write/latex/hithesis/hithesis-gong-da-lun-wen-mo-ban/"/>
      <url>2020/12/14/write/latex/hithesis/hithesis-gong-da-lun-wen-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="中期报告"><a href="#中期报告" class="headerlink" title="中期报告"></a>中期报告</h1><h2 id="hithesis"><a href="#hithesis" class="headerlink" title="hithesis"></a>hithesis</h2><p>模板下载地址：<a href="https://github.com/dustincys/hithesis" target="_blank" rel="noopener">hithesis</a></p><p>将zip包下载解压，根目录为：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hithesis-zip.png" alt="解压后的目录"></p><h3 id="生成样式文件"><a href="#生成样式文件" class="headerlink" title="生成样式文件"></a>生成样式文件</h3><p>然后在根目录下执行（在github项目介绍中）：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># windows:</span>lualatex hithesis.ins<span class="token comment" spellcheck="true"># mac/linux</span>latex hithesis.ins<span class="token comment" spellcheck="true"># make</span><span class="token function">make</span> cls</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hithesis-%E7%94%9F%E6%88%90%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6.png" alt="生成的样式文件"></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>生成好格式后，进入到示例文件夹中</p><pre class=" language-bash"><code class="language-bash">examples├── hitart│   ├── reportplus  %深圳校区博士中期报告│   └── reports     %除去深圳校区博士中期报告的一校三区本硕博开题、中期报告└── hitbook    ├── chinese     %一校三区本硕博毕业论文以及博后出站报告    └── english     %一校三区本硕博英文版毕业论文</code></pre><p>在hitart/reports目录下执行：</p><pre class=" language-bash"><code class="language-bash">xelatex -shell-escape report.texbibtex reportxelatex -shell-escape report.texxelatex -shell-escape report.tex</code></pre><p>或者用vscode打开该目录，直接执行。</p><p>最后生成的开题中期报告格式不太正确：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hithesis-%E4%B8%AD%E6%9C%9F%E6%A0%B7%E5%BC%8F.png" alt="hithesis生成的样式-本部硕士中期"><br>因此换用hithesis-alpha。</p><h2 id="windows下使用docker"><a href="#windows下使用docker" class="headerlink" title="windows下使用docker"></a>windows下使用docker</h2><pre><code>第一步，下载tinytex-hithesis镜像，  docker pull dustincys/tinytex-hithesis:latest第二步，在hithesis根目录下执行抽取格式  docker run --rm -i  -v $(pwd):/home/runner dustincys/tinytex-hithesis:latest latex hithesis.ins  Windows下改为：  docker run --rm -i  -v D:\Document\Hit\HitThesis\Thesis\hithesis-newVersion-master\hithesis:/home/runner dustincys/tinytex-hithesis:latest latex hithesis.ins  -v 冒号前面是本地项目路径，后面是容器内路径第三步，在hithesis毕业论文文件夹hitbook或报告文件夹report下执行以下命令进行编译  docker run --rm -i  -v $(pwd):/home/runner dustincys/tinytex-hithesis:latest make thesis    Windows下改为：  docker run --rm -i  -v D:\Document\Hit\HitThesis\Thesis\hithesis-newVersion-master\hithesis\examples\hitbook\chinese:/home/runner dustincys/tinytex-hithesis:latest make thesis  docker run --rm -i  -v $(pwd):/home/runner dustincys/tinytex-hithesis:latest make report或者编译文档  docker run --rm -i  -v $(pwd):/home/runner dustincys/tinytex-hithesis:latest make doc</code></pre><h2 id="hithesis-alpha"><a href="#hithesis-alpha" class="headerlink" title="hithesis-alpha"></a>hithesis-alpha</h2><p>下载地址：<a href="https://github.com/Regulust/hithesis-alpha#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">hithesis-alpha</a></p><h3 id="生成样式文件-1"><a href="#生成样式文件-1" class="headerlink" title="生成样式文件"></a>生成样式文件</h3><p>同hithesis一样，在根目录下运行：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># windows:</span>lualatex hithesis.ins<span class="token comment" spellcheck="true"># mac/linux</span>latex hithesis.ins</code></pre><h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><p>用vscode直接打开根目录，编辑main.tex，修改documentclass的参数：</p><pre class=" language-bash"><code class="language-bash">\documentclass<span class="token punctuation">[</span>newtxmath<span class="token operator">=</span>true,newgeometry<span class="token operator">=</span>two,capcenterlast<span class="token operator">=</span>true,subcapcenterlast<span class="token operator">=</span>true,openright<span class="token operator">=</span>false,absupper<span class="token operator">=</span>true,type<span class="token operator">=</span>master,stage<span class="token operator">=</span>zhongqi,campus<span class="token operator">=</span>harbin<span class="token punctuation">]</span><span class="token punctuation">{</span>hithesis<span class="token punctuation">}</span></code></pre><p>生成的样式如下：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hithesis-alpha-%E6%A0%B7%E5%BC%8F.png" alt="hithesis-alpha生成的样式-本部硕士中期"></p><h1 id="学位论文"><a href="#学位论文" class="headerlink" title="学位论文"></a>学位论文</h1><p>使用 hithesis的example/hitbook即可。<br>在thesis.tex中修改：</p><pre class=" language-bash"><code class="language-bash">\documentclass<span class="token punctuation">[</span>fontset<span class="token operator">=</span>fandol,type<span class="token operator">=</span>master,campus<span class="token operator">=</span>harbin<span class="token punctuation">]</span><span class="token punctuation">{</span>hithesisbook<span class="token punctuation">}</span></code></pre><h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><p>以下命令打开官方文档：</p><pre class=" language-bash"><code class="language-bash">texdoc hithesis</code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>将“文献[x]”中的[x]表示为正常的文本，而不是引用格式上标：</p><pre class=" language-bash"><code class="language-bash">\inlinecite<span class="token punctuation">{</span>key<span class="token punctuation">}</span></code></pre><p>直接用vscode 编译时有时不会产生参考文献，用下面命令编译一遍即可：</p><pre class=" language-bash"><code class="language-bash">xelatex -shell-escape thesis.texbibtex thesisxelatex -shell-escape thesis.texxelatex -shell-escape thesis.tex</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="更改标号样式"><a href="#更改标号样式" class="headerlink" title="更改标号样式"></a>更改标号样式</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用方括号阿拉伯数字标号</span>\begin<span class="token punctuation">{</span>enumerate<span class="token punctuation">}</span><span class="token punctuation">[</span>label<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>\arabic*<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>     \item xxxxx   %<span class="token punctuation">[</span>1<span class="token punctuation">]</span> xxxxx    \item yyyyyy  %<span class="token punctuation">[</span>2<span class="token punctuation">]</span> yyyyyy    \item zzzzz   %<span class="token punctuation">[</span>3<span class="token punctuation">]</span> zzzzz\end<span class="token punctuation">{</span>enumerate<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 使用圆括号阿拉伯数字标号</span>\begin<span class="token punctuation">{</span>enumerate<span class="token punctuation">}</span><span class="token punctuation">[</span>label<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>\arabic*<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span>     \item xxxxx   %<span class="token punctuation">(</span>1<span class="token punctuation">)</span> xxxxx    \item yyyyyy  %<span class="token punctuation">(</span>2<span class="token punctuation">)</span> yyyyyy    \item zzzzz   %<span class="token punctuation">(</span>3<span class="token punctuation">)</span> zzzzz\end<span class="token punctuation">{</span>enumerate<span class="token punctuation">}</span></code></pre><p>在\begin{enumerate}[label={[\arabic*]}]后面跟\setlength{\itemsep}{0pt}可以设置当前列表环境里item条目之间的间距。</p><p>\arabic可以替换为\roman、\Roman、\Alph 或 \alph来表示小写罗马数字、大写罗马数字、大写字母编号 或 小写字母编号。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="设置三级目录"><a href="#设置三级目录" class="headerlink" title="设置三级目录"></a>设置三级目录</h3><p>默认的目录只显示两级，在main.tex中设置显示三级目录，在\document{}后添加\setcounter{tocdepth}{3}：</p><pre><code>\documentclass[newtxmath=true,newgeometry=two,capcenterlast=true,subcapcenterlast=true,openright=false,absupper=true,type=master,stage=zhongqi,campus=harbin]{hithesis}% 设置三级目录\setcounter{tocdepth}{3}</code></pre><h3 id="去掉目录中摘要和第一章之间的空行"><a href="#去掉目录中摘要和第一章之间的空行" class="headerlink" title="去掉目录中摘要和第一章之间的空行"></a>去掉目录中摘要和第一章之间的空行</h3><p>参考：<a href="https://github.com/dustincys/hithesis/issues/65" target="_blank" rel="noopener">issues-目录格式问题</a></p><p>在主文件中中设置：</p><pre><code>\documentclass[fontset=fandol,type=master,campus=harbin,tocblank=false]{hithesisbook}% tocblank=true|false%   含义：目录中第一章之前，是否加一行空白。缺省值为true。</code></pre><h2 id="去掉图表标题中的冒号"><a href="#去掉图表标题中的冒号" class="headerlink" title="去掉图表标题中的冒号"></a>去掉图表标题中的冒号</h2><p>当增加了一些自定义设置后，原来的图表标题可能会发生变化，可以按照下面修改：</p><pre><code>\usepackage{caption}% 设置表格\captionsetup[table]{labelsep=space}% 设置图片，skip表示图片和标题之间距离\captionsetup[figure]{font=small,skip=0pt}% 全部设置\captionsetup{font={small},labelsep=space}</code></pre><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="修改输入输出样式"><a href="#修改输入输出样式" class="headerlink" title="修改输入输出样式"></a>修改输入输出样式</h3><p>中文latex模式下，更改Input为输入，更改Output为输出的方法：<strong>在算法内部插入</strong>：</p><pre><code>\SetKwInOut{KIN}{输入}\SetKwInOut{KOUT}{输出}</code></pre><p>例如：</p><pre><code>\begin{algorithm}[!ht]    \SetKwInOut{KIN}{输入}    \SetKwInOut{KOUT}{输出}    \caption{xxxx方法}    \label{department_fun}    \KIN{data,s,dic}    \KOUT{vec}    \lIf{s 为空串}{直接返回}    len$\gets$ s.length()\;    ss$\gets$s.toCharArray() \;    dp$\gets$ new boolean[len][len] \;    ans$\gets$ &quot;&quot;+ss[0] \;    maxLen$\gets$1 \;    \For{i from 0 To len}{        dp[i][i]$\gets$true \;    }\end{algorithm}</code></pre><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><table><thead><tr><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>\;</td><td>在行末添加分号，并自动换行</td></tr><tr><td>\caption{}</td><td>插入标题</td></tr><tr><td>\KwData{输入信息}</td><td>效果：“Data:输入信息”</td></tr><tr><td>\KwIn{输入信息}</td><td>效果：“Input:输入信息”</td></tr><tr><td>\KwOut{输出信息}</td><td>效果：“Output:输出信息”</td></tr><tr><td>\KwResult{输出信息}</td><td>效果：“Result:输出信息”</td></tr><tr><td>\tcc{注释}</td><td>效果：/* 注释*/</td></tr><tr><td>\tcp{注释}</td><td>效果：// 注释</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hithesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graphql的使用</title>
      <link href="2020/12/10/graphql/graphql-de-shi-yong/"/>
      <url>2020/12/10/graphql/graphql-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h1><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.graphql-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphql-java-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mountcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphql-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.graphql-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphiql-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.graphql-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphql-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>graphiql便于调试接口和查看文档，项目启动后访问：<a href="http://ip:port/graphiql" target="_blank" rel="noopener">http://ip:port/graphiql</a></p><h1 id="添加Query和Type"><a href="#添加Query和Type" class="headerlink" title="添加Query和Type"></a>添加Query和Type</h1><p>在resources根目录下新建root.graphqls文件和schema.graphqls 文件，名字不可更换</p><h2 id="root-graphqls"><a href="#root-graphqls" class="headerlink" title="root.graphqls"></a>root.graphqls</h2><p>root.graphqls中用于定义接口：</p><pre class=" language-java"><code class="language-java">type Query<span class="token punctuation">{</span>    # 启动任务    <span class="token function">startEnterpriseRelationshipAnalyse</span><span class="token punctuation">(</span>module<span class="token operator">:</span>String<span class="token punctuation">,</span>organizationName<span class="token operator">:</span>String<span class="token punctuation">,</span>organizationUrl<span class="token operator">:</span>String<span class="token punctuation">,</span>userId<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span> StartProcessResult    # 获取当前正在执行的任务名称    <span class="token function">currentTask</span><span class="token punctuation">(</span>processInstanceId<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ProcessCurrentTaskResult    # 获取所有任务    <span class="token function">taskList</span><span class="token punctuation">(</span>page<span class="token operator">:</span>Int<span class="token punctuation">,</span> size<span class="token operator">:</span>Int <span class="token punctuation">)</span><span class="token operator">:</span> OrganizationTaskPageResult    # 获取所有已经完成的任务    <span class="token function">completedTaskList</span><span class="token punctuation">(</span>page<span class="token operator">:</span>Int<span class="token punctuation">,</span> size<span class="token operator">:</span>Int <span class="token punctuation">)</span><span class="token operator">:</span>OrganizationTaskPageResult<span class="token punctuation">}</span></code></pre><p>在graphqls文件中写的注释会体现在<a href="http://ip:port/graphiql" target="_blank" rel="noopener">http://ip:port/graphiql</a> 中的文档上。<br>该文件中定义了4个接口，小括号内是接口需要传入的参数，冒号后面是接口的返回值。</p><ul><li>Result：返回一个Result的数据类型</li><li>[AnalysisJsonResponse]，返回一个 AnalysisJsonResponse类型的列表。</li><li>ProcessCurrentTaskResult返回一个ProcessCurrentTaskResult类型</li></ul><p>Result和 ProcessCurrentTaskResult等类型都在schema.graphqls中定义。</p><h2 id="schema-graphqls"><a href="#schema-graphqls" class="headerlink" title="schema.graphqls"></a>schema.graphqls</h2><pre class=" language-java"><code class="language-java">type Result<span class="token punctuation">{</span>    code<span class="token operator">:</span> Int    msg<span class="token operator">:</span> String<span class="token punctuation">}</span>type StartProcessResult <span class="token punctuation">{</span>    result<span class="token operator">:</span> Result    taskId<span class="token operator">:</span> String    processInstanceId<span class="token operator">:</span> String<span class="token punctuation">}</span># 获取当前正在执行的任务名称结果type ProcessCurrentTaskResult<span class="token punctuation">{</span>    result<span class="token operator">:</span> Result    processTaskId<span class="token operator">:</span> String<span class="token punctuation">}</span>type PageInfo<span class="token punctuation">{</span>    total<span class="token operator">:</span> Int    current<span class="token operator">:</span> Int    size<span class="token operator">:</span> Int<span class="token punctuation">}</span>type OrganizationTaskResult<span class="token punctuation">{</span>    taskId<span class="token operator">:</span> String    processCode<span class="token operator">:</span>String    processId<span class="token operator">:</span>String    userId<span class="token operator">:</span>String    organizationName<span class="token operator">:</span> String    organizationUrl<span class="token operator">:</span> String    module<span class="token operator">:</span> String    progress<span class="token operator">:</span> String    status<span class="token operator">:</span> String    createTime<span class="token operator">:</span> String    endTime<span class="token operator">:</span> String<span class="token punctuation">}</span>type OrganizationTaskPageResult<span class="token punctuation">{</span>    # <span class="token punctuation">[</span>OrganizationTaskResult<span class="token punctuation">]</span>表示 OrganizationTaskResult 类型的列表    list<span class="token operator">:</span> <span class="token punctuation">[</span>OrganizationTaskResult<span class="token punctuation">]</span>    pageInfo<span class="token operator">:</span> PageInfo    result<span class="token operator">:</span> Result<span class="token punctuation">}</span></code></pre><p>schema中定义的类型要编写对应的Entity类，方便后面构建对象。</p><h1 id="定义Resolver"><a href="#定义Resolver" class="headerlink" title="定义Resolver"></a>定义Resolver</h1><p>在root.graphqls中定义的接口要在resolver中实现，否则会报错。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>coxautodev<span class="token punctuation">.</span>graphql<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>GraphQLQueryResolver<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>topveda<span class="token punctuation">.</span>cloudactiviti<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>topveda<span class="token punctuation">.</span>cloudactiviti<span class="token punctuation">.</span>service<span class="token punctuation">.</span>EnterpriseRaService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>topveda<span class="token punctuation">.</span>cloudactiviti<span class="token punctuation">.</span>service<span class="token punctuation">.</span>OrganizationTaskService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivitiResolver</span> <span class="token keyword">implements</span> <span class="token class-name">GraphQLQueryResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EnterpriseRaService enterpriseRaService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrganizationTaskService organizationTaskService<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String deploymentId<span class="token operator">=</span>enterpriseRaService<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deploymentId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> StartProcessResult <span class="token function">startEnterpriseRelationshipAnalyse</span><span class="token punctuation">(</span>String module<span class="token punctuation">,</span> String organizationName<span class="token punctuation">,</span> String organizationUrl<span class="token punctuation">,</span> String userId<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//....</span>        <span class="token keyword">return</span> StartProcessResult<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">taskId</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">processInstanceId</span><span class="token punctuation">(</span>processInstanceId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ProcessCurrentTaskResult <span class="token function">currentTask</span><span class="token punctuation">(</span>String processInstanceId<span class="token punctuation">)</span><span class="token punctuation">{</span>        String currentTaskId<span class="token operator">=</span>enterpriseRaService<span class="token punctuation">.</span><span class="token function">getCurrentTask</span><span class="token punctuation">(</span>processInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ProcessCurrentTaskResult<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">processTaskId</span><span class="token punctuation">(</span>currentTaskId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ProcessLastTaskResult <span class="token function">lastFinishedTask</span><span class="token punctuation">(</span>String processInstanceId<span class="token punctuation">)</span><span class="token punctuation">{</span>        String lastFinishedTaskId<span class="token operator">=</span>enterpriseRaService<span class="token punctuation">.</span><span class="token function">getLastFinishedTask</span><span class="token punctuation">(</span>processInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ProcessLastTaskResult<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">processTaskId</span><span class="token punctuation">(</span>lastFinishedTaskId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> OrganizationTaskPageResult <span class="token function">taskList</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> organizationTaskService<span class="token punctuation">.</span><span class="token function">getTaskListByPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取所有已经完成的任务</span>    <span class="token keyword">public</span> OrganizationTaskPageResult <span class="token function">completedTaskList</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> organizationTaskService<span class="token punctuation">.</span><span class="token function">getCompletedTaskListByPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h1><p>运行程序，访问<a href="http://ip:port/graphiql：" target="_blank" rel="noopener">http://ip:port/graphiql：</a><br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/graphiql.png" alt="graphiql测试接口"><br>打开右侧的query，会看到接口文档，有接口名称，参数和返回值类型<br>可以根据自己需要的返回值定义访问形式，上图中只返回result的msg属性（<strong>按需返回</strong>），如果需要返回result的code属性，写为：</p><pre class=" language-bash"><code class="language-bash">currentTask<span class="token punctuation">(</span>processInstanceId:<span class="token string">"e00ca85a-360e-11eb-9ca6-809599575c52"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  result<span class="token punctuation">{</span>    msg    code  <span class="token punctuation">}</span>  processTaskId<span class="token punctuation">}</span></code></pre><p>然后点击左上角的运行按钮即可运行接口。</p><h2 id="返回自定义对象列表"><a href="#返回自定义对象列表" class="headerlink" title="返回自定义对象列表"></a>返回自定义对象列表</h2><p>如果需要返回自定义的对象列表，以上面定义的completedTaskList为例：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>  completedTaskList<span class="token punctuation">(</span>page:1,size:10<span class="token punctuation">)</span><span class="token punctuation">{</span>    list<span class="token punctuation">{</span>      taskId      processCode    <span class="token punctuation">}</span>    pageInfo<span class="token punctuation">{</span>      total      current      size    <span class="token punctuation">}</span>    result<span class="token punctuation">{</span>      code    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Graphql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>部署springboot项目到docker</title>
      <link href="2020/12/10/docker/bu-shu-springboot-xiang-mu-dao-docker/"/>
      <url>2020/12/10/docker/bu-shu-springboot-xiang-mu-dao-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="idea插件部署"><a href="#idea插件部署" class="headerlink" title="idea插件部署"></a>idea插件部署</h1><h2 id="idea中安装docker插件"><a href="#idea中安装docker插件" class="headerlink" title="idea中安装docker插件"></a>idea中安装docker插件</h2><p>在setting-plugin中搜索并安装docker：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/idea-docker%E6%8F%92%E4%BB%B6.png" alt="安装docker插件"></p><h2 id="连接远程docker服务器"><a href="#连接远程docker服务器" class="headerlink" title="连接远程docker服务器"></a>连接远程docker服务器</h2><p>在build，docker中添加一个连接，并填写好服务器ip和端口：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/idea-%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8Bdocker.png" alt="连接远程docker"></p><h2 id="将springboot项目打包"><a href="#将springboot项目打包" class="headerlink" title="将springboot项目打包"></a>将springboot项目打包</h2><p>点击上面的skip test按钮，可以跳过测试：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/idea-%E6%89%93%E5%8C%85.png" alt="将项目打成jar包"></p><h2 id="编写DockerFile"><a href="#编写DockerFile" class="headerlink" title="编写DockerFile"></a>编写DockerFile</h2><p>DockerFile位置与target文件夹同级目录，DockerFile中的路径是相对路径：</p><p> 指定了临时文件目录为/tmp，其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp，ENTRYPOINT 执行项目 cloud-activiti.jar。为了缩短 Tomcat 启动时间，添加一个系统属性指向 “/dev/./urandom” 作为 Entropy Source</p><pre class=" language-bash"><code class="language-bash">FROM java:8<span class="token comment" spellcheck="true">#暴露容器的9023端口</span>EXPOSE 9023<span class="token comment" spellcheck="true">#将复制指定的cloud-activiti-0.0.1-SNAPSHOT.jar为容器中的cloud-activiti.jar，相当于拷贝到容器中取了个别名</span>ADD target/cloud-activiti-0.0.1-SNAPSHOT.jar /cloud-activiti.jarVOLUME /tmpRUN <span class="token function">bash</span> -c <span class="token string">'touch /cloud-activiti.jar'</span>ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/cloud-activiti.jar"</span><span class="token punctuation">]</span></code></pre><h2 id="部署和运行"><a href="#部署和运行" class="headerlink" title="部署和运行"></a>部署和运行</h2><p>点击Edit Configuration：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/%E9%83%A8%E7%BD%B2%E5%92%8C%E6%89%A7%E8%A1%8Cdocker.png" alt="编辑配置"><br>点击左上角加号，“+”：</p><p>选择DockerFile：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/docker-files-configuration.png" alt="配置configuration"><br>选择要部署的目标docker服务器，dockerfile文件，端口号，tag等：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/run-configuration.png" alt="部署和运行"><br>然后点击run，即可部署到docker服务器中。</p><h1 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h1><h2 id="上传Dockerfile和jar包"><a href="#上传Dockerfile和jar包" class="headerlink" title="上传Dockerfile和jar包"></a>上传Dockerfile和jar包</h2><p>将Dockerfile和 jar包上传到docker服务器，注意dockerfile中jar包的路径，决定了Dockerfile和jar包的相对位置。</p><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><p>执行下面命令， 看好，最后面有个”.”点！</p><pre class=" language-bash"><code class="language-bash">docker build -t springbootdemo4docker <span class="token keyword">.</span></code></pre><p>-t 参数是指定此镜像的tag名</p><h2 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h2><p>制作完成后通过docker images命令可以查看制作的镜像，然后启动：</p><pre class=" language-bash"><code class="language-bash">docker run -d -p 8080:8085 springbootdemo4docker</code></pre><p>-d参数是让容器后台运行<br>-p 是做端口映射，此时将服务器中的8080端口映射到容器中的8085(项目中端口配置的是8085)端口</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://docker服务器ip地址:8080/" target="_blank" rel="noopener">http://docker服务器ip地址:8080/</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows cmd</title>
      <link href="2020/12/08/windows/windows-cmd/"/>
      <url>2020/12/08/windows/windows-cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="查看并解除端口占用"><a href="#查看并解除端口占用" class="headerlink" title="查看并解除端口占用"></a>查看并解除端口占用</h2><p>查看占用4000端口的进程：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -ano<span class="token operator">|</span>findstr <span class="token string">"4000"</span></code></pre><p>停止进程，PID为LISTENING后的数字）</p><pre class=" language-bash"><code class="language-bash">taskkill /pid <span class="token string">"PID"</span> /F</code></pre><p>如果出现：“无法终止 PID 为 xxx 的进程”，用管理员方式打开cmd，再次终止进程。</p><h2 id="打开防火墙端口"><a href="#打开防火墙端口" class="headerlink" title="打开防火墙端口"></a>打开防火墙端口</h2><p>在管理员模式下，打开2375端口，支持远程访问：</p><pre class=" language-bash"><code class="language-bash">netsh advfirewall firewall add rule name<span class="token operator">=</span><span class="token string">"docker_daemon"</span> dir<span class="token operator">=</span>in action<span class="token operator">=</span>allow protocol<span class="token operator">=</span>TCP localport<span class="token operator">=</span>2375</code></pre><h2 id="无法访问github"><a href="#无法访问github" class="headerlink" title="无法访问github"></a>无法访问github</h2><p>能正常访问其他网站，却访问不了GitHub，怀疑是本地DNS解析出现问题。<br>访问：<a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo" target="_blank" rel="noopener">fastly.net.ipaddress.com</a></p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/fastly.net.ip.png" alt="github.global.ssl.fastly.net 的ip"></p><p>访问：<a href="https://github.com.ipaddress.com/#ipinfo" target="_blank" rel="noopener">github 的ip</a></p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/github.ip.png" alt="github 的ip"></p><p>打开C:\Windows\System32\drivers\etc\hosts，添加：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#github</span>140.82.112.3  github.com199.232.69.194 github.global.ssl.fastly.net   </code></pre><p>然后在cmd中运行（可选）：</p><pre class=" language-bash"><code class="language-bash">ipconfig /flushdns </code></pre><h2 id="将文本中的unicode-编码转换称中文"><a href="#将文本中的unicode-编码转换称中文" class="headerlink" title="将文本中的unicode 编码转换称中文"></a>将文本中的unicode 编码转换称中文</h2><p>参考：<a href="https://blog.csdn.net/qq_36260974/article/details/106822180" target="_blank" rel="noopener">一条指令将文件中的unicode编码转为中文</a></p><p>下图是文本中所含的Unicode码：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/unicodeTxt.png" alt="文本中含有Unicode码"><br>在文件所在目录cmd执行：</p><pre class=" language-bash"><code class="language-bash">native2ascii -reverse -encoding UTF-8 htmls1.json  htmls2.json</code></pre><p>转换后的结果：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/unicodeTxt2Chinese.png" alt="将Unicode码转成中文"> </p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP和UDP协议</title>
      <link href="2020/12/08/ji-suan-ji-wang-luo/chuan-shu-ceng/tcp-he-udp-xie-yi/"/>
      <url>2020/12/08/ji-suan-ji-wang-luo/chuan-shu-ceng/tcp-he-udp-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h1><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP特点：</p><ul><li>面向连接</li><li>点对点，每条连接只能有两个端点</li><li>可靠交付，保证数据在传输过程中无差错、不丢失、不重复</li><li>全双工通信，连接两端都能发送和接收信息。</li><li>面向字节流。</li></ul><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>三次握手用于建立TCP连接，需要在客户端与服务器之间交换三个TCP报文段。<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/TCP-build-connect.png" alt="TCP三次握手建立连接"></p><p>建立连接的过程：</p><ul><li>客户端A打算建立TCP连接时，向服务器B发出连接请求报文段，首部中的同步位SYN=1，选择一个初始序号x。此时，A进入【同步已发送状态】表示正尝试建立连接。SYN报文段不能携带数据，需要消耗一个序列号。</li><li>B收到连接请求报文段后，如果同意连接，向A发送确认。在报文段中将同步位SYN和ACK都置1，确认号是x+1，然后选择一个初始序号seq=y，此时B进入【同步已接收状态】。这个报文段也不能携带数据，需要消耗一个序列号。</li><li>A收到B的确认后，还要向B给出确认。确认报文的ACK置1，确认号ack=y+1，序号是x+1。ACK报文段可以携带数据，如果不携带数据则不消耗序号，下一个报文的序号仍是x+1。此时A进入已建立连接状态，当B收到A的确认后，也进入建立连接状态。</li></ul><h3 id="为什么要三次握手？"><a href="#为什么要三次握手？" class="headerlink" title="为什么要三次握手？"></a>为什么要三次握手？</h3><ul><li>TCP连接是可靠的，需要确保服务器和客户端都具备接收和发送数据的能力。<ul><li>第一次握手证明客户端具备发送信息的能力，<br>第二次握手证明服务端具备接收和发送信息的能力<br>第三次握手证明客户端具备接收信息的能力（只有接收到了信息才会向服务端发送确认信息）<br>如果是两次就建立连接，服务端无法确认客户端是否具备接收信息的能力; 如果四次或更多的次的话，就造成了重复，前面服务端已经同意了建立连接，并且做好了连接准备，就没必要再次发送同意报文了</li></ul></li><li>防止因网络堵塞造成服务器忙等，造成资源浪费的情况。<ul><li>如果是两次的话，考虑这样一种情形，客户端第一次发送的连接请求因网络堵塞而没有到达服务器，当到达了超时重传时间后，客户端仍没有收到服务器的确认报文，就会发送第二次连接请求，这时服务端收到了该请求，并发送了确认信息，这时候连接建立；</li><li>过一段时间后，被网络堵塞的第一次连接请求也到达了服务端，服务器接收后就发送了确认信息，此时建立了连接并为该链接分配了资源，等待客户端发送信息，而客户端并不会处理这个连接，因为它已经通过超时重传建立了连接并处理了自己信息，所以服务端就会忙等，造成了服务端的资源浪费。</li></ul></li></ul><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>通信结束后，通信双方都可释放连接。释放前，A、B双方都处于连接已建立状态，假设A主动关闭TCP连接。<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/tcp-free-conn.png" alt="TCP三次握手建立连接"></p><ul><li>A把final报文段首部的终止控制位FIN置1，其序号seq=u，此时A进入终止等待1状态。Final报文段即使不携带数据，也要消耗一个序号。</li><li>B收到Final报文段后发出确认，ACK置1，确认号是ack=u+1，序号是v。然后B进入关闭等待状态。此时TCP连接处于半关闭状态，即A没有数据要发送，但是B发送的数据A仍要接收，B到A方向的连接没有关闭。A收到来自B的确认后进入终止等待2状态，等待B发送连接释放报文段。</li><li>当B发送完数据之后，向A发送Final报文段，FIN置1，ACK置1，序号为w，确认号u+1。此时B进入最后确认状态。</li><li>A收到B的Final报文后，必须对此发出确认，ACK置1，确认号ack=w+1，序号是u+1。然后进入到时间等待状态，必须等待2个MSL【1个MSL后，A发送的确认到达B，再等一个MSL，保证如果B重传了Final，这个Final在1个MSL也能到达A】（MSL是最长报文段寿命，即报文段在网络中存在的最长时间）后，A才进入关闭状态。B收到确认后，也进入关闭连接状态。</li></ul><h3 id="为什么需要四次挥手？"><a href="#为什么需要四次挥手？" class="headerlink" title="为什么需要四次挥手？"></a>为什么需要四次挥手？</h3><p>第三次挥手的作用是因为B发送完数据后需要通知A，否则A会一直处于等待接收B数据的状态，这样造成了资源浪费。而第四次挥手是A告诉B收到了请求的确认，如果没有这个确认，B不知道A是否收到了自己发出的请求，会一直重传该请求，所以第四次挥手也是必须的。</p><h3 id="服务器大量出现close-wait的原因"><a href="#服务器大量出现close-wait的原因" class="headerlink" title="服务器大量出现close_wait的原因"></a>服务器大量出现close_wait的原因</h3><p>如果服务器端不执行socket的close()操作，状态就不能由close_wait迁移到last_ack，则系统中会存在很多close_wait状态的连接。</p><h2 id="TCP拥塞避免"><a href="#TCP拥塞避免" class="headerlink" title="TCP拥塞避免"></a>TCP拥塞避免</h2><p><a href="https://www.cnblogs.com/hongdada/p/11206679.html#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">参考-TCP拥塞避免</a></p><h3 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h3><p>慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。发送方让自己的发送窗口等于拥塞窗口。每经过一个传输轮次，拥塞窗口就增加一倍。为了防止拥塞窗口增长过大，还需要设置慢开始门限。</p><h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h3><p>当拥塞窗口增大到慢开始门限时，就改为执行拥塞避免算法，此时拥塞窗口加法增大，就是线性增长，使得网络比较不容易堵塞。</p><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D-%E6%85%A2%E5%BC%80%E5%A7%8B.png" alt="TCP拥塞避免-慢开始"></p><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><p>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。立即重传不会出现超时，发送发也不会误以为出现了网络拥塞。</p><h3 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h3><p>快重传配合使用的还有快恢复算法，当发送方连续收到三个重复确认时，知道丢失了个别报文段，于是不启动慢开始（不把拥塞窗口置为1），而是执行快恢复，把慢开始门限设置为当前拥塞窗口的一半，再将拥塞窗口设置为门限值，然后开始执行拥塞避免。<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D-%E5%BF%AB%E6%81%A2%E5%A4%8D.png" alt="TCP拥塞避免-慢开始"></p><h2 id="如何保证可靠传输"><a href="#如何保证可靠传输" class="headerlink" title="如何保证可靠传输"></a>如何保证可靠传输</h2><ul><li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li><li>校验和： TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li>TCP 的接收端会丢弃重复的数据。</li><li>流量控制： TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li><li>拥塞控制： 当网络拥塞时，减少数据的发送。</li><li>停止等待协议: 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就- 停止发送，等待对方确认。在收到确认后再发下一个分组。 超时重传： 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li></ul><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>TCP采用滑动窗口实现流量控制，以控制发送方发送速率，保证接收方来得及接收。接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><h2 id="TCP粘包问题"><a href="#TCP粘包问题" class="headerlink" title="TCP粘包问题"></a>TCP粘包问题</h2><p><a href="https://www.cnblogs.com/cangqinglang/p/11503057.html" target="_blank" rel="noopener">参考-TCP粘包问题</a><br>TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包，从接收缓冲区来看，后一包数据的头紧接着前一包数据的尾，出现粘包的原因是多方面的，可能是来自发送方，也可能是来自接收方。</p><ol><li>发送方造成的粘包</li></ol><p>&emsp;&emsp;TCP默认使用Nagle算法（主要作用：减少网络中报文段的数量），而Nagle算法主要做两件事：第一是只有上一个分组得到确认，才会发送下一个分组；第二是收集多个小分组，在一个确认到来时一起发送。</p><ol start="2"><li>接收方造成的粘包</li></ol><p>&emsp;&emsp;TCP接收到数据包时，并不会马上交到应用层进行处理，或者说应用层并不会立即处理。TCP将接收到的数据包保存在接收缓存里，然后应用程序主动从缓存读取收到的分组。这样一来，如果TCP接收数据包到缓存的速度大于应用程序从缓存中读取数据包的速度，多个包就会被缓存，应用程序就有可能读取到多个首尾相接粘到一起的包。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSI七层协议</title>
      <link href="2020/12/08/ji-suan-ji-wang-luo/osi-qi-ceng-xie-yi/"/>
      <url>2020/12/08/ji-suan-ji-wang-luo/osi-qi-ceng-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>该层为用户提供常用的应用程序，每个网络应用都对应着不同的协议，例如：FTP负责文件传输，DNS域名协议，SMTP邮件发送协议、POP3邮件接收协议（IMAP邮件接收协议，与POP3的区别在于 POP3 中邮件由客户端管理，而在 IMAP 中邮件由服务器管理）等</p><h2 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h2><p>FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息。</p><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>表示层：确保一个系统的应用层发送的消息可以被另一个系统的应用层读取，编码转换，数据解析，管理数据的加密解密、转换翻译、压缩和解压缩，最小传输单位：表示协议数据单元</p><h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>会话层：在网络中的两节点建立，维持和终止通信，最小传输单位：会话层协议数据单元。SMTP, DNS</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层：为应用程序之间提供端到端的逻辑通信（”端”指源主机和目的主机），处理数据包的错误等传输问题。TCP, UDP协议，传输层数据单位为段。</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网络层：负责点到点（point-to-point）的传输（这里的”点”指主机或路由器）,进行逻辑地址寻址，实现不同网络之间的路径选择，IP 就在网络层。IP, ICMP, ARP, RARP, AKP, UUCP 协议。路由选择最小单位——分组（包）报文。路由器、网关。</p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>数据链路层：对物理层传输的比特流封装成帧，对数据进行差错检测。PPP，STP 协议，交 换机、网桥就处在这一层，最小的传输单位——帧。</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>物理层：在不同设备中传输比特信息，将 0/1 信号与电信号或者光信号互相转化，作用是屏<br>蔽不同的传输媒体和通信手段的差异，使得数据链路层感觉不到这些差异。IEEE 802.2、Ethernet v.2、Internetwork。集线器（hub）、中继器。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png" alt="OSI参考模型"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="2020/12/03/git/git-ming-ling/"/>
      <url>2020/12/03/git/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="关联远程仓库并上传"><a href="#关联远程仓库并上传" class="headerlink" title="关联远程仓库并上传"></a>关联远程仓库并上传</h1><p>首先在github上创建仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init将本地项目工作区的所有文件添加到暂存区<span class="token function">git</span> add <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 可选</span><span class="token punctuation">{</span>    <span class="token function">git</span> config user.email <span class="token string">"2155513297@qq.com"</span>    <span class="token function">git</span> config user.name <span class="token string">"Winds-Y"</span><span class="token punctuation">}</span>    <span class="token function">git</span> commit -m <span class="token string">"firstCommit"</span>  <span class="token punctuation">(</span>若有修改或添加文件执行<span class="token punctuation">)</span>关联远程仓库：origin 为远程仓库名<span class="token function">git</span> remote add origin  https://github.com/Yahtz/TryBmob.git（远程仓库地址）<span class="token comment" spellcheck="true"># 多用户：</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># git remote add origin git@ChangzeYan:ChangzeYan/test.git</span>    <span class="token comment" spellcheck="true"># git remote add origin git@Winds-Y:Winds-Y/test.git</span><span class="token punctuation">}</span><span class="token function">git</span> push -u origin master （若远程仓库有readme.md等本地仓库没有的文件，需要先pull）（git pull origin master --allow-unrelated-histories）或者（git pull --rebase origin master）然后再push</code></pre><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看添加到git的文件</span><span class="token function">git</span> ls-files</code></pre><h2 id="添加文件不成功"><a href="#添加文件不成功" class="headerlink" title="添加文件不成功"></a>添加文件不成功</h2><p>git add出现 “fatal: in unpopulated submodule XXX” 错误<br>在本地仓库如果克隆了其他远程仓库，该远程仓库就会git add失败，解决：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -rf --cached xxxx<span class="token punctuation">(</span>文件夹的名称<span class="token punctuation">)</span><span class="token function">git</span> add xxxx/*</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装与配置</title>
      <link href="2020/12/02/docker/an-zhuang-docker/"/>
      <url>2020/12/02/docker/an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux上的安装与配置"><a href="#Linux上的安装与配置" class="headerlink" title="Linux上的安装与配置"></a>Linux上的安装与配置</h1><p>参考：<a href="https://www.cnblogs.com/yufeng218/p/8370670.html" target="_blank" rel="noopener">CentOS7上安装docker</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。<br>1、通过 uname -r 命令查看你当前的内核版本（若不满足要求可以先升级内核）</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">uname</span> -r</code></pre><p>2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum update</code></pre><p>3、卸载旧版本的docker(如果安装过旧版本的话)</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum remove docker  docker-common docker-selinux docker-engine</code></pre><p>4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2</code></pre><p>5、设置yum源</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>可以查看所有仓库中所有docker版本，并选择特定版本安装</p><pre class=" language-bash"><code class="language-bash">$ yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于repo中默认只开启stable仓库，故这里安装的是最新稳定版</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce</code></pre><p>或者安装指定的版本：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token operator">&lt;</span>FQPN<span class="token operator">></span><span class="token comment" spellcheck="true"># 例如：sudo yum install docker-ce-17.12.0.ce</span></code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动并加入开机启动</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl start docker$ <span class="token function">sudo</span> systemctl <span class="token function">enable</span> docker</code></pre><p>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p><pre class=" language-bash"><code class="language-bash">$ docker version</code></pre><p>如果有报错：</p><pre class=" language-bash"><code class="language-bash">Transaction check error:  <span class="token function">file</span> /usr/bin/docker from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64  <span class="token function">file</span> /usr/bin/docker-containerd from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64  <span class="token function">file</span> /usr/bin/docker-containerd-shim from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64  <span class="token function">file</span> /usr/bin/dockerd from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</code></pre><p>卸载旧版本的包</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</code></pre><p>再次安装：</p><pre class=" language-bash"><code class="language-bash"> yum <span class="token function">install</span> docker-ce</code></pre><h2 id="配置国内镜像"><a href="#配置国内镜像" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h2><p>进入 /etc/docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span></code></pre><p>输入： 网易镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span>,<span class="token string">"https://almtd3fa.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF</code></pre><p>重启docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h2><p>修改Docker配置文件</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">vi</span> /lib/systemd/system/docker.service　</code></pre><p>修改ExecStart为：</p><pre class=" language-bash"><code class="language-bash">ExecStart<span class="token operator">=</span>/usr/bin/dockerd --containerd<span class="token operator">=</span>/run/containerd/containerd.sock</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/docker-%E5%AE%89%E8%A3%85docker-%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE.png" alt="配置远程访问"></p><p>修改daemon.json</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/docker/daemon.json</code></pre><p>添加键值对,2375为默认端口,也可以指定为任意端口</p><pre class=" language-bash"><code class="language-bash"> <span class="token string">"hosts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"0.0.0.0:2375"</span>,<span class="token string">"unix:///var/run/docker.sock"</span><span class="token punctuation">]</span></code></pre><p>重启docker</p><pre class=" language-bash"><code class="language-bash">systemctl daemon-reloadsystemctl restart docker</code></pre><p><strong>开启远程访问后可以在远程主机操作docker</strong><br>要求：操作和被操作的主机都要安装docker</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看镜像</span>docker -H IP:2375 images<span class="token comment" spellcheck="true"># 查看运行中的容器</span>docker -H IP:2375 <span class="token function">ps</span></code></pre><h2 id="升级docker"><a href="#升级docker" class="headerlink" title="升级docker"></a>升级docker</h2><p>卸载docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum remove <span class="token variable"><span class="token variable">$(</span>rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> docker<span class="token variable">)</span></span></code></pre><p>下载最新版本docker</p><pre class=" language-bash"><code class="language-bash">curl -fsSL https://get.docker.com/ <span class="token operator">|</span> sh</code></pre><p>重启docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart docker <span class="token comment" spellcheck="true"># centos 7</span></code></pre><p>再次查看docker版本</p><pre class=" language-bash"><code class="language-bash">$ docker -vDocker version 18.09.3, build 774a1f4</code></pre><h1 id="windows-安装docker"><a href="#windows-安装docker" class="headerlink" title="windows 安装docker"></a>windows 安装docker</h1><h2 id="专业版开启Hyper-V功能"><a href="#专业版开启Hyper-V功能" class="headerlink" title="专业版开启Hyper-V功能"></a>专业版开启Hyper-V功能</h2><p>windows专业版要在打开或关闭windows功能那里开启Hyper-V功能。</p><h2 id="下载docker："><a href="#下载docker：" class="headerlink" title="下载docker："></a>下载docker：</h2><p><a href="https://www.docker.com/get-started" target="_blank" rel="noopener">官网</a><br>安装后，配置环境变量，将:</p><pre class=" language-bash"><code class="language-bash">C:\\Program Files\\Docker\\Docker\\resources</code></pre><p>添加到path中。</p><h2 id="配置国内镜像-1"><a href="#配置国内镜像-1" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h2><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/docker-%E5%AE%89%E8%A3%85docker-windows%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F.png" alt="配置国内镜像"></p><h2 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h2><p>参考：<a href="http://baijiahao.baidu.com/s?id=1652188442217820964&wfr=spider&for=pc" target="_blank" rel="noopener">Windows开启Docker远程访问</a></p><p>先勾选：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/docker-%E5%AE%89%E8%A3%85docker-windows%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE.png" alt="配置Windows远程访问"><br>开启windows防火墙，在管理员模式下：</p><pre class=" language-bash"><code class="language-bash">netsh advfirewall firewall add rule name<span class="token operator">=</span><span class="token string">"docker_daemon"</span> dir<span class="token operator">=</span>in action<span class="token operator">=</span>allow protocol<span class="token operator">=</span>TCP localport<span class="token operator">=</span>2375</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git ignore 文件</title>
      <link href="2020/11/30/git/git-ignore-wen-jian/"/>
      <url>2020/11/30/git/git-ignore-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><p>参考：<a href="https://www.cnblogs.com/wangmo/p/7737109.html" target="_blank" rel="noopener">git设置忽略文件和目录</a></p><h2 id="忽略正则"><a href="#忽略正则" class="headerlink" title="忽略正则"></a>忽略正则</h2><p>忽略*.o文件和 *.a文件：</p><pre class=" language-bash"><code class="language-bash">*.<span class="token punctuation">[</span>oa<span class="token punctuation">]</span></code></pre><p>忽略*.b 和 *.B文件，my.b除外</p><pre class=" language-bash"><code class="language-bash">*.<span class="token punctuation">[</span>bB<span class="token punctuation">]</span><span class="token operator">!</span>my.b</code></pre><p>忽略dbg文件和dbg目录</p><pre class=" language-bash"><code class="language-bash">dbg</code></pre><p>只忽略dbg目录，不忽略dbg文件</p><pre class=" language-bash"><code class="language-bash">dbg/</code></pre><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p><h1 id="删除github中某个文件夹"><a href="#删除github中某个文件夹" class="headerlink" title="删除github中某个文件夹"></a>删除github中某个文件夹</h1><p>参考：<a href="https://blog.csdn.net/wudinaniya/article/details/77508229" target="_blank" rel="noopener">删除文件夹</a><br>在github上只能删除文件，删除文件夹的方式如下：</p><p>在本地仓库：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -r --cached target         <span class="token comment" spellcheck="true"># 删除target文件夹</span><span class="token function">git</span> commit -m <span class="token string">'删除了target文件夹'</span>      <span class="token comment" spellcheck="true"># 提交,添加操作说明</span><span class="token function">git</span> push -u origin master        <span class="token comment" spellcheck="true"># 将本次更改更新到github项目上去</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="2020/11/23/write/markdown/markdown-yu-fa/"/>
      <url>2020/11/23/write/markdown/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="代码块的语言"><a href="#代码块的语言" class="headerlink" title="代码块的语言"></a>代码块的语言</h1><table><thead><tr><th>Shell</th><th>bash,shell</th></tr></thead><tbody><tr><td>C#</td><td>c-sharp,csharp</td></tr><tr><td>CSS</td><td>css</td></tr><tr><td>SASS&amp;SCSS</td><td>sass,scss</td></tr><tr><td>Erlang</td><td>erl,erlang</td></tr><tr><td>Java</td><td>java</td></tr><tr><td>JavaScript</td><td>js,jscript,javascript</td></tr><tr><td>PHP</td><td>php</td></tr><tr><td>Python</td><td>py,python</td></tr><tr><td>Ruby</td><td>ruby,rails,rb</td></tr><tr><td>Scala</td><td>scala</td></tr><tr><td>SQL</td><td>sql</td></tr><tr><td>VisualBasic</td><td>vb,vbnet</td></tr><tr><td>XML</td><td>xml,xhtml</td></tr><tr><td>Swift</td><td>swift</td></tr><tr><td>GO</td><td>go,golang</td></tr></tbody></table><p>将网页上的表格转换成md、latex等的工具：<a href="https://tableconvert.com/" target="_blank" rel="noopener">TableConvert</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容。</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用数字加.加空格，如：</p><pre class=" language-md"><code class="language-md">1. 第一项2. 第二项3. 第三项</code></pre><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>在子列表中的选项前面添加四个空格即可：</p><pre class=" language-md"><code class="language-md">1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素</code></pre><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="段落缩进"><a href="#段落缩进" class="headerlink" title="段落缩进"></a>段落缩进</h1><p>第一种：<br>半方大的空白&amp;ensp;或&amp;#8194;</p><p>全方大的空白&amp;emsp;或&amp;#8195;</p><p>不断行的空白格&amp;nbsp;或&amp;#160;</p><p>第二种：<br>markdown语法支持html语法所以可以用这个，本人倾向这种方式，看起来比较干净。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-indent</span><span class="token punctuation">:</span><span class="token number">2</span>em</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作流</title>
      <link href="2020/11/10/others/activiti/gong-zuo-liu-activiti/"/>
      <url>2020/11/10/others/activiti/gong-zuo-liu-activiti/</url>
      
        <content type="html"><![CDATA[<h1 id="工作流-Activiti"><a href="#工作流-Activiti" class="headerlink" title="工作流-Activiti"></a>工作流-Activiti</h1><h2 id="bpmn插件"><a href="#bpmn插件" class="headerlink" title="bpmn插件"></a>bpmn插件</h2><ul><li><a href="https://blog.csdn.net/qq_33333654/article/details/101202362" target="_blank" rel="noopener">activiti6.0的绘图编辑器操作、使用、汉化</a></li><li>vscode 插件：bpmn editor</li></ul><h2 id="Springboot-依赖"><a href="#Springboot-依赖" class="headerlink" title="Springboot 依赖"></a>Springboot 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.activiti<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activiti-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.1.0.M4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.activiti.dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activiti-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.1.0.M4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>配置数据库连接</p><pre class=" language-sql"><code class="language-sql">spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span>class<span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc:mysql:<span class="token comment" spellcheck="true">//localhost:3306/db_activiti?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&amp;allowPublicKeyRetrieval=true</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span>xxxx<span class="token comment" spellcheck="true"># spring boot 整合activiti默认关闭历史表，手动开启历史表如下：</span>spring<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>history<span class="token operator">-</span>level<span class="token operator">=</span>auditspring<span class="token punctuation">.</span>activiti<span class="token number">.db</span><span class="token operator">-</span>history<span class="token operator">-</span>used<span class="token operator">=</span><span class="token boolean">true</span><span class="token comment" spellcheck="true"># 可选</span><span class="token comment" spellcheck="true">#流程定义bpmn放置路径</span>spring<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>process<span class="token operator">-</span>definition<span class="token operator">-</span>location<span class="token operator">-</span>prefix<span class="token operator">=</span>classpath:<span class="token operator">/</span>process<span class="token operator">/</span><span class="token comment" spellcheck="true">#项目随着spring启动自动部署</span>spring<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span><span class="token keyword">check</span><span class="token operator">-</span>process<span class="token operator">-</span>definitions<span class="token operator">=</span><span class="token boolean">true</span></code></pre><h2 id="改正上述activiti版本创建数据表的bug"><a href="#改正上述activiti版本创建数据表的bug" class="headerlink" title="改正上述activiti版本创建数据表的bug"></a>改正上述activiti版本创建数据表的bug</h2><p>启动应用创建表后，运行：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- 创建用户表</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'联系地址'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账号'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>roles<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">5</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- 填充用户表</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'admincn'</span><span class="token punctuation">,</span> <span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$gw46pmsOVYO.smHYQ2jH.OoXoe.lGP8OStDkHNs/E74GqZDL5K7ki'</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ACTIVITI_ADMIN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'bajiecn'</span><span class="token punctuation">,</span> <span class="token string">'shanghang'</span><span class="token punctuation">,</span> <span class="token string">'bajie'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$gw46pmsOVYO.smHYQ2jH.OoXoe.lGP8OStDkHNs/E74GqZDL5K7ki'</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ACTIVITI_USER,GROUP_activitiTeam,g_bajiewukong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'wukongcn'</span><span class="token punctuation">,</span> <span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'wukong'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$gw46pmsOVYO.smHYQ2jH.OoXoe.lGP8OStDkHNs/E74GqZDL5K7ki'</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ACTIVITI_USER,GROUP_activitiTeam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'salaboycn'</span><span class="token punctuation">,</span> <span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'salaboy'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$gw46pmsOVYO.smHYQ2jH.OoXoe.lGP8OStDkHNs/E74GqZDL5K7ki'</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ACTIVITI_USER,GROUP_activitiTeam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- 修复Activiti7的M4版本缺失字段Bug</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">alter</span> <span class="token keyword">table</span> ACT_RE_DEPLOYMENT <span class="token keyword">add</span> <span class="token keyword">column</span> PROJECT_RELEASE_VERSION_ <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> ACT_RE_DEPLOYMENT <span class="token keyword">add</span> <span class="token keyword">column</span> VERSION_ <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- 动态表单数据存储</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>formdata<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>formdata<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>PROC_DEF_ID_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>PROC_INST_ID_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>FORM_KEY_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Control_ID_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Control_VALUE_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><h2 id="spring-security"><a href="#spring-security" class="headerlink" title="spring security"></a>spring security</h2><p>spring-activiti自动集成了spring boot security，访问应用的用户名是：user，启动时会在控制台生成密码：</p><pre class=" language-java"><code class="language-java"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">59</span><span class="token operator">:</span><span class="token number">29.582</span>  INFO <span class="token number">11832</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>       main<span class="token punctuation">]</span> <span class="token punctuation">.</span>s<span class="token punctuation">.</span>s<span class="token punctuation">.</span>UserDetailsServiceAutoConfiguration <span class="token operator">:</span>Using generated security password<span class="token operator">:</span> b241ae9b<span class="token operator">-</span>ba60<span class="token operator">-</span>44a9<span class="token operator">-</span>8c0d<span class="token operator">-</span>b5ca45349ed6</code></pre><p>去掉密码：在启动类前加注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>security<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>SecurityAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>security<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ManagementWebSecurityAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivitiSpringbootDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ActivitiSpringbootDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="部署和执行"><a href="#部署和执行" class="headerlink" title="部署和执行"></a>部署和执行</h2><blockquote><p>部署的bpmn文件一定要是bpmn格式的文件，不能是xml格式的</p></blockquote><p>部署流程会影响的表：act_re_deployment、act_re_procdef、act_ge_bytearray，如果其中任意一个表中没有写入，则没有部署成功。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnterpriseRaService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RepositoryService repositoryService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RuntimeService runtimeService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 部署流程：</span>    <span class="token keyword">public</span> String <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Deployment deployment<span class="token operator">=</span>repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span><span class="token string">"processes/analyse1.bpmn"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"请假流程"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deployment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行流程</span>    <span class="token keyword">public</span> String <span class="token function">startProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ProcessInstance instance<span class="token operator">=</span>runtimeService<span class="token punctuation">.</span><span class="token function">startProcessInstanceByKey</span><span class="token punctuation">(</span><span class="token string">"process_analyse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Service-Task"><a href="#Service-Task" class="headerlink" title="Service Task"></a>Service Task</h2><p>参考：<a href="https://www.pianshen.com/article/1950323381/" target="_blank" rel="noopener">自动服务任务</a><br><a href="https://www.cnblogs.com/dengjiahai/p/6942376.html" target="_blank" rel="noopener">服务任务</a><br>service task需要在bpmn文件中配置与之关联的执行类，类名要写全名，即package.类名，async设置为true表示startProcessInstanceByKey方法立即返回，然后异步执行service task；</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">bpmn2:</span>serviceTask</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Activity_0z1g1ix<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>crawl<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">activiti:</span>async</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">activiti:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.cloudactiviti.listener.CrawlListener<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>与之关联的类实现JavaDelegate接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>cloudactiviti<span class="token punctuation">.</span>listener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>delegate<span class="token punctuation">.</span>DelegateExecution<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>delegate<span class="token punctuation">.</span>JavaDelegate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrawlListener</span> <span class="token keyword">implements</span> <span class="token class-name">JavaDelegate</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Component</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrawlListener</span> <span class="token keyword">implements</span> <span class="token class-name">JavaDelegate</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>DelegateExecution delegateExecution<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----模拟事务-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后调用startProcessInstanceByKey执行流程，该方法立即返回，流程异步执行。</p><h2 id="查询当前流程实例已完成任务"><a href="#查询当前流程实例已完成任务" class="headerlink" title="查询当前流程实例已完成任务"></a>查询当前流程实例已完成任务</h2><p>其实是查询act_hi_actinst表，按照时间排序，返回最后完成的活动。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getLastFinishedTask</span><span class="token punctuation">(</span>String instanceId<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>HistoricActivityInstance<span class="token operator">></span> list<span class="token operator">=</span>historyService<span class="token punctuation">.</span><span class="token function">createHistoricActivityInstanceQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">processInstanceId</span><span class="token punctuation">(</span>instanceId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByHistoricActivityInstanceStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String lastFinishedTask <span class="token operator">=</span> <span class="token string">"空任务"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lastFinishedTask<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActivityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>HistoricActivityInstance taskInstance<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已完成："</span><span class="token operator">+</span>taskInstance<span class="token punctuation">.</span><span class="token function">getActivityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------当前任务为空-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lastFinishedTask<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="查询正在执行的任务节点id"><a href="#查询正在执行的任务节点id" class="headerlink" title="查询正在执行的任务节点id"></a>查询正在执行的任务节点id</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getCurrentTask</span><span class="token punctuation">(</span>String instanceId<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Execution<span class="token operator">></span> executionList<span class="token operator">=</span>runtimeService<span class="token punctuation">.</span><span class="token function">createExecutionQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processInstanceId</span><span class="token punctuation">(</span>instanceId<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String currentTask<span class="token operator">=</span><span class="token string">"已结束"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>executionList<span class="token operator">==</span>null <span class="token operator">||</span> executionList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> currentTask<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        Execution execution<span class="token operator">=</span>executionList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取正在执行的活动id</span>        currentTask<span class="token operator">=</span>execution<span class="token punctuation">.</span><span class="token function">getActivityId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentTask<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Activity_0z1g1ix"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            currentTask<span class="token operator">=</span><span class="token string">"crawl"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>currentTask<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Activity_1rgp0z1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            currentTask<span class="token operator">=</span><span class="token string">"analyse"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> currentTask<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="参数的设置和获取"><a href="#参数的设置和获取" class="headerlink" title="参数的设置和获取"></a>参数的设置和获取</h2><p>在启动Activiti流程实例的时候，设置参数字典：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">startProcess</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span>String b<span class="token punctuation">)</span><span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> mapVariables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapVariables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"strA"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    mapVariables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"strB"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    ProcessInstance instance<span class="token operator">=</span>            runtimeService<span class="token punctuation">.</span><span class="token function">startProcessInstanceByKey</span><span class="token punctuation">(</span><span class="token string">"process_analyse"</span><span class="token punctuation">,</span>mapVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后就可以在JavaDelegate类中获取参数：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrawlListener</span> <span class="token keyword">implements</span> <span class="token class-name">JavaDelegate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>DelegateExecution delegateExecution<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String taskId <span class="token operator">=</span> delegateExecution<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token string">"strA"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userId <span class="token operator">=</span> delegateExecution<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token string">"strB"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="监听类中注入bean"><a href="#监听类中注入bean" class="headerlink" title="监听类中注入bean"></a>监听类中注入bean</h2><p>实现JavaDelegate的service task监听类中，采用Autowired注入bean为null，需要BeanFactoryPostProcessor获取。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AopContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>NoSuchBeanDefinitionException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanFactoryPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * spring工具类 方便在非spring管理环境中获取bean * * @author aaa */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SpringUtils</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Spring应用上下文环境 */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ConfigurableListableBeanFactory beanFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException    <span class="token punctuation">{</span>        SpringUtils<span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取对象     *     * @param name     * @return Object 一个以所给名字注册的bean的实例     * @throws org.springframework.beans.BeansException     *     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取类型为requiredType的对象     *     * @param clz     * @return     * @throws org.springframework.beans.BeansException     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clz<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException    <span class="token punctuation">{</span>        T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果BeanFactory包含一个与所给名称匹配的bean定义，则返回true     *     * @param name     * @return boolean     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断以给定名字注册的bean定义是一个singleton还是一个prototype。 如果与给定名字相应的bean定义没有被找到，将会抛出一个异常（NoSuchBeanDefinitionException）     *     * @param name     * @return boolean     * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param name     * @return Class 注册对象的类型     * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getType</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果给定的bean名字在bean定义中有别名，则返回这些别名     *     * @param name     * @return     * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取aop代理对象     *     * @param invoker     * @return     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getAopProxy</span><span class="token punctuation">(</span>T invoker<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> AopContext<span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后用SpringUtils.getBean(注入类.class)获取。</p><pre class=" language-java"><code class="language-java">IActivitiGraph activitiGraph<span class="token operator">=</span>SpringUtils<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>IActivitiGraph<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>代替<span class="token annotation punctuation">@Autowired</span>IActivitiGraph activitiGraph<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="2019/08/26/leetcode/string/kmp/"/>
      <url>2019/08/26/leetcode/string/kmp/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="Next数组的含义"><a href="#Next数组的含义" class="headerlink" title="Next数组的含义"></a>Next数组的含义</h3><p>记录当前字符<strong>前缀字符串</strong>的最长前缀后缀的长度，记录了模式串在当前位置失配后，模式串指针<em>j</em>指向的下一个位置，即最大相同前缀的下一个字符</p><h3 id="Next数组降低时间复杂度的原理"><a href="#Next数组降低时间复杂度的原理" class="headerlink" title="Next数组降低时间复杂度的原理"></a>Next数组降低时间复杂度的原理</h3><p>参考：</p><ul><li><p><a href="https://blog.csdn.net/TesuZer/article/details/81031351" target="_blank" rel="noopener">Kmp中next数组含义</a></p></li><li><p><a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">从头到尾彻底理解KMP</a></p></li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>ABCDABCX  <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> 目标串S   ABCDABCY  <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> 模式串P</code></pre><p>此时，模式串到达字符Y处失配，<strong>证明模式串中Y之前的字符都已匹配成功</strong>，注意到，前缀字符串<em>ABCDABC</em>的共同最长前后缀为<em>ABC</em>，此时，<strong>目标串的前缀<em>ABC</em>和模式串的前缀<em>ABC</em>对应，目标串的后缀<em>ABC</em>和模式串的后缀<em>ABC</em>对应</strong>，失配后，模式串的指针跳到<em>D</em>处</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>ABCDABCX       <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> 目标串S       ABCDABCY   <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> 模式串P</code></pre><p>此时, 模式串中<em>D</em> 之前的字符 <em>ABC</em> 仍是匹配的，因为，<strong>此时目标串的后缀 <em>ABC</em> 和 模式串的前缀 <em>ABC</em> 相匹配</strong>。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/KMP_1.jpg" alt="Next数组作用图示"></p><h3 id="Next数组的求解方法"><a href="#Next数组的求解方法" class="headerlink" title="Next数组的求解方法"></a>Next数组的求解方法</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>根据字符串的首尾相同最长子串</p><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>对模式串的标号方式不同，求出的next数组也不相同。模式串如果从0开始标号，求出的next数组比从1标号的next数组每位小1。</p><h5 id="从1开始标号：前两位固定为0、1"><a href="#从1开始标号：前两位固定为0、1" class="headerlink" title="从1开始标号：前两位固定为0、1"></a>从1开始标号：前两位固定为0、1</h5><table>    <thead>        <tr>            <td class="td">标号</td>            <td class="td">1</td>            <td class="td">2</td>            <td class="td">3</td>            <td class="td">4</td>            <td class="td">5</td>            <td class="td">6</td>            <td class="td">7</td>            <td class="td">8</td>            <td class="td">9</td>            <td class="td">10</td>            <td class="td">11</td>            <td class="td">12</td>        </tr>    </thead>    <tbody>        <tr>            <td class="td">P</td>            <td class="td">a</td>            <td class="td">b</td>            <td class="td">a</td>            <td class="td">b</td>            <td class="td">a</td>            <td class="td">a</td>            <td class="td">a</td>            <td class="td">b</td>            <td class="td">a</td>            <td class="td">b</td>            <td class="td">a</td>            <td class="td">a</td>        </tr>        <tr>            <td class="td">Next</td>            <td class="td">0</td>            <td class="td">1</td>            <td class="td">1</td>            <td class="td">2</td>            <td class="td">3</td>            <td class="td">4</td>            <td class="td">2</td>            <td class="td">2</td>            <td class="td">3</td>            <td class="td">4</td>            <td class="td">5</td>            <td class="td">6</td>        </tr>    </tbody></table><blockquote><p>字符串的前后定义：<code>标号小的为前面</code></p></blockquote><p>求第3位a的next值，看它前一位字符，为b(<strong>后面一直和b比较，b为目标字符</strong>),其next值为1 ——&gt; 找标号为1的字符，为a，不等于b，但是找到第1位了，则将第3位的next置1</p><p>求第4位的next值，看第3位的字符，为a(<strong>后面一直和a比较，a为目标字符</strong>),其next值为<em>1</em> –&gt; 找标号为<em>1</em>的字符，为a，等于a，<strong>以第3位上的next值作为标号的字符等于a</strong>，所以，<strong>第3位</strong> next值<strong>加1</strong>，作为目标位(第4位)的next值</p><p>求第5位的next值，看第4位的字符，为b(<strong>后面一直和b比较，b为目标字符</strong>)，其next值为<em>2</em>  –&gt; 找标号为<em>2</em>的字符，为b，等于b，<strong>以第4位上的next值作为标号的字符等于b</strong>，所以，<strong>第4位</strong> next值<strong>加1</strong>，作为目标位(第5位)的next值</p><p>求第6位的next值，看第5位的字符，为a(<strong>后面一直和a比较，a为目标字符</strong>)，其next值为<em>3</em>  –&gt; 找标号为<em>3</em>的字符，为a，等于a，<strong>以第5位上的next值作为标号的字符等于a</strong>，所以，<strong>第5位</strong> next值<strong>加1</strong>，作为目标位(第5位)的next值</p><p>求第7位的next值，看第6位的字符，为a(<strong>后面一直和a比较，a为目标字符</strong>)，其next值为<em>4</em>  –&gt; 找标号为<em>4</em>的字符，为b，不等于a，<strong>继续寻找</strong>–&gt; 标号为<em>4</em>的next值为 <em>2</em> –&gt; 标号为 <em>2</em> 的字符为b，不等于a，<strong>继续寻找</strong>  –&gt; 标号 <em>2</em> 的next值为 <em>1</em> –&gt; 标号为 <em>1</em> 的字符为 a，等于a， <strong>以第2位上的next值作为标号的字符等于a</strong>，所以，<strong>第2位</strong> next值<strong>加1</strong>，作为目标位(第7位)的next值</p><p>求第8位的next值，看第7位的字符，为a(<strong>后面一直和a比较，a为目标字符</strong>)，其next为 <em>2</em>，–&gt; 标号为 <em>2</em> 的字符为b，不等于a， <strong>继续寻找</strong>，标号 <em>2</em> 的next值为 <em>1</em> –&gt; 标号为 <em>1</em> 的字符为 a，等于a，<strong>以第2位上的next值作为标号的字符等于a</strong>，所以，<strong>第2位</strong> next值<strong>加1</strong>，作为目标位(第8位)的next值</p><p>求第9位的next值，看第8位的字符，为b(<strong>后面一直和b比较，b为目标字符</strong>)，其next值为<em>2</em>  –&gt; 找标号为<em>2</em>的字符，为b，等于b，<strong>以第8位上的next值作为标号的字符等于b</strong>，所以，<strong>第8位</strong> next值<strong>加1</strong>，作为目标位(第9位)的next值</p><p>求第9位的next值，看第8位的字符，为b(<strong>后面一直和b比较，b为目标字符</strong>)，其next值为<em>2</em>  –&gt; 找标号为<em>2</em>的字符，为b，等于b，<strong>以第8位上的next值作为标号的字符等于b</strong>，所以，<strong>第8位</strong> next值<strong>加1</strong>，作为目标位(第9位)的next值</p><p>求第10位的next值，看第9位的字符,为a(<strong>后面一直和a比较，a为目标字符</strong>),其next值为 <em>3</em> –&gt; 找标号为<em>3</em>的字符，为a，等于a，<strong>以第9位上的next值作为标号的字符等于a</strong>，所以，<strong>第9位</strong> next值<strong>加1</strong>，作为目标位(第10位)的next值</p><p>求第11位的next值，看第10位的字符，为b(<strong>后面一直和b比较，b为目标字符</strong>)，其next值为<em>4</em>  –&gt; 找标号为<em>4</em>的字符，为b，等于b，<strong>以第10位上的next值作为标号的字符等于b</strong>，所以，<strong>第10位</strong> next值<strong>加1</strong>，作为目标位(第11位)的next值</p><p>求第12位的next值，看第11位的字符,为a(<strong>后面一直和a比较，a为目标字符</strong>),其next值为 <em>5</em> –&gt; 找标号为<em>5</em>的字符，为a，等于a，<strong>以第11位上的next值作为标号的字符等于a</strong>，所以，<strong>第11位</strong> next值<strong>加1</strong>，作为目标位(第12位)的next值</p><h5 id="从0开始标号：前两位固定为-1、0"><a href="#从0开始标号：前两位固定为-1、0" class="headerlink" title="从0开始标号：前两位固定为-1、0"></a>从0开始标号：前两位固定为-1、0</h5><p>与上面的步骤相同，只是模式串的下标不同：</p><table><thead><tr><th align="center">标号</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th></tr></thead><tbody><tr><td align="center">P</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">a</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">a</td></tr><tr><td align="center">Next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr></tbody></table><h3 id="Next数组求解"><a href="#Next数组求解" class="headerlink" title="Next数组求解"></a>Next数组求解</h3><p>根据方法2求next数组的代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_next</span><span class="token punctuation">(</span>str_p<span class="token punctuation">)</span><span class="token punctuation">:</span>    next_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># j为模式串下标，k为next值</span>    j<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true"># next_list 初始化时已经添加了一个-1，所以 判断条件小于 len(str_p)-1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>str_p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># k==-1 是判断找没找到第一个字符，j一直是当前字符的前一个字符下标</span>        <span class="token comment" spellcheck="true"># str_p[j] == str_p[k] 判断 以某个字符的next值为标号的对应的字符与当前位前一位字符是否相同</span>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> str_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> str_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果相同，该位next+1作为目标位的next值</span>            k <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            next_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            k <span class="token operator">=</span> next_list<span class="token punctuation">[</span>k<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(next_list)</span>    <span class="token keyword">return</span> next_list</code></pre><h3 id="KMP-1"><a href="#KMP-1" class="headerlink" title="KMP"></a>KMP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">kmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    next_list <span class="token operator">=</span> get_next<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 如果失配，目标串指针i不动，模式串指针j跳到失配位的next值处</span>        <span class="token comment" spellcheck="true"># 使得失配位置前缀字符串的后缀对应于模式串的前缀</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> next_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">if</span> j <span class="token operator">==</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> j    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></code></pre><h3 id="Kmp算法的时间复杂度"><a href="#Kmp算法的时间复杂度" class="headerlink" title="Kmp算法的时间复杂度"></a>Kmp算法的时间复杂度</h3><p>参考：<a href="https://blog.csdn.net/niukai1768/article/details/79579709" target="_blank" rel="noopener">KMP时间复杂度分析</a></p><p>O(m+n)</p><p><a href="https://blog.csdn.net/iamyvette/article/details/77433991" target="_blank" rel="noopener">https://blog.csdn.net/iamyvette/article/details/77433991</a></p><p><a href="https://blog.csdn.net/weixin_38332967/article/details/81944353" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38332967/article/details/81944353</a></p><p><a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">https://blog.csdn.net/v_july_v/article/details/7041827</a></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="2019/07/19/leetcode/simple-without-algorithm/liang-shu-zhi-he/"/>
      <url>2019/07/19/leetcode/simple-without-algorithm/liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">两数之和</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">示例</span><span class="token punctuation">:</span>给定 nums = <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 9因为 nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> = 2 + 7 = 9所以返回 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题不适合使用双指针法，排序后会将原来序号打乱。<br>用一个字典保存数值和其序号之间的对应关系，字典的健是数组的数值，字典的值是该数值的序号。<br>遍历数组，看<code>target-nums[i]</code>在不在字典中，<strong>同时保证当前序号和<code>target-nums[i]</code>在字典中对应的值不同，（防止重复使用该数）</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    index_value_dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        need <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># i!=index_value_dic[need] 为了防止[3,3]的情况</span>        <span class="token keyword">if</span> need <span class="token keyword">in</span> index_value_dic <span class="token operator">and</span> i <span class="token operator">!=</span> index_value_dic<span class="token punctuation">[</span>need<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> index_value_dic<span class="token punctuation">[</span>need<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 将元素值和其index写入，元素当作健，index为值，可能有重复的元素值例如 nums=[3,3],后一个元素会覆盖前面的键值对</span>            index_value_dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> simple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共前缀</title>
      <link href="2019/06/23/leetcode/string/zui-chang-gong-gong-qian-zhui/"/>
      <url>2019/06/23/leetcode/string/zui-chang-gong-gong-qian-zhui/</url>
      
        <content type="html"><![CDATA[<h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/longest-common-prefix/submissions/" target="_blank" rel="noopener">最长公关前缀</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"flower"</span><span class="token punctuation">,</span><span class="token string">"flow"</span><span class="token punctuation">,</span><span class="token string">"flight"</span><span class="token punctuation">]</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"fl"</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"racecar"</span><span class="token punctuation">,</span><span class="token string">"car"</span><span class="token punctuation">]</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 输入不存在公共前缀。<span class="token key atrule">说明</span><span class="token punctuation">:</span>所有输入只包含小写字母 a<span class="token punctuation">-</span>z 。</code></pre><blockquote><p>python中字符串有大小，例如：a&lt;b&lt;c; flight &lt; flow &lt; flower</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>$O(n^2)$: 找出最短的字符串，然后看所有字符串相同位置上的字符是否一样</li><li>找出最小和最大字符串，最小和最大字符串的最长公共前缀即整个<code>list</code>的最长公共前缀</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="n方复杂度"><a href="#n方复杂度" class="headerlink" title="n方复杂度"></a>n方复杂度</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> strs<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 按照字符串长度排序</span>        strs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span> len<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        first_str <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>first_str<span class="token punctuation">)</span> <span class="token operator">and</span> flag<span class="token punctuation">:</span>            s <span class="token operator">=</span> first_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">for</span> st <span class="token keyword">in</span> strs<span class="token punctuation">:</span>                <span class="token keyword">if</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>first_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> first_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">""</span></code></pre><h4 id="n复杂度"><a href="#n复杂度" class="headerlink" title="n复杂度"></a>n复杂度</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestCommonPrefix2</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> strs<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">""</span>    <span class="token comment" spellcheck="true"># 按字母表顺序：flight &lt; flow &lt;flower</span>    min_str <span class="token operator">=</span> min<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>    max_str <span class="token operator">=</span> max<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 只需要找最小和最大字符串的最长公共前缀</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>min_str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">!=</span> max_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> min_str<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> min_str</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗马数字转整数</title>
      <link href="2019/06/22/leetcode/simple-without-algorithm/luo-ma-shu-zi-zhuan-zheng-shu/"/>
      <url>2019/06/22/leetcode/simple-without-algorithm/luo-ma-shu-zi-zhuan-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/roman-to-integer/comments/" target="_blank" rel="noopener">罗马数字转整数</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><pre class=" language-bash"><code class="language-bash">字符          数值I             1V             5X             10L             50C             100D             500M             1000</code></pre><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"III"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">3</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"IV"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">4</span>示例 3<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"IX"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">9</span>示例 4<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"LVIII"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">58</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> L = 50<span class="token punctuation">,</span> V= 5<span class="token punctuation">,</span> III = 3.示例 5<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"MCMXCIV"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">1994</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> M = 1000<span class="token punctuation">,</span> CM = 900<span class="token punctuation">,</span> XC = 90<span class="token punctuation">,</span> IV = 4.</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力条件判断：判断当前位的时候同时判断下一位，共有7种情况，分别以“I， V， X， L，C，D 和 M”开头<pre class=" language-yaml"><code class="language-yaml">M<span class="token punctuation">-</span><span class="token punctuation">></span> MC<span class="token punctuation">-</span><span class="token punctuation">></span> CM、CD、CD<span class="token punctuation">-</span><span class="token punctuation">></span> DX<span class="token punctuation">-</span><span class="token punctuation">></span> XC、XL、XL<span class="token punctuation">-</span><span class="token punctuation">></span> LI<span class="token punctuation">-</span><span class="token punctuation">></span> IX、IV、IV<span class="token punctuation">-</span><span class="token punctuation">></span> V</code></pre></li><li>观察罗马数字的结构特点：<pre class=" language-yaml"><code class="language-yaml">I &lt; V &lt; X &lt; L &lt; C &lt; D &lt; M特殊情况：CM = M<span class="token punctuation">-</span>C = <span class="token punctuation">-</span>C+M = 900CD = D<span class="token punctuation">-</span>C = <span class="token punctuation">-</span>C+D = 400<span class="token punctuation">...</span><span class="token punctuation">...</span></code></pre><blockquote><p>判断当前字符是否“小于”后一个字符，如果小于，则减去该字符对应的数值；如果大于则加上该字符对应的数值</p></blockquote></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 因为要修改 i 的数值，所以不能用rang()</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">1000</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">900</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">400</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">100</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">500</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">90</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">40</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">10</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">50</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'I'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">9</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'V'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">4</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'V'</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">5</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> res</code></pre><h4 id="根据结构"><a href="#根据结构" class="headerlink" title="根据结构"></a>根据结构</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">romanToInt2</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    str_num_dic <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>        <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token number">1000</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果小于下一个字符就减去，如果大于就加上</span>        res <span class="token operator">=</span> res <span class="token operator">-</span> str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">else</span> res <span class="token operator">+</span> str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> res<span class="token operator">+</span>str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数转罗马数字</title>
      <link href="2019/06/21/leetcode/simple-without-algorithm/zheng-shu-zhuan-luo-ma-shu-zi/"/>
      <url>2019/06/21/leetcode/simple-without-algorithm/zheng-shu-zhuan-luo-ma-shu-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="整数转罗马数字"><a href="#整数转罗马数字" class="headerlink" title="整数转罗马数字"></a>整数转罗马数字</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/integer-to-roman/" target="_blank" rel="noopener">整数转罗马数字</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><pre class=" language-yaml"><code class="language-yaml">字符          数值I             1V             5X             10L             50C             100D             500M             1000</code></pre><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"III"</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"IV"</span>示例 3<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"IX"</span>示例 4<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">58</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"LVIII"</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> L = 50<span class="token punctuation">,</span> V = 5<span class="token punctuation">,</span> III = 3.示例 5<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">1994</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"MCMXCIV"</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> M = 1000<span class="token punctuation">,</span> CM = 900<span class="token punctuation">,</span> XC = 90<span class="token punctuation">,</span> IV = 4.</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>暴力分类讨论：遍历数字的每一位，判断该位是个位、十位、百位还是千位，然后执行相应的转换操作；</li><li>采用<code>数字-字符</code>结构的字典存储关键数字（进位有关）与对应字符的映射关系，然后用给定数字对这些关键数字依次取模，取模结果乘以该关键数字对应的字符</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="暴力分类讨论"><a href="#暴力分类讨论" class="headerlink" title="暴力分类讨论"></a>暴力分类讨论</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>    string_1 <span class="token operator">=</span> <span class="token string">''</span>    string_2 <span class="token operator">=</span> <span class="token string">''</span>    string_3 <span class="token operator">=</span> <span class="token string">''</span>    string_4 <span class="token operator">=</span> <span class="token string">''</span>    index <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> num<span class="token punctuation">:</span>        x <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>        num <span class="token operator">//=</span> <span class="token number">10</span>        <span class="token comment" spellcheck="true"># 个位</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                string_1 <span class="token operator">+=</span> <span class="token string">''</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                string_1 <span class="token operator">+=</span> <span class="token string">'IV'</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>                string_1 <span class="token operator">+=</span> <span class="token string">'IX'</span>            <span class="token keyword">elif</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_1 <span class="token operator">+=</span> <span class="token string">'I'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token number">5</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>                x <span class="token operator">-=</span> <span class="token number">5</span>                string_1 <span class="token operator">+=</span> <span class="token string">'V'</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_1 <span class="token operator">+=</span> <span class="token string">'I'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 十位</span>        <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                string_2 <span class="token operator">+=</span> <span class="token string">''</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                string_2 <span class="token operator">+=</span> <span class="token string">'XL'</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>                string_2 <span class="token operator">+=</span> <span class="token string">'XC'</span>            <span class="token keyword">elif</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_2 <span class="token operator">+=</span> <span class="token string">'X'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token number">5</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>                x <span class="token operator">-=</span> <span class="token number">5</span>                string_2 <span class="token operator">+=</span> <span class="token string">'L'</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_2 <span class="token operator">+=</span> <span class="token string">'X'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 百位</span>        <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                string_3 <span class="token operator">+=</span> <span class="token string">''</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                string_3 <span class="token operator">+=</span> <span class="token string">'CD'</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>                string_3 <span class="token operator">+=</span> <span class="token string">'CM'</span>            <span class="token keyword">elif</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_3 <span class="token operator">+=</span> <span class="token string">'C'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token number">5</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>                x <span class="token operator">-=</span> <span class="token number">5</span>                string_3 <span class="token operator">+=</span> <span class="token string">'D'</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_3 <span class="token operator">+=</span> <span class="token string">'C'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 千位，只有1，2，3三种情况</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> x<span class="token punctuation">:</span>                string_4 <span class="token operator">+=</span> <span class="token string">'M'</span>                x <span class="token operator">-=</span> <span class="token number">1</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    string <span class="token operator">=</span> string_4 <span class="token operator">+</span> string_3 <span class="token operator">+</span> string_2 <span class="token operator">+</span> string_1    <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    <span class="token keyword">return</span> string</code></pre><h4 id="优化暴力分类讨论"><a href="#优化暴力分类讨论" class="headerlink" title="优化暴力分类讨论"></a>优化暴力分类讨论</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">intToRoman2</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>    string <span class="token operator">=</span> <span class="token string">''</span>    index <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> num<span class="token punctuation">:</span>        x <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            string <span class="token operator">=</span> str_of_num<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">)</span> <span class="token operator">+</span> string        <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            string <span class="token operator">=</span> str_of_num<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token operator">+</span> string        <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            string <span class="token operator">=</span> str_of_num<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">)</span> <span class="token operator">+</span> string        <span class="token keyword">else</span><span class="token punctuation">:</span>            string_4 <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">while</span> x<span class="token punctuation">:</span>                string_4 <span class="token operator">+=</span> <span class="token string">'M'</span>                x <span class="token operator">-=</span> <span class="token number">1</span>            string <span class="token operator">=</span> string_4 <span class="token operator">+</span> string        num <span class="token operator">//=</span> <span class="token number">10</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    <span class="token keyword">return</span> string<span class="token comment" spellcheck="true"># 复用分类讨论代码</span><span class="token keyword">def</span> <span class="token function">str_of_num</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    string <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        string <span class="token operator">+=</span> <span class="token string">''</span>    <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        string <span class="token operator">+=</span> a <span class="token operator">+</span> b    <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>        string <span class="token operator">+=</span> a <span class="token operator">+</span> c    <span class="token keyword">elif</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> x<span class="token punctuation">:</span>            string <span class="token operator">+=</span> a            x <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">elif</span> <span class="token number">5</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>        x <span class="token operator">-=</span> <span class="token number">5</span>        string <span class="token operator">+=</span> b        <span class="token keyword">while</span> x<span class="token punctuation">:</span>            string <span class="token operator">+=</span> a            x <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> string</code></pre><h4 id="设置映射表，从高位到低位转换"><a href="#设置映射表，从高位到低位转换" class="headerlink" title="设置映射表，从高位到低位转换"></a>设置映射表，从高位到低位转换</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">intToRoman3</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 数值和字符映射关系</span>    num_str_dic <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">1000</span><span class="token punctuation">:</span> <span class="token string">'M'</span><span class="token punctuation">,</span>        <span class="token number">900</span><span class="token punctuation">:</span> <span class="token string">'CM'</span><span class="token punctuation">,</span>        <span class="token number">500</span><span class="token punctuation">:</span> <span class="token string">'D'</span><span class="token punctuation">,</span>        <span class="token number">400</span><span class="token punctuation">:</span> <span class="token string">'CD'</span><span class="token punctuation">,</span>        <span class="token number">100</span><span class="token punctuation">:</span> <span class="token string">'C'</span><span class="token punctuation">,</span>        <span class="token number">90</span><span class="token punctuation">:</span> <span class="token string">'XC'</span><span class="token punctuation">,</span>        <span class="token number">50</span><span class="token punctuation">:</span> <span class="token string">'L'</span><span class="token punctuation">,</span>        <span class="token number">40</span><span class="token punctuation">:</span> <span class="token string">'XL'</span><span class="token punctuation">,</span>        <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'X'</span><span class="token punctuation">,</span>        <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">'IX'</span><span class="token punctuation">,</span>        <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'V'</span><span class="token punctuation">,</span>        <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'IV'</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'I'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># x 是字典中的健，这里是数字</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> num_str_dic<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用num整除 num_str_dic 中的数值，得到的数乘以对应的符号</span>        <span class="token comment" spellcheck="true">#（如：2*I=II，如果是0*I，就是""）</span>        res <span class="token operator">+=</span> num <span class="token operator">//</span> x <span class="token operator">*</span> num_str_dic<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        num <span class="token operator">%=</span> x    <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="2019/06/20/leetcode/simple-without-algorithm/sheng-zui-duo-shui-de-rong-qi/"/>
      <url>2019/06/20/leetcode/simple-without-algorithm/sheng-zui-duo-shui-de-rong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">盛最多水的容器</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><blockquote><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p></blockquote><img src="https://i.loli.net/2019/06/20/5d0b7d4f6c8ef51122.jpg" style="zoom: 50%"><p><font size="1">图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</font></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">示例</span><span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">49</span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><code>双指针法</code>：设置首尾指针，每次<strong>让垂直线长度比较小的移动</strong>，每移动一次，更新最大面积</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> list<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    area <span class="token operator">=</span> <span class="token number">0</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>height<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 双指针，分别指向首尾</span>    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        height_left <span class="token operator">=</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span>        height_right <span class="token operator">=</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 取较短的</span>        height_min <span class="token operator">=</span> min<span class="token punctuation">(</span>height_left<span class="token punctuation">,</span> height_right<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算面积</span>        tmp_area <span class="token operator">=</span> height_min <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 更新面积</span>        <span class="token keyword">if</span> tmp_area <span class="token operator">></span> area<span class="token punctuation">:</span>            area <span class="token operator">=</span> tmp_area        <span class="token comment" spellcheck="true"># 让较短的垂直线移动</span>        <span class="token keyword">if</span> height_left <span class="token operator">&lt;</span> height_right<span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            right <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> area</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> DoublePointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KDD-Cup2012-Track2</title>
      <link href="2019/06/20/paper/kddcup2012-track2/"/>
      <url>2019/06/20/paper/kddcup2012-track2/</url>
      
        <content type="html"><![CDATA[<h2 id="KDD-Cup2012-Track2"><a href="#KDD-Cup2012-Track2" class="headerlink" title="KDD-Cup2012-Track2"></a><a href="https://jyunyu.csie.org/docs/pubs/kddcup2012paper.pdf" target="_blank" rel="noopener">KDD-Cup2012-Track2</a></h2><h3 id="A-Two-Stage-Ensemble-of-Diverse-Models-for-Advertisement-Ranking-in-KDD-Cup-2012"><a href="#A-Two-Stage-Ensemble-of-Diverse-Models-for-Advertisement-Ranking-in-KDD-Cup-2012" class="headerlink" title="A Two-Stage Ensemble of Diverse Models for Advertisement Ranking in KDD Cup 2012"></a>A Two-Stage Ensemble of Diverse Models for Advertisement Ranking in KDD Cup 2012</h3><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一次会话是指用户和搜索引擎的互动，即一次查询操作。会话包括：用户、搜索内容、搜索引擎搜到的广告、搜索引擎呈现给用户的广告、用户点击的广告（0条或者多条）、搜索会话的深度是指：搜索引擎呈现给用户的广告的数量；广告的位置/position（排名、rank）是指该广告在呈现给用户所有广告中的排名，呈现给用户的所有广告都会生成一个短文本，即广告的标题，标题后面紧跟着一个长文本（即：广告的描述）和一个URL（URL通常被缩短以节省屏幕空间）。</p><h3 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h3><p>测试集中的每行数据都有12个，含义依次如下：</p><ol><li><code>Click</code>: 用户（<code>UserID</code>）点击广告（<code>AdID</code>）的次数</li><li><code>Impression</code>: 广告(<code>AdID</code>)呈现给用户（<code>UserID</code>）的次数(每次查询只会呈现一次)</li><li><code>DisplayURL</code>: URL总是随着标题和描述出现，在文件中，URL是匿名的哈希值</li><li><code>AdID</code>: 广告id</li><li><code>AdvertiserID</code>: 广告商id</li><li><code>Depth</code>: 一次会话呈现给用户的广告数量</li><li><code>Position</code>: 广告在返回给用户广告列表的index</li><li><code>QueryID</code>: 搜索id，从0开始的整数，是queryid_tokensid.txt的主键</li><li><code>KeywordID</code>: 关键词id，buyingkeyword_tokensid.txt的主键</li><li><code>TitleID</code>: titleid_tokensid.txt的主键</li><li><code>DescriptionID</code>: descriptionid_tokensid.txt的主键</li><li><code>UserID</code>: userid_profile.txt的主键，当无法识别用户时，此字段的值为0。</li></ol><blockquote><p>注：要预测的是 $\frac{Click}{Impression}$ ，后面二分类的时候，把<code>Click</code>当成正样本集，<code>Impression-Click</code> 当作负样本集</p></blockquote><h3 id="其他附属文件"><a href="#其他附属文件" class="headerlink" title="其他附属文件"></a>其他附属文件</h3><ol><li>queryid_tokensid.txt</li><li>buyingkeywordid_tokensid.txt</li><li>titleid_tokensid.txt</li><li>descriptionid_tokensid.txt</li><li>userid_profile.txt</li></ol><blockquote><p>对于前4个文件，每一行都是 <code>id query|keyword|ad title|ad description</code>的格式,这些数据可能是自然语言，在文件中都用其哈希匿名化。<br>‘userid_profile.txt’的每一行由UserID，Gender和Age组成，由TAB字符分隔。注：并非训练和测试集中的每个UserID都将出现在’userid_profile.txt’中。 每个字段描述如下：</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">Gender</span><span class="token punctuation">:</span> '1' (男) '2'(女) '0'(unknow)<span class="token key atrule">Age</span><span class="token punctuation">:</span>  '1' for (0<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  '2' for (12<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> '3' for (18<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> '4'  for  (24<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> '5' for (30<span class="token punctuation">,</span>  <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> and '6' for greater than 40.</code></pre><h3 id="测试集"><a href="#测试集" class="headerlink" title="测试集"></a>测试集</h3><p>除了广告的被呈现次数(Impression)和点击次数(Click)，测试集和训练集保持相同的格式，测试数据集的一个子集用于在排行榜上对提交/更新的结果进行排名</p><h3 id="需要提交的结果"><a href="#需要提交的结果" class="headerlink" title="需要提交的结果"></a>需要提交的结果</h3><p>一个文本文件，每一行只有一个字段：广告的点击率，并且按照顺序与所给文件的行一一对应。</p><p><a href="/assets/kddcup2012paper_note.pdf">标注版论文</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]杨之之.Kaggle[2] - Predict the click through rate (KDD12 trackl2)[EB/OL].<a href="https://blog.csdn.net/u011292007/article/details/36886523" target="_blank" rel="noopener">https://blog.csdn.net/u011292007/article/details/36886523</a> 2014-07-09/2019-06-20<br>[2]<a href="https://www.kaggle.com/c/kddcup2012-track2/overview" target="_blank" rel="noopener">https://www.kaggle.com/c/kddcup2012-track2/overview</a></p>]]></content>
      
      
      <categories>
          
          <category> Paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
            <tag> KDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文数</title>
      <link href="2019/06/19/leetcode/string/hui-wen-shu/"/>
      <url>2019/06/19/leetcode/string/hui-wen-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/palindrome-number/comments/" target="_blank" rel="noopener">回文数</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">121</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">-121</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 从左向右读<span class="token punctuation">,</span> 为 <span class="token punctuation">-</span>121 。 从右向左读<span class="token punctuation">,</span> 为 121<span class="token punctuation">-</span> 。因此它不是一个回文数。示例 3<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 从右向左读<span class="token punctuation">,</span> 为 01 。因此它不是一个回文数。</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>转换成字符串，翻转，看是否和之前字符串相同</li><li>转换成字符串，设置首尾指针，看首尾指针指向的字符是否相同</li><li>将整数的每一位保存进<code>list</code>，设置首尾指针，看首尾指针是否相同</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    str_x <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    str_x_reverse <span class="token operator">=</span> str_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> str_x <span class="token operator">==</span> str_x_reverse<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h4 id="首尾遍历字符串"><a href="#首尾遍历字符串" class="headerlink" title="首尾遍历字符串"></a>首尾遍历字符串</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPalindrome2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    str_x <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    first<span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>str_x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">while</span> first <span class="token operator">&lt;=</span> last<span class="token punctuation">:</span>        <span class="token keyword">if</span> str_x<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> str_x<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">:</span>            first <span class="token operator">+=</span> <span class="token number">1</span>            last <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> flag</code></pre><h4 id="首尾遍历list"><a href="#首尾遍历list" class="headerlink" title="首尾遍历list"></a>首尾遍历<code>list</code></h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPalindrome3</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">while</span> x<span class="token punctuation">:</span>        num_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>        x <span class="token operator">//=</span> <span class="token number">10</span>    first<span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> first <span class="token operator">&lt;=</span> last<span class="token punctuation">:</span>        <span class="token keyword">if</span> num_list<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> num_list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">:</span>            first <span class="token operator">+=</span> <span class="token number">1</span>            last <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> flag</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> simple </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串转换整数 (atoi)</title>
      <link href="2019/06/18/leetcode/string/zi-fu-chuan-zhuan-huan-zheng-shu-atoi/"/>
      <url>2019/06/18/leetcode/string/zi-fu-chuan-zhuan-huan-zheng-shu-atoi/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串转换整数-atoi"><a href="#字符串转换整数-atoi" class="headerlink" title="字符串转换整数 (atoi)"></a>字符串转换整数 (atoi)</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/string-to-integer-atoi/" target="_blank" rel="noopener">字符串转换整数 (atoi)</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p>说明：</p><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，qing返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"42"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">42</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"   -42"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">-42</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 第一个非空白字符为 '<span class="token punctuation">-</span>'<span class="token punctuation">,</span> 它是一个负号。     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 <span class="token punctuation">-</span>42 。示例 3<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"4193 with words"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">4193</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 转换截止于数字 '3' ，因为它的下一个字符不为数字。示例 4<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"words and 987"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 第一个非空字符是 'w'<span class="token punctuation">,</span> 但它不是数字或正、负号。     因此无法执行有效的转换。示例 5<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"-91283472332"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">-2147483648</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 数字 "<span class="token punctuation">-</span>91283472332" 超过 32 位有符号整数范围。     因此返回 INT_MIN (−231) 。</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>判断是否为空串</strong>，去除前部空格，<strong>再判断是否为空串</strong>，<strong>判断首字符是否为正负号或者数字</strong>，如果是,则保留符号，不是直接<code>return 0</code>，寻找数字，转换成整数，<strong>判断是否越界</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> string <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 去除前部空格</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">and</span> string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    string <span class="token operator">=</span> string<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(string)</span>    <span class="token comment" spellcheck="true"># 空白串的情况</span>    <span class="token keyword">if</span> string <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">or</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">or</span> <span class="token string">'0'</span> <span class="token operator">&lt;=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 寻找数字</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'0'</span> <span class="token operator">&lt;=</span> string<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">:</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        string <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>j<span class="token punctuation">]</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 保存正负号</span>        symbol <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">or</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            symbol <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            string <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 转换为整数</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> string<span class="token punctuation">:</span>            tmp <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> tmp        <span class="token comment" spellcheck="true"># 判断是否越界</span>        <span class="token keyword">if</span> symbol <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span>            num <span class="token operator">=</span> <span class="token operator">-</span>num        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> num    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重复字符最长子串</title>
      <link href="2019/06/16/leetcode/string/wu-chong-fu-zi-fu-zui-chang-zi-chuan/"/>
      <url>2019/06/16/leetcode/string/wu-chong-fu-zi-fu-zui-chang-zi-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="无重复字符最长子串"><a href="#无重复字符最长子串" class="headerlink" title="无重复字符最长子串"></a>无重复字符最长子串</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">无重复字符最长子串</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p>示例 1:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"abcabcbb"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</code></pre><p>示例 2:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"bbbbb"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 因为无重复字符的最长子串是 "b"，所以其长度为 1。</code></pre><p>示例 3:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"pwwkew"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 因为无重复字符的最长子串是 "wke"，所以其长度为 3。     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>遍历字符串每个字符时，计算以该字符结束的不含重复字符子串的起始位置i，用该位置减去起始位置便是以该字符结束的最长不重复子串的长度。选取所有字符的该数值中最大的。</p><p><strong>起始位置i的计算方法</strong>：<br>设置一个<code>&lt;str,int&gt;</code> 类型的字典<code>st</code>，每遍历一个字符都将其当前位置保存进<code>st</code>。<br>每次遍历一个字符，查看st中有没有该字符，如果有，则证明前面有与当前字符重复的字符，则当前字符的i值设置为前面字符的<code>index</code>+1</p><p>以<code>str: abcbc</code>为例：</p><table><thead><tr><th align="left">index</th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th></tr></thead><tbody><tr><td align="left">str</td><td align="left">a</td><td align="left">b</td><td align="left">c</td><td align="left">b</td><td align="left">c</td></tr><tr><td align="left">起始位置 i</td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">2</td><td align="left">3</td></tr><tr><td align="left">以该字符结束的不重复子串长度即<code>index-i+1</code></td><td align="left">1</td><td align="left">2</td><td align="left">3</td><td align="left">2</td><td align="left">2</td></tr><tr><td align="left">该字符对应的最长不重复子串</td><td align="left">a</td><td align="left">ab</td><td align="left">abc</td><td align="left">cb</td><td align="left">bc</td></tr></tbody></table><blockquote><p><strong>特殊情况</strong>：<code>str: abba</code>,即两个相同字符中间的子串，仍含重复字符,此时，发生重复时，不能将当前字符的i值设置为前面重复字符的<code>index</code>+1，而是<code>max(前一个重复字符的index+1,i)</code>,即<strong>i的取值是一个非递减序列</strong></p></blockquote><table><thead><tr><th align="left">index</th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th></tr></thead><tbody><tr><td align="left">str</td><td align="left">a</td><td align="left">b</td><td align="left">b</td><td align="left">a</td></tr><tr><td align="left">起始位置 i</td><td align="left">0</td><td align="left">0</td><td align="left">2</td><td align="left">2,注意这里不能是前一个<code>a</code>的<code>index</code>+1=1,如果是，则以该字符结束的最长不重复子串为：bba，显然有重复字符</td></tr><tr><td align="left">以该字符结束的不重复子串长度即<code>index-i+1</code></td><td align="left">1</td><td align="left">2</td><td align="left">1</td><td align="left">2</td></tr><tr><td align="left">该字符结束的最长不重复子串</td><td align="left">a</td><td align="left">ab</td><td align="left">b</td><td align="left">ba</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># 保存字符index的字典</span>        st <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        i<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> st<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 需要取最大值，应对abba的情况</span>                <span class="token comment" spellcheck="true"># i是截至j，以s[j]为最后一个元素的最长不重复子串的起始位置，即索引范围是[i,j]的子串是以元素j为最后一个元素的最长子串。</span>                i <span class="token operator">=</span> max<span class="token punctuation">(</span>st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 字符串的长度即为字符串的结束位置j，减去起始位置i，加1</span>            ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j        <span class="token keyword">return</span> ans</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长回文子串</title>
      <link href="2019/06/16/leetcode/string/zui-chang-hui-wen-zi-chuan/"/>
      <url>2019/06/16/leetcode/string/zui-chang-hui-wen-zi-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">最长回文子串</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><pre class=" language-yaml"><code class="language-yaml">示例 1：<span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"babad"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"bab"</span><span class="token key atrule">注意</span><span class="token punctuation">:</span> "aba" 也是一个有效答案。</code></pre><pre class=" language-yaml"><code class="language-yaml">示例 2：<span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"cbbd"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"bb"</span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><code>回文串特点</code>：关于中心字符对称（长度为奇数）或者关于中心线对称（长度为偶数）</p><p><code>中心扩散法</code>：遍历每一个字符，同时向左右扩散，判断扩散到的两个字符是否相同，如果相同，继续扩散；如果不同，停止</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        max_l <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#以s[i] 为中心向左右扩散</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> i<span class="token punctuation">,</span> i            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> right <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> max_l <span class="token operator">&lt;</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                    max_l <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>                    res <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">:</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                left <span class="token operator">-=</span> <span class="token number">1</span>                right <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">#以s[i],s[i+1]为中心向左右扩散</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> right <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> max_l <span class="token operator">&lt;</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                    max_l <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>                    res <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">:</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                left <span class="token operator">-=</span> <span class="token number">1</span>                right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和-输入BST</title>
      <link href="2019/06/15/leetcode/tree/liang-shu-zhi-he-shu-ru-bst/"/>
      <url>2019/06/15/leetcode/tree/liang-shu-zhi-he-shu-ru-bst/</url>
      
        <content type="html"><![CDATA[<h2 id="两数之和-输入BST"><a href="#两数之和-输入BST" class="headerlink" title="两数之和-输入BST"></a>两数之和-输入BST</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/" target="_blank" rel="noopener">两数之和-输入BST</a></p><h3 id="structure"><a href="#structure" class="headerlink" title="structure"></a>structure</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">BST</span><span class="token punctuation">:</span> 二叉搜索树，每个节点的值大于其任意左侧子节点的值，小于其任意右节点的值</code></pre><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个二叉搜索树和一个目标结果，如果 <code>BST</code> 中存在两个元素且它们的和等于给定的目标结果，则返回 <code>true</code>。</p><p>案例 1:</p><pre class=" language-c"><code class="language-c">输入<span class="token punctuation">:</span>    <span class="token number">5</span>   <span class="token operator">/</span> \  <span class="token number">3</span>   <span class="token number">6</span> <span class="token operator">/</span> \   \<span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">7</span>Target <span class="token operator">=</span> <span class="token number">9</span>输出<span class="token punctuation">:</span> True</code></pre><p>案例 2:</p><pre class=" language-c"><code class="language-c">输入<span class="token punctuation">:</span>    <span class="token number">5</span>   <span class="token operator">/</span> \  <span class="token number">3</span>   <span class="token number">6</span> <span class="token operator">/</span> \   \<span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">7</span>Target <span class="token operator">=</span> <span class="token number">28</span>输出<span class="token punctuation">:</span> False</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>构建树的中序遍历（<code>BST</code>的中序遍历为<strong>递增序列</strong>） <code>list</code>，设置两个指针，分别指向 <code>list</code> 的首尾，若首尾指针之和小于 <code>Target</code> ，则首指针后移一位；若首尾指针之和大于 <code>Target</code> ，则尾指针前移一位；若首尾指针之和等于 <code>Target</code> 则做出标记，退出循环。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>tree_li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 中序遍历</span>    <span class="token keyword">def</span> <span class="token function">ergodic_tree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>ergodic_tree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>tree_li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>ergodic_tree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">findTarget</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ergodic_tree<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置首尾指针</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree_li<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 设置是否存在Target标志</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            sum <span class="token operator">=</span> self<span class="token punctuation">.</span>tree_li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>tree_li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">if</span> sum <span class="token operator">==</span> k<span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> sum <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> flag</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贝叶斯</title>
      <link href="2019/06/15/paper/pgm/concept/conceptbayesiannetwork/"/>
      <url>2019/06/15/paper/pgm/concept/conceptbayesiannetwork/</url>
      
        <content type="html"><![CDATA[<h2 id="贝叶斯"><a href="#贝叶斯" class="headerlink" title="贝叶斯"></a>贝叶斯</h2><h3 id="朴素贝叶斯分类"><a href="#朴素贝叶斯分类" class="headerlink" title="朴素贝叶斯分类"></a>朴素贝叶斯分类</h3><h4 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h4><p>已知某条件下的概率，如何得到两条件交换后的概率，也就是在已知 $P(A|B)$ 的情况下如何求得 $P(B|A)$ 的概率。 <strong>$P(A|B)$ 是后验概率（posterior probability），也就是我们常说的条件概率</strong>。即在条件 $B$ 下，事件 $A$ 发生的概率。<strong>相反 $P(A)$ 或 $P(B)$ 称为先验概率（prior probability）</strong>。<br>适用于当很容易直接得出 $P(A|B)$，$P(B|A)$ 则很难直接得出，可由 $P(A|B)$ 计算得到 $P(B|A)$<br>$$<br>P(B|A)=\frac{P(A|B)P(B)}{P(A)}<br>$$</p><h3 id="贝叶斯网"><a href="#贝叶斯网" class="headerlink" title="贝叶斯网"></a>贝叶斯网</h3><p><code>Bayesian Network</code>，采用有向无环图表示网络结构，使用条件概率表<code>CPT</code>来描述联合概率分布。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/gnahznib/article/details/70244175" target="_blank" rel="noopener">概率图模型之：贝叶斯网络</a></p>]]></content>
      
      
      <categories>
          
          <category> Paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
            <tag> PGM </tag>
            
            <tag> BN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读：基于概率图模型的互联网广告点击率预测</title>
      <link href="2019/06/14/paper/pgm/ji-yu-gai-lu-tu-mo-xing-de-hu-lian-wang-guang-gao-dian-ji-lu-yu-ce/"/>
      <url>2019/06/14/paper/pgm/ji-yu-gai-lu-tu-mo-xing-de-hu-lian-wang-guang-gao-dian-ji-lu-yu-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h2><p>利用BN（贝叶斯网）的概率推理算法定量地分析任意用户之间的相似性，从而针对特定的广告，获得没有历史点击记录的用户与存在历史点击记录的用户之间存在的广告搜索行为的相似性，进而预测没有点击记录的用户对广告的 <code>CTR</code>（广告点击率）</p><ul><li>构建用户相似模型（用户贝叶斯网 <code>UBN</code>）</li><li>用户贝叶斯网近似推理（发现相似用户）和CTR预测（预测未点击用户对广告的点击率）</li><li>在数据集 <code>KDD CUP 2012-Track 2</code> 上进行实验（构建用户贝叶斯网、近似推理/发现相似用户、预测CTR）</li></ul><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">CTR</span><span class="token punctuation">:</span> 广告点击率<span class="token key atrule">UBN</span><span class="token punctuation">:</span> 用户贝叶斯网</code></pre><h2 id="章节安排"><a href="#章节安排" class="headerlink" title="章节安排"></a>章节安排</h2><ul><li>第一节给出构建用户贝叶斯网 <code>UBN</code> 的定义和构建方法</li><li>第二节给出 <code>UBN</code> 的近似推理算法和相应的 <code>CTR</code> 预测方法</li><li>第三节给出实验结果</li></ul><h3 id="构建用户相似模型"><a href="#构建用户相似模型" class="headerlink" title="构建用户相似模型"></a>构建用户相似模型</h3><h4 id="定义用户和关键词集合"><a href="#定义用户和关键词集合" class="headerlink" title="定义用户和关键词集合"></a>定义用户和关键词集合</h4><ul><li>用户集合：$U=\{U_1,U_2,\cdots,U_n\}$</li><li>广告关键词集合：$K=\{K_1,K_2,\cdots,K_m\}$</li><li>搜索行为集合：$B=\{B_1,B_2,\cdots,B_n\}$</li></ul><p>用户集合和搜索行为集合等长，$B$ 中的每一个元素代表一个用户的搜索关键词集合。</p><p>搜索行为集合中的<strong>每个元素都是一个集合</strong>，例如：$B_i=\{B_{i1},B_{i2},\cdots<br>,B_{il_i}\}$，表示用户一次搜索对应的关键词集合，称为搜索行为，$B_{ij} \in K$。</p><p>用户 $U_i$ 的搜索内容为： $C_i=&lt; U_i,M_i &gt;$, $M_i=\{B_{ij} | j=1,2,\cdots,l_i \}$。</p><blockquote><p>注：$M_i$ 中， <strong>原文中写的是 <code>i</code> $ =1,2,\cdots,l_i $ ,我理解的是这里应该为<code>j</code>。</strong></p></blockquote><p><strong>例1</strong>：<br>用户 $U_i$ 的搜索行为集合为 $B_i=\{B_{i1},B_{i2},B_{i3},B_{i4}\}$ ，其中 $B_{i1}$ ,$B_{i2}$,$B_{i3}$,$B_{i4}$,对应的关键词分别为：$K_{1}$, $K_{2}$, $K_{3}$, $K_{4}$,则用户 $U_i$ 的搜索内容为 $C_i=&lt; U_i,\{K_{1},K_{2},K_{3},K_{4} \} &gt;$</p><h4 id="定义UBN"><a href="#定义UBN" class="headerlink" title="定义UBN"></a>定义UBN</h4><p><code>用户贝叶斯网</code>：</p><ul><li>节点：<strong>每个节点代表一个用户</strong>，用户集合 $U=\{U_1,U_2,\cdots,U_n\}$ 即节点集合，</li><li>边：有向边集$E$代表用户相似关系。若用户之间有边相连，则代表用户之间存在相似关系。用户相似度用 $sim(U_i,U_j)$ 表示：<br>$$<br>sim(U_i,U_j)=\frac {N(M_i \cap M_j)}{N(M_i \cup M_j)}<br>$$<br>设置相似度阈值 $\varepsilon$ ,若 $sim(U_i,U_j)&gt;\varepsilon$, 则用户 $U_i$ 和用户 $U_j$ 之间存在一条无向边。</li><li>边的方向：针对任意两个有边相连的节点，计算这两个用户的搜索记录中，相同关键词占各自关键词的比例。用户 $U_i$ 对 $U_j$ 的依赖度用 $D(U_i|U_j)$ 表示，用户 $U_j$ 对 $U_i$ 的依赖度用 $D(U_j|U_i)$ 表示。<br>$$<br>D(U_i|U_j)=\frac{N(M_i,M_j)}{N(M_j)},D(U_j|U_i)=\frac{N(M_i,M_j)}{N(M_i)}<br>$$<br>如果 $D(U_i|U_j)&gt;D(U_j|U_i)$,则表示$U_i$对$U_j$兴趣的依赖程度大于$U_j$对$U_i$兴趣的依赖程度。即 $U_j$ 指向 $U_i$，表示 $U_j$ 点击过的广告 $U_i$ 点击的可能性较大。</li></ul><blockquote><p>岳昆, 王朝禄, 朱运磊, 等. 基于概率图模型的互联网广告点击率预测[J]. 华东师范大学学报(自然科学版), <code>2013(3):15-25</code>.</p></blockquote><p><a href="/assets/基于概率图模型的互联网广告点击率预测.pdf">原文：基于概率图模型的互联网广告点击率预测</a></p>]]></content>
      
      
      <categories>
          
          <category> Paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
            <tag> PGM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转</title>
      <link href="2019/06/13/leetcode/cpp-stl/reverse-integer/"/>
      <url>2019/06/13/leetcode/cpp-stl/reverse-integer/</url>
      
        <content type="html"><![CDATA[<h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">整数反转</a></p><p>题目描述：<br>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p>示例1：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">321</span></code></pre><p>示例 2:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">-123</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">-321</span></code></pre><p>示例 3:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">120</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">21</span></code></pre><p>注意:</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h3 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3><p>int 的范围</p><pre><code>[-2^31,2^31-1]</code></pre><p>C中常量INT_MAX和INT_MIN分别表示最大、最小整数，定义在头文件limits.h中。</p><pre class=" language-cpp"><code class="language-cpp">INT_MAX <span class="token operator">=</span> <span class="token function">2147483647</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>INT_MIN <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">2147483648</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">31</span><span class="token punctuation">)</span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>利用x%10循环取出原数最后一位，作为reverse_num的首位</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> reverse_num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用long long定义反转后的结果</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不用考虑x的正负，负数的模为负</span>    current<span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每次取出x的最后一位，将其当作反转数的第一位</span>    reverse_num<span class="token operator">=</span>reverse_num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>current<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> current_num<span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>current_num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>current_num<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span>INT_MIN <span class="token operator">||</span>num<span class="token operator">></span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;num&lt;&lt;endl;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> cpp_stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z字形变换</title>
      <link href="2019/06/13/leetcode/simple-without-algorithm/zigzag-conversion/"/>
      <url>2019/06/13/leetcode/simple-without-algorithm/zigzag-conversion/</url>
      
        <content type="html"><![CDATA[<h2 id="Z字形变换"><a href="#Z字形变换" class="headerlink" title="Z字形变换"></a>Z字形变换</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener">Z字形变换</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。<br>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><pre><code>L   C   I   RE T O E S I I GE   D   H   N</code></pre><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。<br>示例 1:</p><pre><code>输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 3输出: &quot;LCIRETOESIIGEDHN&quot;</code></pre><p>示例 2:</p><pre><code>输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 4输出: &quot;LDREOEIIECIHNTSG&quot;解释:L     D     RE   O E   I IE C   I H   NT     S     G</code></pre><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>画出变换后字母的图形，将每个字母的行号写在它右边</p><pre><code>L1    C1    I1    R1E2 T2 O2 E2 S2 I2 I2 G2E3    D3    H3    N3</code></pre><p>将每个字母变换后对应的行号与该字母对应：</p><pre><code>LEETCODEISHIRING1232123212321232</code></pre><p>便可以得到字母变换后行号的规律</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 保存字母与其行号对应关系的结构体</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> row<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">convert</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string result_str<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化行号</span>        <span class="token keyword">int</span> ptr<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 决定行号是增加还是减少</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node nodeList<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Node n<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span>c<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span>row<span class="token operator">=</span>ptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                ptr<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ptr<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">==</span>numRows <span class="token operator">||</span> ptr<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token operator">!</span>flag<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            nodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string z_character<span class="token punctuation">[</span>numRows<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//        cout&lt;&lt;nodeList[i].row&lt;&lt;" "&lt;&lt;nodeList[i].c&lt;&lt;endl;</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>nodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>            <span class="token keyword">int</span> row<span class="token operator">=</span>nodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">;</span>            z_character<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token operator">:</span>z_character<span class="token punctuation">)</span><span class="token punctuation">{</span>            result_str<span class="token operator">+</span><span class="token operator">=</span>str<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    cout&lt;&lt;result_str&lt;&lt;endl;</span>        <span class="token keyword">return</span> result_str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> simple </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
