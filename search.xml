<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hithesis 工大论文模板</title>
      <link href="/2020/12/14/write/latex/hithesis/hithesis-gong-da-lun-wen-mo-ban/"/>
      <url>/2020/12/14/write/latex/hithesis/hithesis-gong-da-lun-wen-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="中期报告"><a href="#中期报告" class="headerlink" title="中期报告"></a>中期报告</h1><h2 id="hithesis"><a href="#hithesis" class="headerlink" title="hithesis"></a>hithesis</h2><p>模板下载地址：<a href="https://github.com/dustincys/hithesis" target="_blank" rel="noopener">hithesis</a></p><p>将zip包下载解压，根目录为：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hithesis-zip.png" alt="解压后的目录"></p><h3 id="生成样式文件"><a href="#生成样式文件" class="headerlink" title="生成样式文件"></a>生成样式文件</h3><p>然后在根目录下执行（在github项目介绍中）：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># windows:</span>lualatex hithesis.ins<span class="token comment" spellcheck="true"># mac/linux</span>latex hithesis.ins<span class="token comment" spellcheck="true"># make</span><span class="token function">make</span> cls</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hithesis-%E7%94%9F%E6%88%90%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6.png" alt="生成的样式文件"></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>生成好格式后，进入到示例文件夹中</p><pre class=" language-bash"><code class="language-bash">examples├── hitart│   ├── reportplus  %深圳校区博士中期报告│   └── reports     %除去深圳校区博士中期报告的一校三区本硕博开题、中期报告└── hitbook    ├── chinese     %一校三区本硕博毕业论文以及博后出站报告    └── english     %一校三区本硕博英文版毕业论文</code></pre><p>在hitart/reports目录下执行：</p><pre class=" language-bash"><code class="language-bash">xelatex -shell-escape report.texbibtex reportxelatex -shell-escape report.texxelatex -shell-escape report.tex</code></pre><p>或者用vscode打开该目录，直接执行。</p><p>最后生成的开题中期报告格式不太正确：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hithesis-%E4%B8%AD%E6%9C%9F%E6%A0%B7%E5%BC%8F.png" alt="hithesis生成的样式-本部硕士中期"><br>因此换用hithesis-alpha。</p><h2 id="hithesis-alpha"><a href="#hithesis-alpha" class="headerlink" title="hithesis-alpha"></a>hithesis-alpha</h2><p>下载地址：<a href="https://github.com/Regulust/hithesis-alpha#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">hithesis-alpha</a></p><h3 id="生成样式文件-1"><a href="#生成样式文件-1" class="headerlink" title="生成样式文件"></a>生成样式文件</h3><p>同hithesis一样，在根目录下运行：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># windows:</span>lualatex hithesis.ins<span class="token comment" spellcheck="true"># mac/linux</span>latex hithesis.ins</code></pre><h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><p>用vscode直接打开根目录，编辑main.tex，修改documentclass的参数：</p><pre class=" language-bash"><code class="language-bash">\documentclass<span class="token punctuation">[</span>newtxmath<span class="token operator">=</span>true,newgeometry<span class="token operator">=</span>two,capcenterlast<span class="token operator">=</span>true,subcapcenterlast<span class="token operator">=</span>true,openright<span class="token operator">=</span>false,absupper<span class="token operator">=</span>true,type<span class="token operator">=</span>master,stage<span class="token operator">=</span>zhongqi,campus<span class="token operator">=</span>harbin<span class="token punctuation">]</span><span class="token punctuation">{</span>hithesis<span class="token punctuation">}</span></code></pre><p>生成的样式如下：</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/hithesis-alpha-%E6%A0%B7%E5%BC%8F.png" alt="hithesis-alpha生成的样式-本部硕士中期"></p>]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Graphql的使用</title>
      <link href="/2020/12/10/graphql/graphql-de-shi-yong/"/>
      <url>/2020/12/10/graphql/graphql-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h1><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.graphql-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphql-java-tools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mountcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphql-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.graphql-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphiql-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.graphql-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>graphql-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>graphiql便于调试接口和查看文档，项目启动后访问：<a href="http://ip:port/graphiql" target="_blank" rel="noopener">http://ip:port/graphiql</a></p><h1 id="添加Query和Type"><a href="#添加Query和Type" class="headerlink" title="添加Query和Type"></a>添加Query和Type</h1><p>在resources根目录下新建root.graphqls文件和schema.graphqls 文件，名字不可更换</p><h2 id="root-graphqls"><a href="#root-graphqls" class="headerlink" title="root.graphqls"></a>root.graphqls</h2><p>root.graphqls中用于定义接口：</p><pre class=" language-java"><code class="language-java">type Query<span class="token punctuation">{</span>    # 启动任务    <span class="token function">startEnterpriseRelationshipAnalyse</span><span class="token punctuation">(</span>module<span class="token operator">:</span>String<span class="token punctuation">,</span>organizationName<span class="token operator">:</span>String<span class="token punctuation">,</span>organizationUrl<span class="token operator">:</span>String<span class="token punctuation">,</span>userId<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token operator">:</span> StartProcessResult    # 获取当前正在执行的任务名称    <span class="token function">currentTask</span><span class="token punctuation">(</span>processInstanceId<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ProcessCurrentTaskResult    # 获取所有任务    <span class="token function">taskList</span><span class="token punctuation">(</span>page<span class="token operator">:</span>Int<span class="token punctuation">,</span> size<span class="token operator">:</span>Int <span class="token punctuation">)</span><span class="token operator">:</span> OrganizationTaskPageResult    # 获取所有已经完成的任务    <span class="token function">completedTaskList</span><span class="token punctuation">(</span>page<span class="token operator">:</span>Int<span class="token punctuation">,</span> size<span class="token operator">:</span>Int <span class="token punctuation">)</span><span class="token operator">:</span>OrganizationTaskPageResult<span class="token punctuation">}</span></code></pre><p>在graphqls文件中写的注释会体现在<a href="http://ip:port/graphiql" target="_blank" rel="noopener">http://ip:port/graphiql</a> 中的文档上。<br>该文件中定义了4个接口，小括号内是接口需要传入的参数，冒号后面是接口的返回值。</p><ul><li>Result：返回一个Result的数据类型</li><li>[AnalysisJsonResponse]，返回一个 AnalysisJsonResponse类型的列表。</li><li>ProcessCurrentTaskResult返回一个ProcessCurrentTaskResult类型</li></ul><p>Result和 ProcessCurrentTaskResult等类型都在schema.graphqls中定义。</p><h2 id="schema-graphqls"><a href="#schema-graphqls" class="headerlink" title="schema.graphqls"></a>schema.graphqls</h2><pre class=" language-java"><code class="language-java">type Result<span class="token punctuation">{</span>    code<span class="token operator">:</span> Int    msg<span class="token operator">:</span> String<span class="token punctuation">}</span>type StartProcessResult <span class="token punctuation">{</span>    result<span class="token operator">:</span> Result    taskId<span class="token operator">:</span> String    processInstanceId<span class="token operator">:</span> String<span class="token punctuation">}</span># 获取当前正在执行的任务名称结果type ProcessCurrentTaskResult<span class="token punctuation">{</span>    result<span class="token operator">:</span> Result    processTaskId<span class="token operator">:</span> String<span class="token punctuation">}</span>type PageInfo<span class="token punctuation">{</span>    total<span class="token operator">:</span> Int    current<span class="token operator">:</span> Int    size<span class="token operator">:</span> Int<span class="token punctuation">}</span>type OrganizationTaskResult<span class="token punctuation">{</span>    taskId<span class="token operator">:</span> String    processCode<span class="token operator">:</span>String    processId<span class="token operator">:</span>String    userId<span class="token operator">:</span>String    organizationName<span class="token operator">:</span> String    organizationUrl<span class="token operator">:</span> String    module<span class="token operator">:</span> String    progress<span class="token operator">:</span> String    status<span class="token operator">:</span> String    createTime<span class="token operator">:</span> String    endTime<span class="token operator">:</span> String<span class="token punctuation">}</span>type OrganizationTaskPageResult<span class="token punctuation">{</span>    # <span class="token punctuation">[</span>OrganizationTaskResult<span class="token punctuation">]</span>表示 OrganizationTaskResult 类型的列表    list<span class="token operator">:</span> <span class="token punctuation">[</span>OrganizationTaskResult<span class="token punctuation">]</span>    pageInfo<span class="token operator">:</span> PageInfo    result<span class="token operator">:</span> Result<span class="token punctuation">}</span></code></pre><p>schema中定义的类型要编写对应的Entity类，方便后面构建对象。</p><h1 id="定义Resolver"><a href="#定义Resolver" class="headerlink" title="定义Resolver"></a>定义Resolver</h1><p>在root.graphqls中定义的接口要在resolver中实现，否则会报错。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>coxautodev<span class="token punctuation">.</span>graphql<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>GraphQLQueryResolver<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>topveda<span class="token punctuation">.</span>cloudactiviti<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>topveda<span class="token punctuation">.</span>cloudactiviti<span class="token punctuation">.</span>service<span class="token punctuation">.</span>EnterpriseRaService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>topveda<span class="token punctuation">.</span>cloudactiviti<span class="token punctuation">.</span>service<span class="token punctuation">.</span>OrganizationTaskService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivitiResolver</span> <span class="token keyword">implements</span> <span class="token class-name">GraphQLQueryResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EnterpriseRaService enterpriseRaService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrganizationTaskService organizationTaskService<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String deploymentId<span class="token operator">=</span>enterpriseRaService<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deploymentId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> StartProcessResult <span class="token function">startEnterpriseRelationshipAnalyse</span><span class="token punctuation">(</span>String module<span class="token punctuation">,</span> String organizationName<span class="token punctuation">,</span> String organizationUrl<span class="token punctuation">,</span> String userId<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//....</span>        <span class="token keyword">return</span> StartProcessResult<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">taskId</span><span class="token punctuation">(</span>taskId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">processInstanceId</span><span class="token punctuation">(</span>processInstanceId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ProcessCurrentTaskResult <span class="token function">currentTask</span><span class="token punctuation">(</span>String processInstanceId<span class="token punctuation">)</span><span class="token punctuation">{</span>        String currentTaskId<span class="token operator">=</span>enterpriseRaService<span class="token punctuation">.</span><span class="token function">getCurrentTask</span><span class="token punctuation">(</span>processInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ProcessCurrentTaskResult<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">processTaskId</span><span class="token punctuation">(</span>currentTaskId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ProcessLastTaskResult <span class="token function">lastFinishedTask</span><span class="token punctuation">(</span>String processInstanceId<span class="token punctuation">)</span><span class="token punctuation">{</span>        String lastFinishedTaskId<span class="token operator">=</span>enterpriseRaService<span class="token punctuation">.</span><span class="token function">getLastFinishedTask</span><span class="token punctuation">(</span>processInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ProcessLastTaskResult<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">msg</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">processTaskId</span><span class="token punctuation">(</span>lastFinishedTaskId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> OrganizationTaskPageResult <span class="token function">taskList</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> organizationTaskService<span class="token punctuation">.</span><span class="token function">getTaskListByPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取所有已经完成的任务</span>    <span class="token keyword">public</span> OrganizationTaskPageResult <span class="token function">completedTaskList</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> organizationTaskService<span class="token punctuation">.</span><span class="token function">getCompletedTaskListByPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h1><p>运行程序，访问<a href="http://ip:port/graphiql：" target="_blank" rel="noopener">http://ip:port/graphiql：</a><br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/graphiql.png" alt="graphiql测试接口"><br>打开右侧的query，会看到接口文档，有接口名称，参数和返回值类型<br>可以根据自己需要的返回值定义访问形式，上图中只返回result的msg属性（<strong>按需返回</strong>），如果需要返回result的code属性，写为：</p><pre class=" language-bash"><code class="language-bash">currentTask<span class="token punctuation">(</span>processInstanceId:<span class="token string">"e00ca85a-360e-11eb-9ca6-809599575c52"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  result<span class="token punctuation">{</span>    msg    code  <span class="token punctuation">}</span>  processTaskId<span class="token punctuation">}</span></code></pre><p>然后点击左上角的运行按钮即可运行接口。</p><h2 id="返回自定义对象列表"><a href="#返回自定义对象列表" class="headerlink" title="返回自定义对象列表"></a>返回自定义对象列表</h2><p>如果需要返回自定义的对象列表，以上面定义的completedTaskList为例：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>  completedTaskList<span class="token punctuation">(</span>page:1,size:10<span class="token punctuation">)</span><span class="token punctuation">{</span>    list<span class="token punctuation">{</span>      taskId      processCode    <span class="token punctuation">}</span>    pageInfo<span class="token punctuation">{</span>      total      current      size    <span class="token punctuation">}</span>    result<span class="token punctuation">{</span>      code    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Graphql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>部署springboot项目到docker</title>
      <link href="/2020/12/10/docker/bu-shu-springboot-xiang-mu-dao-docker/"/>
      <url>/2020/12/10/docker/bu-shu-springboot-xiang-mu-dao-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="idea插件部署"><a href="#idea插件部署" class="headerlink" title="idea插件部署"></a>idea插件部署</h1><h2 id="idea中安装docker插件"><a href="#idea中安装docker插件" class="headerlink" title="idea中安装docker插件"></a>idea中安装docker插件</h2><p>在setting-plugin中搜索并安装docker：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/idea-docker%E6%8F%92%E4%BB%B6.png" alt="安装docker插件"></p><h2 id="连接远程docker服务器"><a href="#连接远程docker服务器" class="headerlink" title="连接远程docker服务器"></a>连接远程docker服务器</h2><p>在build，docker中添加一个连接，并填写好服务器ip和端口：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/idea-%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8Bdocker.png" alt="连接远程docker"></p><h2 id="将springboot项目打包"><a href="#将springboot项目打包" class="headerlink" title="将springboot项目打包"></a>将springboot项目打包</h2><p>点击上面的skip test按钮，可以跳过测试：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/idea-%E6%89%93%E5%8C%85.png" alt="将项目打成jar包"></p><h2 id="编写DockerFile"><a href="#编写DockerFile" class="headerlink" title="编写DockerFile"></a>编写DockerFile</h2><p>DockerFile位置与target文件夹同级目录，DockerFile中的路径是相对路径：</p><p> 指定了临时文件目录为/tmp，其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp，ENTRYPOINT 执行项目 cloud-activiti.jar。为了缩短 Tomcat 启动时间，添加一个系统属性指向 “/dev/./urandom” 作为 Entropy Source</p><pre class=" language-bash"><code class="language-bash">FROM java:8<span class="token comment" spellcheck="true">#暴露容器的9023端口</span>EXPOSE 9023<span class="token comment" spellcheck="true">#将复制指定的cloud-activiti-0.0.1-SNAPSHOT.jar为容器中的cloud-activiti.jar，相当于拷贝到容器中取了个别名</span>ADD target/cloud-activiti-0.0.1-SNAPSHOT.jar /cloud-activiti.jarVOLUME /tmpRUN <span class="token function">bash</span> -c <span class="token string">'touch /cloud-activiti.jar'</span>ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/cloud-activiti.jar"</span><span class="token punctuation">]</span></code></pre><h2 id="部署和运行"><a href="#部署和运行" class="headerlink" title="部署和运行"></a>部署和运行</h2><p>点击Edit Configuration：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/%E9%83%A8%E7%BD%B2%E5%92%8C%E6%89%A7%E8%A1%8Cdocker.png" alt="编辑配置"><br>点击左上角加号，“+”：</p><p>选择DockerFile：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/docker-files-configuration.png" alt="配置configuration"><br>选择要部署的目标docker服务器，dockerfile文件，端口号，tag等：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/run-configuration.png" alt="部署和运行"><br>然后点击run，即可部署到docker服务器中。</p><h1 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h1><h2 id="上传Dockerfile和jar包"><a href="#上传Dockerfile和jar包" class="headerlink" title="上传Dockerfile和jar包"></a>上传Dockerfile和jar包</h2><p>将Dockerfile和 jar包上传到docker服务器，注意dockerfile中jar包的路径，决定了Dockerfile和jar包的相对位置。</p><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><p>执行下面命令， 看好，最后面有个”.”点！</p><pre class=" language-bash"><code class="language-bash">docker build -t springbootdemo4docker <span class="token keyword">.</span></code></pre><p>-t 参数是指定此镜像的tag名</p><h2 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h2><p>制作完成后通过docker images命令可以查看制作的镜像，然后启动：</p><pre class=" language-bash"><code class="language-bash">docker run -d -p 8080:8085 springbootdemo4docker</code></pre><p>-d参数是让容器后台运行<br>-p 是做端口映射，此时将服务器中的8080端口映射到容器中的8085(项目中端口配置的是8085)端口</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://docker服务器ip地址:8080/" target="_blank" rel="noopener">http://docker服务器ip地址:8080/</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows cmd</title>
      <link href="/2020/12/08/windows/windows-cmd/"/>
      <url>/2020/12/08/windows/windows-cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="查看并解除端口占用"><a href="#查看并解除端口占用" class="headerlink" title="查看并解除端口占用"></a>查看并解除端口占用</h2><p>查看占用4000端口的进程：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -ano<span class="token operator">|</span>findstr <span class="token string">"4000"</span></code></pre><p>停止进程，PID为LISTENING后的数字）</p><pre class=" language-bash"><code class="language-bash">taskkill /pid <span class="token string">"PID"</span> /F</code></pre><p>如果出现：“无法终止 PID 为 xxx 的进程”，用管理员方式打开cmd，再次终止进程。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP和UDP协议</title>
      <link href="/2020/12/08/ji-suan-ji-wang-luo/chuan-shu-ceng/tcp-he-udp-xie-yi/"/>
      <url>/2020/12/08/ji-suan-ji-wang-luo/chuan-shu-ceng/tcp-he-udp-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h1><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP特点：</p><ul><li>面向连接</li><li>点对点，每条连接只能有两个端点</li><li>可靠交付，保证数据在传输过程中无差错、不丢失、不重复</li><li>全双工通信，连接两端都能发送和接收信息。</li><li>面向字节流。</li></ul><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>三次握手用于建立TCP连接，需要在客户端与服务器之间交换三个TCP报文段。<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/TCP-build-connect.png" alt="TCP三次握手建立连接"></p><p>建立连接的过程：</p><ul><li>客户端A打算建立TCP连接时，向服务器B发出连接请求报文段，首部中的同步位SYN=1，选择一个初始序号x。此时，A进入【同步已发送状态】表示正尝试建立连接。SYN报文段不能携带数据，需要消耗一个序列号。</li><li>B收到连接请求报文段后，如果同意连接，向A发送确认。在报文段中将同步位SYN和ACK都置1，确认号是x+1，然后选择一个初始序号seq=y，此时B进入【同步已接收状态】。这个报文段也不能携带数据，需要消耗一个序列号。</li><li>A收到B的确认后，还要向B给出确认。确认报文的ACK置1，确认号ack=y+1，序号是x+1。ACK报文段可以携带数据，如果不携带数据则不消耗序号，下一个报文的序号仍是x+1。此时A进入已建立连接状态，当B收到A的确认后，也进入建立连接状态。</li></ul><h3 id="为什么要三次握手？"><a href="#为什么要三次握手？" class="headerlink" title="为什么要三次握手？"></a>为什么要三次握手？</h3><ul><li>TCP连接是可靠的，需要确保服务器和客户端都具备接收和发送数据的能力。<ul><li>第一次握手证明客户端具备发送信息的能力，<br>第二次握手证明服务端具备接收和发送信息的能力<br>第三次握手证明客户端具备接收信息的能力（只有接收到了信息才会向服务端发送确认信息）<br>如果是两次就建立连接，服务端无法确认客户端是否具备接收信息的能力; 如果四次或更多的次的话，就造成了重复，前面服务端已经同意了建立连接，并且做好了连接准备，就没必要再次发送同意报文了</li></ul></li><li>防止因网络堵塞造成服务器忙等，造成资源浪费的情况。<ul><li>如果是两次的话，考虑这样一种情形，客户端第一次发送的连接请求因网络堵塞而没有到达服务器，当到达了超时重传时间后，客户端仍没有收到服务器的确认报文，就会发送第二次连接请求，这时服务端收到了该请求，并发送了确认信息，这时候连接建立；</li><li>过一段时间后，被网络堵塞的第一次连接请求也到达了服务端，服务器接收后就发送了确认信息，此时建立了连接并为该链接分配了资源，等待客户端发送信息，而客户端并不会处理这个连接，因为它已经通过超时重传建立了连接并处理了自己信息，所以服务端就会忙等，造成了服务端的资源浪费。</li></ul></li></ul><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>通信结束后，通信双方都可释放连接。释放前，A、B双方都处于连接已建立状态，假设A主动关闭TCP连接。<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/tcp-free-conn.png" alt="TCP三次握手建立连接"></p><ul><li>A把final报文段首部的终止控制位FIN置1，其序号seq=u，此时A进入终止等待1状态。Final报文段即使不携带数据，也要消耗一个序号。</li><li>B收到Final报文段后发出确认，ACK置1，确认号是ack=u+1，序号是v。然后B进入关闭等待状态。此时TCP连接处于半关闭状态，即A没有数据要发送，但是B发送的数据A仍要接收，B到A方向的连接没有关闭。A收到来自B的确认后进入终止等待2状态，等待B发送连接释放报文段。</li><li>当B发送完数据之后，向A发送Final报文段，FIN置1，ACK置1，序号为w，确认号u+1。此时B进入最后确认状态。</li><li>A收到B的Final报文后，必须对此发出确认，ACK置1，确认号ack=w+1，序号是u+1。然后进入到时间等待状态，必须等待2个MSL【1个MSL后，A发送的确认到达B，再等一个MSL，保证如果B重传了Final，这个Final在1个MSL也能到达A】（MSL是最长报文段寿命，即报文段在网络中存在的最长时间）后，A才进入关闭状态。B收到确认后，也进入关闭连接状态。</li></ul><h3 id="为什么需要四次挥手？"><a href="#为什么需要四次挥手？" class="headerlink" title="为什么需要四次挥手？"></a>为什么需要四次挥手？</h3><p>第三次挥手的作用是因为B发送完数据后需要通知A，否则A会一直处于等待接收B数据的状态，这样造成了资源浪费。而第四次挥手是A告诉B收到了请求的确认，如果没有这个确认，B不知道A是否收到了自己发出的请求，会一直重传该请求，所以第四次挥手也是必须的。</p><h3 id="服务器大量出现close-wait的原因"><a href="#服务器大量出现close-wait的原因" class="headerlink" title="服务器大量出现close_wait的原因"></a>服务器大量出现close_wait的原因</h3><p>如果服务器端不执行socket的close()操作，状态就不能由close_wait迁移到last_ack，则系统中会存在很多close_wait状态的连接。</p><h2 id="TCP拥塞避免"><a href="#TCP拥塞避免" class="headerlink" title="TCP拥塞避免"></a>TCP拥塞避免</h2><p><a href="https://www.cnblogs.com/hongdada/p/11206679.html#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">参考-TCP拥塞避免</a></p><h3 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h3><p>慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。发送方让自己的发送窗口等于拥塞窗口。每经过一个传输轮次，拥塞窗口就增加一倍。为了防止拥塞窗口增长过大，还需要设置慢开始门限。</p><h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h3><p>当拥塞窗口增大到慢开始门限时，就改为执行拥塞避免算法，此时拥塞窗口加法增大，就是线性增长，使得网络比较不容易堵塞。</p><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D-%E6%85%A2%E5%BC%80%E5%A7%8B.png" alt="TCP拥塞避免-慢开始"></p><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><p>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。立即重传不会出现超时，发送发也不会误以为出现了网络拥塞。</p><h3 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h3><p>快重传配合使用的还有快恢复算法，当发送方连续收到三个重复确认时，知道丢失了个别报文段，于是不启动慢开始（不把拥塞窗口置为1），而是执行快恢复，把慢开始门限设置为当前拥塞窗口的一半，再将拥塞窗口设置为门限值，然后开始执行拥塞避免。<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D-%E5%BF%AB%E6%81%A2%E5%A4%8D.png" alt="TCP拥塞避免-慢开始"></p><h2 id="如何保证可靠传输"><a href="#如何保证可靠传输" class="headerlink" title="如何保证可靠传输"></a>如何保证可靠传输</h2><ul><li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li><li>校验和： TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li><li>TCP 的接收端会丢弃重复的数据。</li><li>流量控制： TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）</li><li>拥塞控制： 当网络拥塞时，减少数据的发送。</li><li>停止等待协议: 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就- 停止发送，等待对方确认。在收到确认后再发下一个分组。 超时重传： 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li></ul><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>TCP采用滑动窗口实现流量控制，以控制发送方发送速率，保证接收方来得及接收。接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><h2 id="TCP粘包问题"><a href="#TCP粘包问题" class="headerlink" title="TCP粘包问题"></a>TCP粘包问题</h2><p><a href="https://www.cnblogs.com/cangqinglang/p/11503057.html" target="_blank" rel="noopener">参考-TCP粘包问题</a><br>TCP粘包就是指发送方发送的若干包数据到达接收方时粘成了一包，从接收缓冲区来看，后一包数据的头紧接着前一包数据的尾，出现粘包的原因是多方面的，可能是来自发送方，也可能是来自接收方。</p><ol><li>发送方造成的粘包</li></ol><p>&emsp;&emsp;TCP默认使用Nagle算法（主要作用：减少网络中报文段的数量），而Nagle算法主要做两件事：第一是只有上一个分组得到确认，才会发送下一个分组；第二是收集多个小分组，在一个确认到来时一起发送。</p><ol start="2"><li>接收方造成的粘包</li></ol><p>&emsp;&emsp;TCP接收到数据包时，并不会马上交到应用层进行处理，或者说应用层并不会立即处理。TCP将接收到的数据包保存在接收缓存里，然后应用程序主动从缓存读取收到的分组。这样一来，如果TCP接收数据包到缓存的速度大于应用程序从缓存中读取数据包的速度，多个包就会被缓存，应用程序就有可能读取到多个首尾相接粘到一起的包。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSI七层协议</title>
      <link href="/2020/12/08/ji-suan-ji-wang-luo/osi-qi-ceng-xie-yi/"/>
      <url>/2020/12/08/ji-suan-ji-wang-luo/osi-qi-ceng-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>该层为用户提供常用的应用程序，每个网络应用都对应着不同的协议，例如：FTP负责文件传输，DNS域名协议，SMTP邮件发送协议、POP3邮件接收协议（IMAP邮件接收协议，与POP3的区别在于 POP3 中邮件由客户端管理，而在 IMAP 中邮件由服务器管理）等</p><h2 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h2><p>FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息。</p><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>表示层：确保一个系统的应用层发送的消息可以被另一个系统的应用层读取，编码转换，数据解析，管理数据的加密解密、转换翻译、压缩和解压缩，最小传输单位：表示协议数据单元</p><h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>会话层：在网络中的两节点建立，维持和终止通信，最小传输单位：会话层协议数据单元。SMTP, DNS</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>传输层：为应用程序之间提供端到端的逻辑通信（”端”指源主机和目的主机），处理数据包的错误等传输问题。TCP, UDP协议，传输层数据单位为段。</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网络层：负责点到点（point-to-point）的传输（这里的”点”指主机或路由器）,进行逻辑地址寻址，实现不同网络之间的路径选择，IP 就在网络层。IP, ICMP, ARP, RARP, AKP, UUCP 协议。路由选择最小单位——分组（包）报文。路由器、网关。</p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>数据链路层：对物理层传输的比特流封装成帧，对数据进行差错检测。PPP，STP 协议，交 换机、网桥就处在这一层，最小的传输单位——帧。</p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>物理层：在不同设备中传输比特信息，将 0/1 信号与电信号或者光信号互相转化，作用是屏<br>蔽不同的传输媒体和通信手段的差异，使得数据链路层感觉不到这些差异。IEEE 802.2、Ethernet v.2、Internetwork。集线器（hub）、中继器。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/OSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png" alt="OSI参考模型"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="/2020/12/03/git/git-ming-ling/"/>
      <url>/2020/12/03/git/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看添加到git的文件</span><span class="token function">git</span> ls-files</code></pre><h2 id="添加文件不成功"><a href="#添加文件不成功" class="headerlink" title="添加文件不成功"></a>添加文件不成功</h2><p>git add出现 “fatal: in unpopulated submodule XXX” 错误<br>在本地仓库如果克隆了其他远程仓库，该远程仓库就会git add失败，解决：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -rf --cached xxxx<span class="token punctuation">(</span>文件夹的名称<span class="token punctuation">)</span><span class="token function">git</span> add xxxx/*</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装与配置</title>
      <link href="/2020/12/02/docker/an-zhuang-docker/"/>
      <url>/2020/12/02/docker/an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux上的安装与配置"><a href="#Linux上的安装与配置" class="headerlink" title="Linux上的安装与配置"></a>Linux上的安装与配置</h1><p>参考：<a href="https://www.cnblogs.com/yufeng218/p/8370670.html" target="_blank" rel="noopener">CentOS7上安装docker</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。<br>1、通过 uname -r 命令查看你当前的内核版本（若不满足要求可以先升级内核）</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">uname</span> -r</code></pre><p>2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum update</code></pre><p>3、卸载旧版本的docker(如果安装过旧版本的话)</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum remove docker  docker-common docker-selinux docker-engine</code></pre><p>4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2</code></pre><p>5、设置yum源</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>可以查看所有仓库中所有docker版本，并选择特定版本安装</p><pre class=" language-bash"><code class="language-bash">$ yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于repo中默认只开启stable仓库，故这里安装的是最新稳定版</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce</code></pre><p>或者安装指定的版本：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token operator">&lt;</span>FQPN<span class="token operator">></span><span class="token comment" spellcheck="true"># 例如：sudo yum install docker-ce-17.12.0.ce</span></code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>启动并加入开机启动</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl start docker$ <span class="token function">sudo</span> systemctl <span class="token function">enable</span> docker</code></pre><p>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p><pre class=" language-bash"><code class="language-bash">$ docker version</code></pre><p>如果有报错：</p><pre class=" language-bash"><code class="language-bash">Transaction check error:  <span class="token function">file</span> /usr/bin/docker from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64  <span class="token function">file</span> /usr/bin/docker-containerd from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64  <span class="token function">file</span> /usr/bin/docker-containerd-shim from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64  <span class="token function">file</span> /usr/bin/dockerd from <span class="token function">install</span> of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with <span class="token function">file</span> from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</code></pre><p>卸载旧版本的包</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</code></pre><p>再次安装：</p><pre class=" language-bash"><code class="language-bash"> yum <span class="token function">install</span> docker-ce</code></pre><h2 id="配置国内镜像"><a href="#配置国内镜像" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h2><p>进入 /etc/docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span></code></pre><p>输入： 网易镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF</code></pre><p>重启docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h2><p>修改Docker配置文件</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">vi</span> /lib/systemd/system/docker.service　</code></pre><p>修改ExecStart为：</p><pre class=" language-bash"><code class="language-bash">ExecStart<span class="token operator">=</span>/usr/bin/dockerd --containerd<span class="token operator">=</span>/run/containerd/containerd.sock</code></pre><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/docker-%E5%AE%89%E8%A3%85docker-%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE.png" alt="配置远程访问"></p><p>修改daemon.json</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/docker/daemon.json</code></pre><p>添加键值对</p><pre class=" language-bash"><code class="language-bash"> <span class="token string">"hosts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"0.0.0.0:2375"</span>,<span class="token string">"unix:///var/run/docker.sock"</span><span class="token punctuation">]</span></code></pre><p>重启docker</p><pre class=" language-bash"><code class="language-bash">systemctl daemon-reloadsystemctl restart docker</code></pre><h2 id="升级docker"><a href="#升级docker" class="headerlink" title="升级docker"></a>升级docker</h2><p>卸载docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum remove <span class="token variable"><span class="token variable">$(</span>rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> docker<span class="token variable">)</span></span></code></pre><p>下载最新版本docker</p><pre class=" language-bash"><code class="language-bash">curl -fsSL https://get.docker.com/ <span class="token operator">|</span> sh</code></pre><p>重启docker</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart docker <span class="token comment" spellcheck="true"># centos 7</span></code></pre><p>再次查看docker版本</p><pre class=" language-bash"><code class="language-bash">$ docker -vDocker version 18.09.3, build 774a1f4</code></pre><h1 id="windows-安装docker"><a href="#windows-安装docker" class="headerlink" title="windows 安装docker"></a>windows 安装docker</h1><h2 id="专业版开启Hyper-V功能"><a href="#专业版开启Hyper-V功能" class="headerlink" title="专业版开启Hyper-V功能"></a>专业版开启Hyper-V功能</h2><p>windows专业版要在打开或关闭windows功能那里开启Hyper-V功能。</p><h2 id="下载docker："><a href="#下载docker：" class="headerlink" title="下载docker："></a>下载docker：</h2><p><a href="https://www.docker.com/get-started" target="_blank" rel="noopener">官网</a></p><h2 id="配置国内镜像-1"><a href="#配置国内镜像-1" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h2><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/docker-%E5%AE%89%E8%A3%85docker-windows%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F.png" alt="配置国内镜像"></p><h2 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h2><p>参考：<a href="http://baijiahao.baidu.com/s?id=1652188442217820964&wfr=spider&for=pc" target="_blank" rel="noopener">Windows开启Docker远程访问</a></p><p>先勾选：<br><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/docker-%E5%AE%89%E8%A3%85docker-windows%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE.png" alt="配置Windows远程访问"><br>开启windows防火墙：</p><pre class=" language-bash"><code class="language-bash">netsh advfirewall firewall add rule name<span class="token operator">=</span><span class="token string">"docker_daemon"</span> dir<span class="token operator">=</span>in action<span class="token operator">=</span>allow protocol<span class="token operator">=</span>TCP localport<span class="token operator">=</span>2375</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git ignore 文件</title>
      <link href="/2020/11/30/git/git-ignore-wen-jian/"/>
      <url>/2020/11/30/git/git-ignore-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><p>参考：<a href="https://www.cnblogs.com/wangmo/p/7737109.html" target="_blank" rel="noopener">git设置忽略文件和目录</a></p><h2 id="忽略正则"><a href="#忽略正则" class="headerlink" title="忽略正则"></a>忽略正则</h2><p>忽略*.o文件和 *.a文件：</p><pre class=" language-bash"><code class="language-bash">*.<span class="token punctuation">[</span>oa<span class="token punctuation">]</span></code></pre><p>忽略*.b 和 *.B文件，my.b除外</p><pre class=" language-bash"><code class="language-bash">*.<span class="token punctuation">[</span>bB<span class="token punctuation">]</span><span class="token operator">!</span>my.b</code></pre><p>忽略dbg文件和dbg目录</p><pre class=" language-bash"><code class="language-bash">dbg</code></pre><p>只忽略dbg目录，不忽略dbg文件</p><pre class=" language-bash"><code class="language-bash">dbg/</code></pre><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p><h1 id="删除github中某个文件夹"><a href="#删除github中某个文件夹" class="headerlink" title="删除github中某个文件夹"></a>删除github中某个文件夹</h1><p>参考：<a href="https://blog.csdn.net/wudinaniya/article/details/77508229" target="_blank" rel="noopener">删除文件夹</a><br>在github上只能删除文件，删除文件夹的方式如下：</p><p>在本地仓库：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -r --cached target         <span class="token comment" spellcheck="true"># 删除target文件夹</span><span class="token function">git</span> commit -m <span class="token string">'删除了target文件夹'</span>      <span class="token comment" spellcheck="true"># 提交,添加操作说明</span><span class="token function">git</span> push -u origin master        <span class="token comment" spellcheck="true"># 将本次更改更新到github项目上去</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2020/11/23/write/markdown/markdown-yu-fa/"/>
      <url>/2020/11/23/write/markdown/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="代码块的语言"><a href="#代码块的语言" class="headerlink" title="代码块的语言"></a>代码块的语言</h1><table><thead><tr><th>Shell</th><th>bash,shell</th></tr></thead><tbody><tr><td>C#</td><td>c-sharp,csharp</td></tr><tr><td>CSS</td><td>css</td></tr><tr><td>SASS&amp;SCSS</td><td>sass,scss</td></tr><tr><td>Erlang</td><td>erl,erlang</td></tr><tr><td>Java</td><td>java</td></tr><tr><td>JavaScript</td><td>js,jscript,javascript</td></tr><tr><td>PHP</td><td>php</td></tr><tr><td>Python</td><td>py,python</td></tr><tr><td>Ruby</td><td>ruby,rails,rb</td></tr><tr><td>Scala</td><td>scala</td></tr><tr><td>SQL</td><td>sql</td></tr><tr><td>VisualBasic</td><td>vb,vbnet</td></tr><tr><td>XML</td><td>xml,xhtml</td></tr><tr><td>Swift</td><td>swift</td></tr><tr><td>GO</td><td>go,golang</td></tr></tbody></table><p>将网页上的表格转换成md、latex等的工具：<a href="https://tableconvert.com/" target="_blank" rel="noopener">TableConvert</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容。</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用数字加.加空格，如：</p><pre class=" language-md"><code class="language-md">1. 第一项2. 第二项3. 第三项</code></pre><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>在子列表中的选项前面添加四个空格即可：</p><pre class=" language-md"><code class="language-md">1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素</code></pre><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="段落缩进"><a href="#段落缩进" class="headerlink" title="段落缩进"></a>段落缩进</h1><p>第一种：<br>半方大的空白&amp;ensp;或&amp;#8194;</p><p>全方大的空白&amp;emsp;或&amp;#8195;</p><p>不断行的空白格&amp;nbsp;或&amp;#160;</p><p>第二种：<br>markdown语法支持html语法所以可以用这个，本人倾向这种方式，看起来比较干净。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-indent</span><span class="token punctuation">:</span><span class="token number">2</span>em</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作流</title>
      <link href="/2020/11/10/others/activiti/gong-zuo-liu-activiti/"/>
      <url>/2020/11/10/others/activiti/gong-zuo-liu-activiti/</url>
      
        <content type="html"><![CDATA[<h1 id="工作流-Activiti"><a href="#工作流-Activiti" class="headerlink" title="工作流-Activiti"></a>工作流-Activiti</h1><h2 id="bpmn插件"><a href="#bpmn插件" class="headerlink" title="bpmn插件"></a>bpmn插件</h2><ul><li><a href="https://blog.csdn.net/qq_33333654/article/details/101202362" target="_blank" rel="noopener">activiti6.0的绘图编辑器操作、使用、汉化</a></li><li>vscode 插件：bpmn editor</li></ul><h2 id="Springboot-依赖"><a href="#Springboot-依赖" class="headerlink" title="Springboot 依赖"></a>Springboot 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.activiti<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activiti-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.1.0.M4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.activiti.dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activiti-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.1.0.M4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>配置数据库连接</p><pre class=" language-sql"><code class="language-sql">spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span>class<span class="token operator">-</span>name<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc:mysql:<span class="token comment" spellcheck="true">//localhost:3306/db_activiti?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;nullCatalogMeansCurrent=true&amp;allowPublicKeyRetrieval=true</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>rootspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span>xxxx<span class="token comment" spellcheck="true"># spring boot 整合activiti默认关闭历史表，手动开启历史表如下：</span>spring<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>history<span class="token operator">-</span>level<span class="token operator">=</span>auditspring<span class="token punctuation">.</span>activiti<span class="token number">.db</span><span class="token operator">-</span>history<span class="token operator">-</span>used<span class="token operator">=</span><span class="token boolean">true</span><span class="token comment" spellcheck="true"># 可选</span><span class="token comment" spellcheck="true">#流程定义bpmn放置路径</span>spring<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span>process<span class="token operator">-</span>definition<span class="token operator">-</span>location<span class="token operator">-</span>prefix<span class="token operator">=</span>classpath:<span class="token operator">/</span>process<span class="token operator">/</span><span class="token comment" spellcheck="true">#项目随着spring启动自动部署</span>spring<span class="token punctuation">.</span>activiti<span class="token punctuation">.</span><span class="token keyword">check</span><span class="token operator">-</span>process<span class="token operator">-</span>definitions<span class="token operator">=</span><span class="token boolean">true</span></code></pre><h2 id="改正上述activiti版本创建数据表的bug"><a href="#改正上述activiti版本创建数据表的bug" class="headerlink" title="改正上述activiti版本创建数据表的bug"></a>改正上述activiti版本创建数据表的bug</h2><p>启动应用创建表后，运行：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- 创建用户表</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'联系地址'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账号'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>roles<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">5</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- 填充用户表</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'admincn'</span><span class="token punctuation">,</span> <span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$gw46pmsOVYO.smHYQ2jH.OoXoe.lGP8OStDkHNs/E74GqZDL5K7ki'</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ACTIVITI_ADMIN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'bajiecn'</span><span class="token punctuation">,</span> <span class="token string">'shanghang'</span><span class="token punctuation">,</span> <span class="token string">'bajie'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$gw46pmsOVYO.smHYQ2jH.OoXoe.lGP8OStDkHNs/E74GqZDL5K7ki'</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ACTIVITI_USER,GROUP_activitiTeam,g_bajiewukong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'wukongcn'</span><span class="token punctuation">,</span> <span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'wukong'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$gw46pmsOVYO.smHYQ2jH.OoXoe.lGP8OStDkHNs/E74GqZDL5K7ki'</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ACTIVITI_USER,GROUP_activitiTeam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'salaboycn'</span><span class="token punctuation">,</span> <span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'salaboy'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$gw46pmsOVYO.smHYQ2jH.OoXoe.lGP8OStDkHNs/E74GqZDL5K7ki'</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ACTIVITI_USER,GROUP_activitiTeam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- 修复Activiti7的M4版本缺失字段Bug</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">alter</span> <span class="token keyword">table</span> ACT_RE_DEPLOYMENT <span class="token keyword">add</span> <span class="token keyword">column</span> PROJECT_RELEASE_VERSION_ <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> ACT_RE_DEPLOYMENT <span class="token keyword">add</span> <span class="token keyword">column</span> VERSION_ <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- 动态表单数据存储</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>formdata<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>formdata<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>PROC_DEF_ID_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>PROC_INST_ID_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>FORM_KEY_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Control_ID_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Control_VALUE_<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><h2 id="部署和执行"><a href="#部署和执行" class="headerlink" title="部署和执行"></a>部署和执行</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnterpriseRaService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RepositoryService repositoryService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RuntimeService runtimeService<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Deployment deployment<span class="token operator">=</span>repositoryService<span class="token punctuation">.</span><span class="token function">createDeployment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addClasspathResource</span><span class="token punctuation">(</span><span class="token string">"processes/analyse1.bpmn"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"请假流程"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deployment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">startProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ProcessInstance instance<span class="token operator">=</span>runtimeService<span class="token punctuation">.</span><span class="token function">startProcessInstanceByKey</span><span class="token punctuation">(</span><span class="token string">"process_analyse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Service-Task"><a href="#Service-Task" class="headerlink" title="Service Task"></a>Service Task</h2><p>参考：<a href="https://www.pianshen.com/article/1950323381/" target="_blank" rel="noopener">自动服务任务</a><br><a href="https://www.cnblogs.com/dengjiahai/p/6942376.html" target="_blank" rel="noopener">服务任务</a><br>service task需要在bpmn文件中配置与之关联的执行类，async设置为true表示startProcessInstanceByKey方法立即返回，然后异步执行service task；</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">bpmn2:</span>serviceTask</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Activity_0z1g1ix<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>crawl<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">activiti:</span>async</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">activiti:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.cloudactiviti.listener.CrawlListener<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>与之关联的类实现JavaDelegate接口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrawlListener</span> <span class="token keyword">implements</span> <span class="token class-name">JavaDelegate</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>DelegateExecution delegateExecution<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----模拟爬虫-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后调用startProcessInstanceByKey执行流程，该方法立即返回，流程异步执行。</p><h2 id="查询当前流程实例已完成任务"><a href="#查询当前流程实例已完成任务" class="headerlink" title="查询当前流程实例已完成任务"></a>查询当前流程实例已完成任务</h2><p>其实是查询act_hi_actinst表，按照时间排序，返回最后完成的活动。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getLastFinishedTask</span><span class="token punctuation">(</span>String instanceId<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>HistoricActivityInstance<span class="token operator">></span> list<span class="token operator">=</span>historyService<span class="token punctuation">.</span><span class="token function">createHistoricActivityInstanceQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">processInstanceId</span><span class="token punctuation">(</span>instanceId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByHistoricActivityInstanceStartTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String lastFinishedTask <span class="token operator">=</span> <span class="token string">"空任务"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lastFinishedTask<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActivityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>HistoricActivityInstance taskInstance<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已完成："</span><span class="token operator">+</span>taskInstance<span class="token punctuation">.</span><span class="token function">getActivityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------当前任务为空-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lastFinishedTask<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="监听类中注入bean"><a href="#监听类中注入bean" class="headerlink" title="监听类中注入bean"></a>监听类中注入bean</h2><p>实现JavaDelegate的service task监听类中，采用Autowired注入bean为null，需要BeanFactoryPostProcessor获取。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AopContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>NoSuchBeanDefinitionException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanFactoryPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * spring工具类 方便在非spring管理环境中获取bean * * @author aaa */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SpringUtils</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Spring应用上下文环境 */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ConfigurableListableBeanFactory beanFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException    <span class="token punctuation">{</span>        SpringUtils<span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取对象     *     * @param name     * @return Object 一个以所给名字注册的bean的实例     * @throws org.springframework.beans.BeansException     *     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取类型为requiredType的对象     *     * @param clz     * @return     * @throws org.springframework.beans.BeansException     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clz<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException    <span class="token punctuation">{</span>        T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果BeanFactory包含一个与所给名称匹配的bean定义，则返回true     *     * @param name     * @return boolean     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断以给定名字注册的bean定义是一个singleton还是一个prototype。 如果与给定名字相应的bean定义没有被找到，将会抛出一个异常（NoSuchBeanDefinitionException）     *     * @param name     * @return boolean     * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param name     * @return Class 注册对象的类型     * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getType</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果给定的bean名字在bean定义中有别名，则返回这些别名     *     * @param name     * @return     * @throws org.springframework.beans.factory.NoSuchBeanDefinitionException     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException    <span class="token punctuation">{</span>        <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取aop代理对象     *     * @param invoker     * @return     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getAopProxy</span><span class="token punctuation">(</span>T invoker<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> AopContext<span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后用SpringUtils.getBean(注入类.class)获取。</p><pre class=" language-java"><code class="language-java">IActivitiGraph activitiGraph<span class="token operator">=</span>SpringUtils<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>IActivitiGraph<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>代替<span class="token annotation punctuation">@Autowired</span>IActivitiGraph activitiGraph<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2019/08/26/leetcode/string/kmp/"/>
      <url>/2019/08/26/leetcode/string/kmp/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="Next数组的含义"><a href="#Next数组的含义" class="headerlink" title="Next数组的含义"></a>Next数组的含义</h3><p>记录当前字符<strong>前缀字符串</strong>的最长前缀后缀的长度，记录了模式串在当前位置失配后，模式串指针<em>j</em>指向的下一个位置，即最大相同前缀的下一个字符</p><h3 id="Next数组降低时间复杂度的原理"><a href="#Next数组降低时间复杂度的原理" class="headerlink" title="Next数组降低时间复杂度的原理"></a>Next数组降低时间复杂度的原理</h3><p>参考：</p><ul><li><p><a href="https://blog.csdn.net/TesuZer/article/details/81031351" target="_blank" rel="noopener">Kmp中next数组含义</a></p></li><li><p><a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">从头到尾彻底理解KMP</a></p></li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>ABCDABCX  <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> 目标串S   ABCDABCY  <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> 模式串P</code></pre><p>此时，模式串到达字符Y处失配，<strong>证明模式串中Y之前的字符都已匹配成功</strong>，注意到，前缀字符串<em>ABCDABC</em>的共同最长前后缀为<em>ABC</em>，此时，<strong>目标串的前缀<em>ABC</em>和模式串的前缀<em>ABC</em>对应，目标串的后缀<em>ABC</em>和模式串的后缀<em>ABC</em>对应</strong>，失配后，模式串的指针跳到<em>D</em>处</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>ABCDABCX       <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> 目标串S       ABCDABCY   <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span> 模式串P</code></pre><p>此时, 模式串中<em>D</em> 之前的字符 <em>ABC</em> 仍是匹配的，因为，<strong>此时目标串的后缀 <em>ABC</em> 和 模式串的前缀 <em>ABC</em> 相匹配</strong>。</p><p><img src="https://github.com/ChangzeYan/ChangzeYan.github.io/raw/hexo/source/pic/KMP_1.jpg" alt="Next数组作用图示"></p><h3 id="Next数组的求解方法"><a href="#Next数组的求解方法" class="headerlink" title="Next数组的求解方法"></a>Next数组的求解方法</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>根据字符串的首尾相同最长子串</p><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>对模式串的标号方式不同，求出的next数组也不相同。模式串如果从0开始标号，求出的next数组比从1标号的next数组每位小1。</p><h5 id="从1开始标号：前两位固定为0、1"><a href="#从1开始标号：前两位固定为0、1" class="headerlink" title="从1开始标号：前两位固定为0、1"></a>从1开始标号：前两位固定为0、1</h5><table>    <thead>        <tr>            <td class="td">标号</td>            <td class="td">1</td>            <td class="td">2</td>            <td class="td">3</td>            <td class="td">4</td>            <td class="td">5</td>            <td class="td">6</td>            <td class="td">7</td>            <td class="td">8</td>            <td class="td">9</td>            <td class="td">10</td>            <td class="td">11</td>            <td class="td">12</td>        </tr>    </thead>    <tbody>        <tr>            <td class="td">P</td>            <td class="td">a</td>            <td class="td">b</td>            <td class="td">a</td>            <td class="td">b</td>            <td class="td">a</td>            <td class="td">a</td>            <td class="td">a</td>            <td class="td">b</td>            <td class="td">a</td>            <td class="td">b</td>            <td class="td">a</td>            <td class="td">a</td>        </tr>        <tr>            <td class="td">Next</td>            <td class="td">0</td>            <td class="td">1</td>            <td class="td">1</td>            <td class="td">2</td>            <td class="td">3</td>            <td class="td">4</td>            <td class="td">2</td>            <td class="td">2</td>            <td class="td">3</td>            <td class="td">4</td>            <td class="td">5</td>            <td class="td">6</td>        </tr>    </tbody></table><blockquote><p>字符串的前后定义：<code>标号小的为前面</code></p></blockquote><p>求第3位a的next值，看它前一位字符，为b(<strong>后面一直和b比较，b为目标字符</strong>),其next值为1 ——&gt; 找标号为1的字符，为a，不等于b，但是找到第1位了，则将第3位的next置1</p><p>求第4位的next值，看第3位的字符，为a(<strong>后面一直和a比较，a为目标字符</strong>),其next值为<em>1</em> –&gt; 找标号为<em>1</em>的字符，为a，等于a，<strong>以第3位上的next值作为标号的字符等于a</strong>，所以，<strong>第3位</strong> next值<strong>加1</strong>，作为目标位(第4位)的next值</p><p>求第5位的next值，看第4位的字符，为b(<strong>后面一直和b比较，b为目标字符</strong>)，其next值为<em>2</em>  –&gt; 找标号为<em>2</em>的字符，为b，等于b，<strong>以第4位上的next值作为标号的字符等于b</strong>，所以，<strong>第4位</strong> next值<strong>加1</strong>，作为目标位(第5位)的next值</p><p>求第6位的next值，看第5位的字符，为a(<strong>后面一直和a比较，a为目标字符</strong>)，其next值为<em>3</em>  –&gt; 找标号为<em>3</em>的字符，为a，等于a，<strong>以第5位上的next值作为标号的字符等于a</strong>，所以，<strong>第5位</strong> next值<strong>加1</strong>，作为目标位(第5位)的next值</p><p>求第7位的next值，看第6位的字符，为a(<strong>后面一直和a比较，a为目标字符</strong>)，其next值为<em>4</em>  –&gt; 找标号为<em>4</em>的字符，为b，不等于a，<strong>继续寻找</strong>–&gt; 标号为<em>4</em>的next值为 <em>2</em> –&gt; 标号为 <em>2</em> 的字符为b，不等于a，<strong>继续寻找</strong>  –&gt; 标号 <em>2</em> 的next值为 <em>1</em> –&gt; 标号为 <em>1</em> 的字符为 a，等于a， <strong>以第2位上的next值作为标号的字符等于a</strong>，所以，<strong>第2位</strong> next值<strong>加1</strong>，作为目标位(第7位)的next值</p><p>求第8位的next值，看第7位的字符，为a(<strong>后面一直和a比较，a为目标字符</strong>)，其next为 <em>2</em>，–&gt; 标号为 <em>2</em> 的字符为b，不等于a， <strong>继续寻找</strong>，标号 <em>2</em> 的next值为 <em>1</em> –&gt; 标号为 <em>1</em> 的字符为 a，等于a，<strong>以第2位上的next值作为标号的字符等于a</strong>，所以，<strong>第2位</strong> next值<strong>加1</strong>，作为目标位(第8位)的next值</p><p>求第9位的next值，看第8位的字符，为b(<strong>后面一直和b比较，b为目标字符</strong>)，其next值为<em>2</em>  –&gt; 找标号为<em>2</em>的字符，为b，等于b，<strong>以第8位上的next值作为标号的字符等于b</strong>，所以，<strong>第8位</strong> next值<strong>加1</strong>，作为目标位(第9位)的next值</p><p>求第9位的next值，看第8位的字符，为b(<strong>后面一直和b比较，b为目标字符</strong>)，其next值为<em>2</em>  –&gt; 找标号为<em>2</em>的字符，为b，等于b，<strong>以第8位上的next值作为标号的字符等于b</strong>，所以，<strong>第8位</strong> next值<strong>加1</strong>，作为目标位(第9位)的next值</p><p>求第10位的next值，看第9位的字符,为a(<strong>后面一直和a比较，a为目标字符</strong>),其next值为 <em>3</em> –&gt; 找标号为<em>3</em>的字符，为a，等于a，<strong>以第9位上的next值作为标号的字符等于a</strong>，所以，<strong>第9位</strong> next值<strong>加1</strong>，作为目标位(第10位)的next值</p><p>求第11位的next值，看第10位的字符，为b(<strong>后面一直和b比较，b为目标字符</strong>)，其next值为<em>4</em>  –&gt; 找标号为<em>4</em>的字符，为b，等于b，<strong>以第10位上的next值作为标号的字符等于b</strong>，所以，<strong>第10位</strong> next值<strong>加1</strong>，作为目标位(第11位)的next值</p><p>求第12位的next值，看第11位的字符,为a(<strong>后面一直和a比较，a为目标字符</strong>),其next值为 <em>5</em> –&gt; 找标号为<em>5</em>的字符，为a，等于a，<strong>以第11位上的next值作为标号的字符等于a</strong>，所以，<strong>第11位</strong> next值<strong>加1</strong>，作为目标位(第12位)的next值</p><h5 id="从0开始标号：前两位固定为-1、0"><a href="#从0开始标号：前两位固定为-1、0" class="headerlink" title="从0开始标号：前两位固定为-1、0"></a>从0开始标号：前两位固定为-1、0</h5><p>与上面的步骤相同，只是模式串的下标不同：</p><table><thead><tr><th align="center">标号</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th><th align="center">11</th></tr></thead><tbody><tr><td align="center">P</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">a</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">b</td><td align="center">a</td><td align="center">a</td></tr><tr><td align="center">Next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr></tbody></table><h3 id="Next数组求解"><a href="#Next数组求解" class="headerlink" title="Next数组求解"></a>Next数组求解</h3><p>根据方法2求next数组的代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_next</span><span class="token punctuation">(</span>str_p<span class="token punctuation">)</span><span class="token punctuation">:</span>    next_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># j为模式串下标，k为next值</span>    j<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment" spellcheck="true"># next_list 初始化时已经添加了一个-1，所以 判断条件小于 len(str_p)-1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>str_p<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># k==-1 是判断找没找到第一个字符，j一直是当前字符的前一个字符下标</span>        <span class="token comment" spellcheck="true"># str_p[j] == str_p[k] 判断 以某个字符的next值为标号的对应的字符与当前位前一位字符是否相同</span>        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> str_p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> str_p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果相同，该位next+1作为目标位的next值</span>            k <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            next_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            k <span class="token operator">=</span> next_list<span class="token punctuation">[</span>k<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(next_list)</span>    <span class="token keyword">return</span> next_list</code></pre><h3 id="KMP-1"><a href="#KMP-1" class="headerlink" title="KMP"></a>KMP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">kmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    next_list <span class="token operator">=</span> get_next<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 如果失配，目标串指针i不动，模式串指针j跳到失配位的next值处</span>        <span class="token comment" spellcheck="true"># 使得失配位置前缀字符串的后缀对应于模式串的前缀</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> next_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">if</span> j <span class="token operator">==</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> j    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></code></pre><h3 id="Kmp算法的时间复杂度"><a href="#Kmp算法的时间复杂度" class="headerlink" title="Kmp算法的时间复杂度"></a>Kmp算法的时间复杂度</h3><p>参考：<a href="https://blog.csdn.net/niukai1768/article/details/79579709" target="_blank" rel="noopener">KMP时间复杂度分析</a></p><p>O(m+n)</p><p><a href="https://blog.csdn.net/iamyvette/article/details/77433991" target="_blank" rel="noopener">https://blog.csdn.net/iamyvette/article/details/77433991</a></p><p><a href="https://blog.csdn.net/weixin_38332967/article/details/81944353" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38332967/article/details/81944353</a></p><p><a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">https://blog.csdn.net/v_july_v/article/details/7041827</a></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2019/07/19/leetcode/simple-without-algorithm/liang-shu-zhi-he/"/>
      <url>/2019/07/19/leetcode/simple-without-algorithm/liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">两数之和</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">示例</span><span class="token punctuation">:</span>给定 nums = <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target = 9因为 nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> + nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> = 2 + 7 = 9所以返回 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>本题不适合使用双指针法，排序后会将原来序号打乱。<br>用一个字典保存数值和其序号之间的对应关系，字典的健是数组的数值，字典的值是该数值的序号。<br>遍历数组，看<code>target-nums[i]</code>在不在字典中，<strong>同时保证当前序号和<code>target-nums[i]</code>在字典中对应的值不同，（防止重复使用该数）</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    index_value_dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        need <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># i!=index_value_dic[need] 为了防止[3,3]的情况</span>        <span class="token keyword">if</span> need <span class="token keyword">in</span> index_value_dic <span class="token operator">and</span> i <span class="token operator">!=</span> index_value_dic<span class="token punctuation">[</span>need<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> index_value_dic<span class="token punctuation">[</span>need<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 将元素值和其index写入，元素当作健，index为值，可能有重复的元素值例如 nums=[3,3],后一个元素会覆盖前面的键值对</span>            index_value_dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> simple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共前缀</title>
      <link href="/2019/06/23/leetcode/string/zui-chang-gong-gong-qian-zhui/"/>
      <url>/2019/06/23/leetcode/string/zui-chang-gong-gong-qian-zhui/</url>
      
        <content type="html"><![CDATA[<h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/longest-common-prefix/submissions/" target="_blank" rel="noopener">最长公关前缀</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"flower"</span><span class="token punctuation">,</span><span class="token string">"flow"</span><span class="token punctuation">,</span><span class="token string">"flight"</span><span class="token punctuation">]</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"fl"</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"racecar"</span><span class="token punctuation">,</span><span class="token string">"car"</span><span class="token punctuation">]</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 输入不存在公共前缀。<span class="token key atrule">说明</span><span class="token punctuation">:</span>所有输入只包含小写字母 a<span class="token punctuation">-</span>z 。</code></pre><blockquote><p>python中字符串有大小，例如：a&lt;b&lt;c; flight &lt; flow &lt; flower</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>$O(n^2)$: 找出最短的字符串，然后看所有字符串相同位置上的字符是否一样</li><li>找出最小和最大字符串，最小和最大字符串的最长公共前缀即整个<code>list</code>的最长公共前缀</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="n方复杂度"><a href="#n方复杂度" class="headerlink" title="n方复杂度"></a>n方复杂度</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> strs<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 按照字符串长度排序</span>        strs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span> len<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        first_str <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>first_str<span class="token punctuation">)</span> <span class="token operator">and</span> flag<span class="token punctuation">:</span>            s <span class="token operator">=</span> first_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">for</span> st <span class="token keyword">in</span> strs<span class="token punctuation">:</span>                <span class="token keyword">if</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>first_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> first_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">""</span></code></pre><h4 id="n复杂度"><a href="#n复杂度" class="headerlink" title="n复杂度"></a>n复杂度</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestCommonPrefix2</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> strs<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">""</span>    <span class="token comment" spellcheck="true"># 按字母表顺序：flight &lt; flow &lt;flower</span>    min_str <span class="token operator">=</span> min<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>    max_str <span class="token operator">=</span> max<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 只需要找最小和最大字符串的最长公共前缀</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>min_str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">!=</span> max_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> min_str<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> min_str</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗马数字转整数</title>
      <link href="/2019/06/22/leetcode/simple-without-algorithm/luo-ma-shu-zi-zhuan-zheng-shu/"/>
      <url>/2019/06/22/leetcode/simple-without-algorithm/luo-ma-shu-zi-zhuan-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/roman-to-integer/comments/" target="_blank" rel="noopener">罗马数字转整数</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><pre class=" language-bash"><code class="language-bash">字符          数值I             1V             5X             10L             50C             100D             500M             1000</code></pre><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"III"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">3</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"IV"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">4</span>示例 3<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"IX"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">9</span>示例 4<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"LVIII"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">58</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> L = 50<span class="token punctuation">,</span> V= 5<span class="token punctuation">,</span> III = 3.示例 5<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"MCMXCIV"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">1994</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> M = 1000<span class="token punctuation">,</span> CM = 900<span class="token punctuation">,</span> XC = 90<span class="token punctuation">,</span> IV = 4.</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>暴力条件判断：判断当前位的时候同时判断下一位，共有7种情况，分别以“I， V， X， L，C，D 和 M”开头<pre class=" language-yaml"><code class="language-yaml">M<span class="token punctuation">-</span><span class="token punctuation">></span> MC<span class="token punctuation">-</span><span class="token punctuation">></span> CM、CD、CD<span class="token punctuation">-</span><span class="token punctuation">></span> DX<span class="token punctuation">-</span><span class="token punctuation">></span> XC、XL、XL<span class="token punctuation">-</span><span class="token punctuation">></span> LI<span class="token punctuation">-</span><span class="token punctuation">></span> IX、IV、IV<span class="token punctuation">-</span><span class="token punctuation">></span> V</code></pre></li><li>观察罗马数字的结构特点：<pre class=" language-yaml"><code class="language-yaml">I &lt; V &lt; X &lt; L &lt; C &lt; D &lt; M特殊情况：CM = M<span class="token punctuation">-</span>C = <span class="token punctuation">-</span>C+M = 900CD = D<span class="token punctuation">-</span>C = <span class="token punctuation">-</span>C+D = 400<span class="token punctuation">...</span><span class="token punctuation">...</span></code></pre><blockquote><p>判断当前字符是否“小于”后一个字符，如果小于，则减去该字符对应的数值；如果大于则加上该字符对应的数值</p></blockquote></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 因为要修改 i 的数值，所以不能用rang()</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">1000</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">900</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">400</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">100</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">500</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">90</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">40</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">10</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">50</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'I'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">9</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'V'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">4</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'V'</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">5</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> res</code></pre><h4 id="根据结构"><a href="#根据结构" class="headerlink" title="根据结构"></a>根据结构</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">romanToInt2</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    str_num_dic <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>        <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token number">1000</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果小于下一个字符就减去，如果大于就加上</span>        res <span class="token operator">=</span> res <span class="token operator">-</span> str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">else</span> res <span class="token operator">+</span> str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> res<span class="token operator">+</span>str_num_dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数转罗马数字</title>
      <link href="/2019/06/21/leetcode/simple-without-algorithm/zheng-shu-zhuan-luo-ma-shu-zi/"/>
      <url>/2019/06/21/leetcode/simple-without-algorithm/zheng-shu-zhuan-luo-ma-shu-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="整数转罗马数字"><a href="#整数转罗马数字" class="headerlink" title="整数转罗马数字"></a>整数转罗马数字</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/integer-to-roman/" target="_blank" rel="noopener">整数转罗马数字</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。</p><pre class=" language-yaml"><code class="language-yaml">字符          数值I             1V             5X             10L             50C             100D             500M             1000</code></pre><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"III"</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"IV"</span>示例 3<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"IX"</span>示例 4<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">58</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"LVIII"</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> L = 50<span class="token punctuation">,</span> V = 5<span class="token punctuation">,</span> III = 3.示例 5<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">1994</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"MCMXCIV"</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> M = 1000<span class="token punctuation">,</span> CM = 900<span class="token punctuation">,</span> XC = 90<span class="token punctuation">,</span> IV = 4.</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>暴力分类讨论：遍历数字的每一位，判断该位是个位、十位、百位还是千位，然后执行相应的转换操作；</li><li>采用<code>数字-字符</code>结构的字典存储关键数字（进位有关）与对应字符的映射关系，然后用给定数字对这些关键数字依次取模，取模结果乘以该关键数字对应的字符</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="暴力分类讨论"><a href="#暴力分类讨论" class="headerlink" title="暴力分类讨论"></a>暴力分类讨论</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>    string_1 <span class="token operator">=</span> <span class="token string">''</span>    string_2 <span class="token operator">=</span> <span class="token string">''</span>    string_3 <span class="token operator">=</span> <span class="token string">''</span>    string_4 <span class="token operator">=</span> <span class="token string">''</span>    index <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> num<span class="token punctuation">:</span>        x <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>        num <span class="token operator">//=</span> <span class="token number">10</span>        <span class="token comment" spellcheck="true"># 个位</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                string_1 <span class="token operator">+=</span> <span class="token string">''</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                string_1 <span class="token operator">+=</span> <span class="token string">'IV'</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>                string_1 <span class="token operator">+=</span> <span class="token string">'IX'</span>            <span class="token keyword">elif</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_1 <span class="token operator">+=</span> <span class="token string">'I'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token number">5</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>                x <span class="token operator">-=</span> <span class="token number">5</span>                string_1 <span class="token operator">+=</span> <span class="token string">'V'</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_1 <span class="token operator">+=</span> <span class="token string">'I'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 十位</span>        <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                string_2 <span class="token operator">+=</span> <span class="token string">''</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                string_2 <span class="token operator">+=</span> <span class="token string">'XL'</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>                string_2 <span class="token operator">+=</span> <span class="token string">'XC'</span>            <span class="token keyword">elif</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_2 <span class="token operator">+=</span> <span class="token string">'X'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token number">5</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>                x <span class="token operator">-=</span> <span class="token number">5</span>                string_2 <span class="token operator">+=</span> <span class="token string">'L'</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_2 <span class="token operator">+=</span> <span class="token string">'X'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 百位</span>        <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                string_3 <span class="token operator">+=</span> <span class="token string">''</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                string_3 <span class="token operator">+=</span> <span class="token string">'CD'</span>            <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>                string_3 <span class="token operator">+=</span> <span class="token string">'CM'</span>            <span class="token keyword">elif</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_3 <span class="token operator">+=</span> <span class="token string">'C'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token number">5</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>                x <span class="token operator">-=</span> <span class="token number">5</span>                string_3 <span class="token operator">+=</span> <span class="token string">'D'</span>                <span class="token keyword">while</span> x<span class="token punctuation">:</span>                    string_3 <span class="token operator">+=</span> <span class="token string">'C'</span>                    x <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 千位，只有1，2，3三种情况</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> x<span class="token punctuation">:</span>                string_4 <span class="token operator">+=</span> <span class="token string">'M'</span>                x <span class="token operator">-=</span> <span class="token number">1</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    string <span class="token operator">=</span> string_4 <span class="token operator">+</span> string_3 <span class="token operator">+</span> string_2 <span class="token operator">+</span> string_1    <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    <span class="token keyword">return</span> string</code></pre><h4 id="优化暴力分类讨论"><a href="#优化暴力分类讨论" class="headerlink" title="优化暴力分类讨论"></a>优化暴力分类讨论</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">intToRoman2</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>    string <span class="token operator">=</span> <span class="token string">''</span>    index <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> num<span class="token punctuation">:</span>        x <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            string <span class="token operator">=</span> str_of_num<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">)</span> <span class="token operator">+</span> string        <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            string <span class="token operator">=</span> str_of_num<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token operator">+</span> string        <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            string <span class="token operator">=</span> str_of_num<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">)</span> <span class="token operator">+</span> string        <span class="token keyword">else</span><span class="token punctuation">:</span>            string_4 <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">while</span> x<span class="token punctuation">:</span>                string_4 <span class="token operator">+=</span> <span class="token string">'M'</span>                x <span class="token operator">-=</span> <span class="token number">1</span>            string <span class="token operator">=</span> string_4 <span class="token operator">+</span> string        num <span class="token operator">//=</span> <span class="token number">10</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    <span class="token keyword">return</span> string<span class="token comment" spellcheck="true"># 复用分类讨论代码</span><span class="token keyword">def</span> <span class="token function">str_of_num</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    string <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        string <span class="token operator">+=</span> <span class="token string">''</span>    <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        string <span class="token operator">+=</span> a <span class="token operator">+</span> b    <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>        string <span class="token operator">+=</span> a <span class="token operator">+</span> c    <span class="token keyword">elif</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> x<span class="token punctuation">:</span>            string <span class="token operator">+=</span> a            x <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">elif</span> <span class="token number">5</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>        x <span class="token operator">-=</span> <span class="token number">5</span>        string <span class="token operator">+=</span> b        <span class="token keyword">while</span> x<span class="token punctuation">:</span>            string <span class="token operator">+=</span> a            x <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> string</code></pre><h4 id="设置映射表，从高位到低位转换"><a href="#设置映射表，从高位到低位转换" class="headerlink" title="设置映射表，从高位到低位转换"></a>设置映射表，从高位到低位转换</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">intToRoman3</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 数值和字符映射关系</span>    num_str_dic <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">1000</span><span class="token punctuation">:</span> <span class="token string">'M'</span><span class="token punctuation">,</span>        <span class="token number">900</span><span class="token punctuation">:</span> <span class="token string">'CM'</span><span class="token punctuation">,</span>        <span class="token number">500</span><span class="token punctuation">:</span> <span class="token string">'D'</span><span class="token punctuation">,</span>        <span class="token number">400</span><span class="token punctuation">:</span> <span class="token string">'CD'</span><span class="token punctuation">,</span>        <span class="token number">100</span><span class="token punctuation">:</span> <span class="token string">'C'</span><span class="token punctuation">,</span>        <span class="token number">90</span><span class="token punctuation">:</span> <span class="token string">'XC'</span><span class="token punctuation">,</span>        <span class="token number">50</span><span class="token punctuation">:</span> <span class="token string">'L'</span><span class="token punctuation">,</span>        <span class="token number">40</span><span class="token punctuation">:</span> <span class="token string">'XL'</span><span class="token punctuation">,</span>        <span class="token number">10</span><span class="token punctuation">:</span> <span class="token string">'X'</span><span class="token punctuation">,</span>        <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">'IX'</span><span class="token punctuation">,</span>        <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'V'</span><span class="token punctuation">,</span>        <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'IV'</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'I'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># x 是字典中的健，这里是数字</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> num_str_dic<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用num整除 num_str_dic 中的数值，得到的数乘以对应的符号</span>        <span class="token comment" spellcheck="true">#（如：2*I=II，如果是0*I，就是""）</span>        res <span class="token operator">+=</span> num <span class="token operator">//</span> x <span class="token operator">*</span> num_str_dic<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        num <span class="token operator">%=</span> x    <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/2019/06/20/leetcode/simple-without-algorithm/sheng-zui-duo-shui-de-rong-qi/"/>
      <url>/2019/06/20/leetcode/simple-without-algorithm/sheng-zui-duo-shui-de-rong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">盛最多水的容器</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><blockquote><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p></blockquote><img src="https://i.loli.net/2019/06/20/5d0b7d4f6c8ef51122.jpg" style="zoom: 50%"><p><font size="1">图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</font></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">示例</span><span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">49</span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><code>双指针法</code>：设置首尾指针，每次<strong>让垂直线长度比较小的移动</strong>，每移动一次，更新最大面积</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> list<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>    area <span class="token operator">=</span> <span class="token number">0</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>height<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 双指针，分别指向首尾</span>    left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        height_left <span class="token operator">=</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span>        height_right <span class="token operator">=</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 取较短的</span>        height_min <span class="token operator">=</span> min<span class="token punctuation">(</span>height_left<span class="token punctuation">,</span> height_right<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 计算面积</span>        tmp_area <span class="token operator">=</span> height_min <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 更新面积</span>        <span class="token keyword">if</span> tmp_area <span class="token operator">></span> area<span class="token punctuation">:</span>            area <span class="token operator">=</span> tmp_area        <span class="token comment" spellcheck="true"># 让较短的垂直线移动</span>        <span class="token keyword">if</span> height_left <span class="token operator">&lt;</span> height_right<span class="token punctuation">:</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            right <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> area</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> DoublePointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KDD-Cup2012-Track2</title>
      <link href="/2019/06/20/paper/kddcup2012-track2/"/>
      <url>/2019/06/20/paper/kddcup2012-track2/</url>
      
        <content type="html"><![CDATA[<h2 id="KDD-Cup2012-Track2"><a href="#KDD-Cup2012-Track2" class="headerlink" title="KDD-Cup2012-Track2"></a><a href="https://jyunyu.csie.org/docs/pubs/kddcup2012paper.pdf" target="_blank" rel="noopener">KDD-Cup2012-Track2</a></h2><h3 id="A-Two-Stage-Ensemble-of-Diverse-Models-for-Advertisement-Ranking-in-KDD-Cup-2012"><a href="#A-Two-Stage-Ensemble-of-Diverse-Models-for-Advertisement-Ranking-in-KDD-Cup-2012" class="headerlink" title="A Two-Stage Ensemble of Diverse Models for Advertisement Ranking in KDD Cup 2012"></a>A Two-Stage Ensemble of Diverse Models for Advertisement Ranking in KDD Cup 2012</h3><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一次会话是指用户和搜索引擎的互动，即一次查询操作。会话包括：用户、搜索内容、搜索引擎搜到的广告、搜索引擎呈现给用户的广告、用户点击的广告（0条或者多条）、搜索会话的深度是指：搜索引擎呈现给用户的广告的数量；广告的位置/position（排名、rank）是指该广告在呈现给用户所有广告中的排名，呈现给用户的所有广告都会生成一个短文本，即广告的标题，标题后面紧跟着一个长文本（即：广告的描述）和一个URL（URL通常被缩短以节省屏幕空间）。</p><h3 id="训练集"><a href="#训练集" class="headerlink" title="训练集"></a>训练集</h3><p>测试集中的每行数据都有12个，含义依次如下：</p><ol><li><code>Click</code>: 用户（<code>UserID</code>）点击广告（<code>AdID</code>）的次数</li><li><code>Impression</code>: 广告(<code>AdID</code>)呈现给用户（<code>UserID</code>）的次数(每次查询只会呈现一次)</li><li><code>DisplayURL</code>: URL总是随着标题和描述出现，在文件中，URL是匿名的哈希值</li><li><code>AdID</code>: 广告id</li><li><code>AdvertiserID</code>: 广告商id</li><li><code>Depth</code>: 一次会话呈现给用户的广告数量</li><li><code>Position</code>: 广告在返回给用户广告列表的index</li><li><code>QueryID</code>: 搜索id，从0开始的整数，是queryid_tokensid.txt的主键</li><li><code>KeywordID</code>: 关键词id，buyingkeyword_tokensid.txt的主键</li><li><code>TitleID</code>: titleid_tokensid.txt的主键</li><li><code>DescriptionID</code>: descriptionid_tokensid.txt的主键</li><li><code>UserID</code>: userid_profile.txt的主键，当无法识别用户时，此字段的值为0。</li></ol><blockquote><p>注：要预测的是 $\frac{Click}{Impression}$ ，后面二分类的时候，把<code>Click</code>当成正样本集，<code>Impression-Click</code> 当作负样本集</p></blockquote><h3 id="其他附属文件"><a href="#其他附属文件" class="headerlink" title="其他附属文件"></a>其他附属文件</h3><ol><li>queryid_tokensid.txt</li><li>buyingkeywordid_tokensid.txt</li><li>titleid_tokensid.txt</li><li>descriptionid_tokensid.txt</li><li>userid_profile.txt</li></ol><blockquote><p>对于前4个文件，每一行都是 <code>id query|keyword|ad title|ad description</code>的格式,这些数据可能是自然语言，在文件中都用其哈希匿名化。<br>‘userid_profile.txt’的每一行由UserID，Gender和Age组成，由TAB字符分隔。注：并非训练和测试集中的每个UserID都将出现在’userid_profile.txt’中。 每个字段描述如下：</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">Gender</span><span class="token punctuation">:</span> '1' (男) '2'(女) '0'(unknow)<span class="token key atrule">Age</span><span class="token punctuation">:</span>  '1' for (0<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  '2' for (12<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> '3' for (18<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> '4'  for  (24<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> '5' for (30<span class="token punctuation">,</span>  <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> and '6' for greater than 40.</code></pre><h3 id="测试集"><a href="#测试集" class="headerlink" title="测试集"></a>测试集</h3><p>除了广告的被呈现次数(Impression)和点击次数(Click)，测试集和训练集保持相同的格式，测试数据集的一个子集用于在排行榜上对提交/更新的结果进行排名</p><h3 id="需要提交的结果"><a href="#需要提交的结果" class="headerlink" title="需要提交的结果"></a>需要提交的结果</h3><p>一个文本文件，每一行只有一个字段：广告的点击率，并且按照顺序与所给文件的行一一对应。</p><p><a href="/assets/kddcup2012paper_note.pdf">标注版论文</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]杨之之.Kaggle[2] - Predict the click through rate (KDD12 trackl2)[EB/OL].<a href="https://blog.csdn.net/u011292007/article/details/36886523" target="_blank" rel="noopener">https://blog.csdn.net/u011292007/article/details/36886523</a> 2014-07-09/2019-06-20<br>[2]<a href="https://www.kaggle.com/c/kddcup2012-track2/overview" target="_blank" rel="noopener">https://www.kaggle.com/c/kddcup2012-track2/overview</a></p>]]></content>
      
      
      <categories>
          
          <category> Paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
            <tag> KDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文数</title>
      <link href="/2019/06/19/leetcode/string/hui-wen-shu/"/>
      <url>/2019/06/19/leetcode/string/hui-wen-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/palindrome-number/comments/" target="_blank" rel="noopener">回文数</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">121</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">-121</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 从左向右读<span class="token punctuation">,</span> 为 <span class="token punctuation">-</span>121 。 从右向左读<span class="token punctuation">,</span> 为 121<span class="token punctuation">-</span> 。因此它不是一个回文数。示例 3<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 从右向左读<span class="token punctuation">,</span> 为 01 。因此它不是一个回文数。</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>转换成字符串，翻转，看是否和之前字符串相同</li><li>转换成字符串，设置首尾指针，看首尾指针指向的字符是否相同</li><li>将整数的每一位保存进<code>list</code>，设置首尾指针，看首尾指针是否相同</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="翻转字符串"><a href="#翻转字符串" class="headerlink" title="翻转字符串"></a>翻转字符串</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    str_x <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    str_x_reverse <span class="token operator">=</span> str_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> str_x <span class="token operator">==</span> str_x_reverse<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h4 id="首尾遍历字符串"><a href="#首尾遍历字符串" class="headerlink" title="首尾遍历字符串"></a>首尾遍历字符串</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPalindrome2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    str_x <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    first<span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>str_x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">while</span> first <span class="token operator">&lt;=</span> last<span class="token punctuation">:</span>        <span class="token keyword">if</span> str_x<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> str_x<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">:</span>            first <span class="token operator">+=</span> <span class="token number">1</span>            last <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> flag</code></pre><h4 id="首尾遍历list"><a href="#首尾遍历list" class="headerlink" title="首尾遍历list"></a>首尾遍历<code>list</code></h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPalindrome3</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">while</span> x<span class="token punctuation">:</span>        num_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>        x <span class="token operator">//=</span> <span class="token number">10</span>    first<span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> first <span class="token operator">&lt;=</span> last<span class="token punctuation">:</span>        <span class="token keyword">if</span> num_list<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> num_list<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">:</span>            first <span class="token operator">+=</span> <span class="token number">1</span>            last <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> flag</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
            <tag> simple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串转换整数 (atoi)</title>
      <link href="/2019/06/18/leetcode/string/zi-fu-chuan-zhuan-huan-zheng-shu-atoi/"/>
      <url>/2019/06/18/leetcode/string/zi-fu-chuan-zhuan-huan-zheng-shu-atoi/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串转换整数-atoi"><a href="#字符串转换整数-atoi" class="headerlink" title="字符串转换整数 (atoi)"></a>字符串转换整数 (atoi)</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/string-to-integer-atoi/" target="_blank" rel="noopener">字符串转换整数 (atoi)</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p>说明：</p><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，qing返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p><pre class=" language-yaml"><code class="language-yaml">示例 1<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"42"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">42</span>示例 2<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"   -42"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">-42</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 第一个非空白字符为 '<span class="token punctuation">-</span>'<span class="token punctuation">,</span> 它是一个负号。     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 <span class="token punctuation">-</span>42 。示例 3<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"4193 with words"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">4193</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 转换截止于数字 '3' ，因为它的下一个字符不为数字。示例 4<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"words and 987"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 第一个非空字符是 'w'<span class="token punctuation">,</span> 但它不是数字或正、负号。     因此无法执行有效的转换。示例 5<span class="token punctuation">:</span><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"-91283472332"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">-2147483648</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 数字 "<span class="token punctuation">-</span>91283472332" 超过 32 位有符号整数范围。     因此返回 INT_MIN (−231) 。</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>判断是否为空串</strong>，去除前部空格，<strong>再判断是否为空串</strong>，<strong>判断首字符是否为正负号或者数字</strong>，如果是,则保留符号，不是直接<code>return 0</code>，寻找数字，转换成整数，<strong>判断是否越界</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> string <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 去除前部空格</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">and</span> string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    string <span class="token operator">=</span> string<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(string)</span>    <span class="token comment" spellcheck="true"># 空白串的情况</span>    <span class="token keyword">if</span> string <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">or</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">or</span> <span class="token string">'0'</span> <span class="token operator">&lt;=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 寻找数字</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'0'</span> <span class="token operator">&lt;=</span> string<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">:</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        string <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>j<span class="token punctuation">]</span>        num <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 保存正负号</span>        symbol <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">or</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            symbol <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            string <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 转换为整数</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> string<span class="token punctuation">:</span>            tmp <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> tmp        <span class="token comment" spellcheck="true"># 判断是否越界</span>        <span class="token keyword">if</span> symbol <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span>            num <span class="token operator">=</span> <span class="token operator">-</span>num        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> num    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重复字符最长子串</title>
      <link href="/2019/06/16/leetcode/string/wu-chong-fu-zi-fu-zui-chang-zi-chuan/"/>
      <url>/2019/06/16/leetcode/string/wu-chong-fu-zi-fu-zui-chang-zi-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="无重复字符最长子串"><a href="#无重复字符最长子串" class="headerlink" title="无重复字符最长子串"></a>无重复字符最长子串</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">无重复字符最长子串</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p>示例 1:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"abcabcbb"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</code></pre><p>示例 2:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"bbbbb"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 因为无重复字符的最长子串是 "b"，所以其长度为 1。</code></pre><p>示例 3:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"pwwkew"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token key atrule">解释</span><span class="token punctuation">:</span> 因为无重复字符的最长子串是 "wke"，所以其长度为 3。     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>遍历字符串每个字符时，计算以该字符结束的不含重复字符子串的起始位置i，用该位置减去起始位置便是以该字符结束的最长不重复子串的长度。选取所有字符的该数值中最大的。</p><p><strong>起始位置i的计算方法</strong>：设置一个<code>&lt;str,int&gt;</code> 类型的字典<code>st</code>，每遍历一个字符都将其当前位置保存进<code>st</code>。每次遍历一个字符，查看st中有没有该字符，如果有，则证明前面有与当前字符重复的字符，则当前字符的i值设置为前面字符的<code>index</code>+1</p><p>以<code>str: abcbc</code>为例：</p><table><thead><tr><th align="left">index</th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th></tr></thead><tbody><tr><td align="left">str</td><td align="left">a</td><td align="left">b</td><td align="left">c</td><td align="left">b</td><td align="left">c</td></tr><tr><td align="left">起始位置 i</td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">2</td><td align="left">3</td></tr><tr><td align="left">以该字符结束的不重复子串长度即<code>index-i+1</code></td><td align="left">1</td><td align="left">2</td><td align="left">3</td><td align="left">2</td><td align="left">2</td></tr><tr><td align="left">该字符对应的最长不重复子串</td><td align="left">a</td><td align="left">ab</td><td align="left">abc</td><td align="left">cb</td><td align="left">bc</td></tr></tbody></table><blockquote><p><strong>特殊情况</strong>：<code>str: abba</code>,即两个相同字符中间的子串，仍含重复字符,此时，发生重复时，不能将当前字符的i值设置为前面重复字符的<code>index</code>+1，而是<code>max(前一个重复字符的index+1,i)</code>,即<strong>i的取值是一个非递减序列</strong></p></blockquote><table><thead><tr><th align="left">index</th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th></tr></thead><tbody><tr><td align="left">str</td><td align="left">a</td><td align="left">b</td><td align="left">b</td><td align="left">a</td></tr><tr><td align="left">起始位置 i</td><td align="left">0</td><td align="left">0</td><td align="left">2</td><td align="left">2,注意这里不能是前一个<code>a</code>的<code>index</code>+1=1,如果是，则以该字符结束的最长不重复子串为：bba，显然有重复字符</td></tr><tr><td align="left">以该字符结束的不重复子串长度即<code>index-i+1</code></td><td align="left">1</td><td align="left">2</td><td align="left">1</td><td align="left">2</td></tr><tr><td align="left">该字符结束的最长不重复子串</td><td align="left">a</td><td align="left">ab</td><td align="left">b</td><td align="left">ba</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: int        """</span>        <span class="token comment" spellcheck="true"># 保存字符index的字典</span>        st <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        i<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> st<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 需要取最大值，应对abba的情况</span>                <span class="token comment" spellcheck="true"># i是截至j，以s[j]为最后一个元素的最长不重复子串的起始位置，即索引范围是[i,j]的子串是以元素j为最后一个元素的最长子串。</span>                i <span class="token operator">=</span> max<span class="token punctuation">(</span>st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 字符串的长度即为字符串的结束位置j，减去起始位置i，加1</span>            ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j        <span class="token keyword">return</span> ans</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长回文子串</title>
      <link href="/2019/06/16/leetcode/string/zui-chang-hui-wen-zi-chuan/"/>
      <url>/2019/06/16/leetcode/string/zui-chang-hui-wen-zi-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">最长回文子串</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><pre class=" language-yaml"><code class="language-yaml">示例 1：<span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"babad"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"bab"</span><span class="token key atrule">注意</span><span class="token punctuation">:</span> "aba" 也是一个有效答案。</code></pre><pre class=" language-yaml"><code class="language-yaml">示例 2：<span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token string">"cbbd"</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token string">"bb"</span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><code>回文串特点</code>：关于中心字符对称（长度为奇数）或者关于中心线对称（长度为偶数）</p><p><code>中心扩散法</code>：遍历每一个字符，同时向左右扩散，判断扩散到的两个字符是否相同，如果相同，继续扩散；如果不同，停止</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        max_l <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#以s[i] 为中心向左右扩散</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> i<span class="token punctuation">,</span> i            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> right <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> max_l <span class="token operator">&lt;</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                    max_l <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>                    res <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">:</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                left <span class="token operator">-=</span> <span class="token number">1</span>                right <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">#以s[i],s[i+1]为中心向左右扩散</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> right <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> max_l <span class="token operator">&lt;</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                    max_l <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>                    res <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">:</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                left <span class="token operator">-=</span> <span class="token number">1</span>                right <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和-输入BST</title>
      <link href="/2019/06/15/leetcode/tree/liang-shu-zhi-he-shu-ru-bst/"/>
      <url>/2019/06/15/leetcode/tree/liang-shu-zhi-he-shu-ru-bst/</url>
      
        <content type="html"><![CDATA[<h2 id="两数之和-输入BST"><a href="#两数之和-输入BST" class="headerlink" title="两数之和-输入BST"></a>两数之和-输入BST</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/" target="_blank" rel="noopener">两数之和-输入BST</a></p><h3 id="structure"><a href="#structure" class="headerlink" title="structure"></a>structure</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">BST</span><span class="token punctuation">:</span> 二叉搜索树，每个节点的值大于其任意左侧子节点的值，小于其任意右节点的值</code></pre><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个二叉搜索树和一个目标结果，如果 <code>BST</code> 中存在两个元素且它们的和等于给定的目标结果，则返回 <code>true</code>。</p><p>案例 1:</p><pre class=" language-c"><code class="language-c">输入<span class="token punctuation">:</span>    <span class="token number">5</span>   <span class="token operator">/</span> \  <span class="token number">3</span>   <span class="token number">6</span> <span class="token operator">/</span> \   \<span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">7</span>Target <span class="token operator">=</span> <span class="token number">9</span>输出<span class="token punctuation">:</span> True</code></pre><p>案例 2:</p><pre class=" language-c"><code class="language-c">输入<span class="token punctuation">:</span>    <span class="token number">5</span>   <span class="token operator">/</span> \  <span class="token number">3</span>   <span class="token number">6</span> <span class="token operator">/</span> \   \<span class="token number">2</span>   <span class="token number">4</span>   <span class="token number">7</span>Target <span class="token operator">=</span> <span class="token number">28</span>输出<span class="token punctuation">:</span> False</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>构建树的中序遍历（<code>BST</code>的中序遍历为<strong>递增序列</strong>） <code>list</code>，设置两个指针，分别指向 <code>list</code> 的首尾，若首尾指针之和小于 <code>Target</code> ，则首指针后移一位；若首尾指针之和大于 <code>Target</code> ，则尾指针前移一位；若首尾指针之和等于 <code>Target</code> 则做出标记，退出循环。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>tree_li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 中序遍历</span>    <span class="token keyword">def</span> <span class="token function">ergodic_tree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>ergodic_tree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>tree_li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>ergodic_tree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">findTarget</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>ergodic_tree<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置首尾指针</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tree_li<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 设置是否存在Target标志</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>            sum <span class="token operator">=</span> self<span class="token punctuation">.</span>tree_li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>tree_li<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">if</span> sum <span class="token operator">==</span> k<span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> sum <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> flag</code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贝叶斯</title>
      <link href="/2019/06/15/paper/pgm/concept/conceptbayesiannetwork/"/>
      <url>/2019/06/15/paper/pgm/concept/conceptbayesiannetwork/</url>
      
        <content type="html"><![CDATA[<h2 id="贝叶斯"><a href="#贝叶斯" class="headerlink" title="贝叶斯"></a>贝叶斯</h2><h3 id="朴素贝叶斯分类"><a href="#朴素贝叶斯分类" class="headerlink" title="朴素贝叶斯分类"></a>朴素贝叶斯分类</h3><h4 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h4><p>已知某条件下的概率，如何得到两条件交换后的概率，也就是在已知 $P(A|B)$ 的情况下如何求得 $P(B|A)$ 的概率。 <strong>$P(A|B)$ 是后验概率（posterior probability），也就是我们常说的条件概率</strong>。即在条件 $B$ 下，事件 $A$ 发生的概率。<strong>相反 $P(A)$ 或 $P(B)$ 称为先验概率（prior probability）</strong>。适用于当很容易直接得出 $P(A|B)$，$P(B|A)$ 则很难直接得出，可由 $P(A|B)$ 计算得到 $P(B|A)$<br>$$<br>P(B|A)=\frac{P(A|B)P(B)}{P(A)}<br>$$</p><h3 id="贝叶斯网"><a href="#贝叶斯网" class="headerlink" title="贝叶斯网"></a>贝叶斯网</h3><p><code>Bayesian Network</code>，采用有向无环图表示网络结构，使用条件概率表<code>CPT</code>来描述联合概率分布。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/gnahznib/article/details/70244175" target="_blank" rel="noopener">概率图模型之：贝叶斯网络</a></p>]]></content>
      
      
      <categories>
          
          <category> Paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
            <tag> PGM </tag>
            
            <tag> BN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阅读：基于概率图模型的互联网广告点击率预测</title>
      <link href="/2019/06/14/paper/pgm/ji-yu-gai-lu-tu-mo-xing-de-hu-lian-wang-guang-gao-dian-ji-lu-yu-ce/"/>
      <url>/2019/06/14/paper/pgm/ji-yu-gai-lu-tu-mo-xing-de-hu-lian-wang-guang-gao-dian-ji-lu-yu-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h2><p>利用BN（贝叶斯网）的概率推理算法定量地分析任意用户之间的相似性，从而针对特定的广告，获得没有历史点击记录的用户与存在历史点击记录的用户之间存在的广告搜索行为的相似性，进而预测没有点击记录的用户对广告的 <code>CTR</code>（广告点击率）</p><ul><li>构建用户相似模型（用户贝叶斯网 <code>UBN</code>）</li><li>用户贝叶斯网近似推理（发现相似用户）和CTR预测（预测未点击用户对广告的点击率）</li><li>在数据集 <code>KDD CUP 2012-Track 2</code> 上进行实验（构建用户贝叶斯网、近似推理/发现相似用户、预测CTR）</li></ul><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">CTR</span><span class="token punctuation">:</span> 广告点击率<span class="token key atrule">UBN</span><span class="token punctuation">:</span> 用户贝叶斯网</code></pre><h2 id="章节安排"><a href="#章节安排" class="headerlink" title="章节安排"></a>章节安排</h2><ul><li>第一节给出构建用户贝叶斯网 <code>UBN</code> 的定义和构建方法</li><li>第二节给出 <code>UBN</code> 的近似推理算法和相应的 <code>CTR</code> 预测方法</li><li>第三节给出实验结果</li></ul><h3 id="构建用户相似模型"><a href="#构建用户相似模型" class="headerlink" title="构建用户相似模型"></a>构建用户相似模型</h3><h4 id="定义用户和关键词集合"><a href="#定义用户和关键词集合" class="headerlink" title="定义用户和关键词集合"></a>定义用户和关键词集合</h4><ul><li>用户集合：$U=\{U_1,U_2,\cdots,U_n\}$</li><li>广告关键词集合：$K=\{K_1,K_2,\cdots,K_m\}$</li><li>搜索行为集合：$B=\{B_1,B_2,\cdots,B_n\}$</li></ul><p>用户集合和搜索行为集合等长，$B$ 中的每一个元素代表一个用户的搜索关键词集合。</p><p>搜索行为集合中的<strong>每个元素都是一个集合</strong>，例如：$B_i=\{B_{i1},B_{i2},\cdots<br>,B_{il_i}\}$，表示用户一次搜索对应的关键词集合，称为搜索行为，$B_{ij} \in K$。</p><p>用户 $U_i$ 的搜索内容为： $C_i=&lt; U_i,M_i &gt;$, $M_i=\{B_{ij} | j=1,2,\cdots,l_i \}$。</p><blockquote><p>注：$M_i$ 中， <strong>原文中写的是 <code>i</code> $ =1,2,\cdots,l_i $ ,我理解的是这里应该为<code>j</code>。</strong></p></blockquote><p><strong>例1</strong>：用户 $U_i$ 的搜索行为集合为 $B_i=\{B_{i1},B_{i2},B_{i3},B_{i4}\}$ ，其中 $B_{i1}$ ,$B_{i2}$,$B_{i3}$,$B_{i4}$,对应的关键词分别为：$K_{1}$, $K_{2}$, $K_{3}$, $K_{4}$,则用户 $U_i$ 的搜索内容为 $C_i=&lt; U_i,\{K_{1},K_{2},K_{3},K_{4} \} &gt;$</p><h4 id="定义UBN"><a href="#定义UBN" class="headerlink" title="定义UBN"></a>定义UBN</h4><p><code>用户贝叶斯网</code>：</p><ul><li>节点：<strong>每个节点代表一个用户</strong>，用户集合 $U=\{U_1,U_2,\cdots,U_n\}$ 即节点集合，</li><li>边：有向边集$E$代表用户相似关系。若用户之间有边相连，则代表用户之间存在相似关系。用户相似度用 $sim(U_i,U_j)$ 表示：<br>$$<br>sim(U_i,U_j)=\frac {N(M_i \cap M_j)}{N(M_i \cup M_j)}<br>$$<br>设置相似度阈值 $\varepsilon$ ,若 $sim(U_i,U_j)&gt;\varepsilon$, 则用户 $U_i$ 和用户 $U_j$ 之间存在一条无向边。</li><li>边的方向：针对任意两个有边相连的节点，计算这两个用户的搜索记录中，相同关键词占各自关键词的比例。用户 $U_i$ 对 $U_j$ 的依赖度用 $D(U_i|U_j)$ 表示，用户 $U_j$ 对 $U_i$ 的依赖度用 $D(U_j|U_i)$ 表示。<br>$$<br>D(U_i|U_j)=\frac{N(M_i,M_j)}{N(M_j)},D(U_j|U_i)=\frac{N(M_i,M_j)}{N(M_i)}<br>$$<br>如果 $D(U_i|U_j)&gt;D(U_j|U_i)$,则表示$U_i$对$U_j$兴趣的依赖程度大于$U_j$对$U_i$兴趣的依赖程度。即 $U_j$ 指向 $U_i$，表示 $U_j$ 点击过的广告 $U_i$ 点击的可能性较大。</li></ul><blockquote><p>岳昆, 王朝禄, 朱运磊, 等. 基于概率图模型的互联网广告点击率预测[J]. 华东师范大学学报(自然科学版), <code>2013(3):15-25</code>.</p></blockquote><p><a href="/assets/基于概率图模型的互联网广告点击率预测.pdf">原文：基于概率图模型的互联网广告点击率预测</a></p>]]></content>
      
      
      <categories>
          
          <category> Paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
            <tag> PGM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转</title>
      <link href="/2019/06/13/leetcode/cpp-stl/reverse-integer/"/>
      <url>/2019/06/13/leetcode/cpp-stl/reverse-integer/</url>
      
        <content type="html"><![CDATA[<h2 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">整数反转</a></p><p>题目描述：<br>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p>示例1：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">321</span></code></pre><p>示例 2:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">-123</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">-321</span></code></pre><p>示例 3:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">输入</span><span class="token punctuation">:</span> <span class="token number">120</span><span class="token key atrule">输出</span><span class="token punctuation">:</span> <span class="token number">21</span></code></pre><p>注意:</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h3 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3><p>int 的范围</p><pre><code>[-2^31,2^31-1]</code></pre><p>C中常量INT_MAX和INT_MIN分别表示最大、最小整数，定义在头文件limits.h中。</p><pre class=" language-cpp"><code class="language-cpp">INT_MAX <span class="token operator">=</span> <span class="token function">2147483647</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>INT_MIN <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">2147483648</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">31</span><span class="token punctuation">)</span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>利用x%10循环取出原数最后一位，作为reverse_num的首位</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> reverse_num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用long long定义反转后的结果</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不用考虑x的正负，负数的模为负</span>    current<span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每次取出x的最后一位，将其当作反转数的第一位</span>    reverse_num<span class="token operator">=</span>reverse_num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>current<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> current_num<span class="token operator">=</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>current_num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>current_num<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span>INT_MIN <span class="token operator">||</span>num<span class="token operator">></span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//cout&lt;&lt;num&lt;&lt;endl;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> cpp_stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z字形变换</title>
      <link href="/2019/06/13/leetcode/simple-without-algorithm/zigzag-conversion/"/>
      <url>/2019/06/13/leetcode/simple-without-algorithm/zigzag-conversion/</url>
      
        <content type="html"><![CDATA[<h2 id="Z字形变换"><a href="#Z字形变换" class="headerlink" title="Z字形变换"></a>Z字形变换</h2><p>题目地址：<a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener">Z字形变换</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。<br>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><pre><code>L   C   I   RE T O E S I I GE   D   H   N</code></pre><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。<br>示例 1:</p><pre><code>输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 3输出: &quot;LCIRETOESIIGEDHN&quot;</code></pre><p>示例 2:</p><pre><code>输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 4输出: &quot;LDREOEIIECIHNTSG&quot;解释:L     D     RE   O E   I IE C   I H   NT     S     G</code></pre><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>画出变换后字母的图形，将每个字母的行号写在它右边</p><pre><code>L1    C1    I1    R1E2 T2 O2 E2 S2 I2 I2 G2E3    D3    H3    N3</code></pre><p>将每个字母变换后对应的行号与该字母对应：</p><pre><code>LEETCODEISHIRING1232123212321232</code></pre><p>便可以得到字母变换后行号的规律</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 保存字母与其行号对应关系的结构体</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> row<span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">convert</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string result_str<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化行号</span>        <span class="token keyword">int</span> ptr<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 决定行号是增加还是减少</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node nodeList<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Node n<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span>c<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span>row<span class="token operator">=</span>ptr<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                ptr<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ptr<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">==</span>numRows <span class="token operator">||</span> ptr<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token operator">!</span>flag<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            nodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string z_character<span class="token punctuation">[</span>numRows<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//        cout&lt;&lt;nodeList[i].row&lt;&lt;" "&lt;&lt;nodeList[i].c&lt;&lt;endl;</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>nodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>            <span class="token keyword">int</span> row<span class="token operator">=</span>nodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>row<span class="token punctuation">;</span>            z_character<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token operator">:</span>z_character<span class="token punctuation">)</span><span class="token punctuation">{</span>            result_str<span class="token operator">+</span><span class="token operator">=</span>str<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    cout&lt;&lt;result_str&lt;&lt;endl;</span>        <span class="token keyword">return</span> result_str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> simple </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
